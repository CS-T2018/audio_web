{
    "project": {},
    "files": {
        "build/ui.calendar.js": {
            "name": "build/ui.calendar.js",
            "modules": {},
            "classes": {
                "ui.date": 1,
                "zebkit.ui.date.DaysGrid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/ui.vk.js": {
            "name": "build/ui.vk.js",
            "modules": {},
            "classes": {
                "ui.vk": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/zebkit.js": {
            "name": "build/zebkit.js",
            "modules": {},
            "classes": {
                "zebkit.web": 1,
                "zebkit.URI": 1,
                "zebkit.DoIt": 1,
                "zebkit": 1,
                "Package": 1,
                "zebkit.Class": 1,
                "zebkit.Interface": 1,
                "zebkit.Dummy": 1,
                "zebkit.util": 1,
                "zebkit.util.Event": 1,
                "zebkit.util.rgb": 1,
                "zebkit.util.Listeners": 1,
                "zebkit.util.Position": 1,
                "zebkit.util.Position.Metric": 1,
                "zebkit.util.SingleColPosition": 1,
                "zebkit.util.TasksSet": 1,
                "zebkit.util.TasksSet.Task": 1,
                "zebkit.util.Zson": 1,
                "zebkit.io": 1,
                "zebkit.io.HTTP": 1,
                "zebkit.io.Service": 1,
                "zebkit.io.JRPC": 1,
                "zebkit.io.XRPC": 1,
                "zebkit.data": 1,
                "zebkit.data.TextModel": 1,
                "zebkit.data.Text": 1,
                "zebkit.data.SingleLineTxt": 1,
                "zebkit.data.ListModel": 1,
                "zebkit.data.Item": 1,
                "zebkit.data.TreeModel": 1,
                "zebkit.data.Matrix": 1,
                "zebkit.layout": 1,
                "zebkit.layout.Layout": 1,
                "zebkit.layout.Layoutable": 1,
                "zebkit.layout.StackLayout": 1,
                "zebkit.layout.BorderLayout": 1,
                "zebkit.layout.RasterLayout": 1,
                "zebkit.layout.FlowLayout": 1,
                "zebkit.layout.ListLayout": 1,
                "zebkit.layout.PercentLayout": 1,
                "zebkit.layout.Constraints": 1,
                "zebkit.layout.GridLayout": 1,
                "zebkit.ui.Manager": 1,
                "zebkit.ui.CompEvent": 1,
                "zebkit.ui.KeyEvent": 1,
                "zebkit.ui.PointerEvent": 1,
                "zebkit.ui.EventManager": 1,
                "zebkit.ui": 1,
                "zebkit.ui.Font": 1,
                "zebkit.ui.Panel": 1,
                "zebkit.ui.View": 1,
                "zebkit.ui.Render": 1,
                "zebkit.ui.Sunken": 1,
                "zebkit.ui.Etched": 1,
                "zebkit.ui.Raised": 1,
                "zebkit.ui.Dotted": 1,
                "zebkit.ui.Border": 1,
                "zebkit.ui.RoundBorder": 1,
                "zebkit.ui.CompRender": 1,
                "zebkit.ui.Gradient": 1,
                "zebkit.ui.Radial": 1,
                "zebkit.ui.Picture": 1,
                "zebkit.ui.Pattern": 1,
                "zebkit.ui.CompositeView": 1,
                "zebkit.ui.ViewSet": 1,
                "zebkit.ui.Line": 1,
                "zebkit.ui.BaseTextRender": 1,
                "zebkit.ui.StringRender": 1,
                "zebkit.ui.TextRender": 1,
                "zebkit.ui.PasswordText": 1,
                "zebkit.ui.TitledBorder": 1,
                "zebkit.ui.RadioView": 1,
                "zebkit.ui.ToggleView": 1,
                "zebkit.ui.FocusEvent": 1,
                "zebkit.ui.FocusManager": 1,
                "zebkit.ui.ShortcutEvent": 1,
                "zebkit.ui.ShortcutManager": 1,
                "zebkit.ui.Cursor": 1,
                "zebkit.ui.ViewPan": 1,
                "zebkit.ui.ImagePan": 1,
                "zebkit.ui.Label": 1,
                "zebkit.ui.BoldLabel": 1,
                "zebkit.ui.ImageLabel": 1,
                "zebkit.ui.Progress": 1,
                "zebkit.ui.StatePan": 1,
                "zebkit.ui.EvStatePan": 1,
                "zebkit.ui.CompositeEvStatePan": 1,
                "zebkit.ui.ButtonRepeatMix": 1,
                "zebkit.ui.ArrowButton": 1,
                "zebkit.ui.Button": 1,
                "zebkit.ui.SwitchManager": 1,
                "zebkit.ui.Group": 1,
                "zebkit.ui.Switchable": 1,
                "zebkit.ui.Checkbox": 1,
                "zebkit.ui.Checkbox.Box": 1,
                "zebkit.ui.Radiobox": 1,
                "zebkit.ui.Link": 1,
                "zebkit.ui.Toolbar": 1,
                "zebkit.ui.BorderPan": 1,
                "zebkit.ui.SplitPan": 1,
                "zebkit.ui.CollapsiblePan": 1,
                "zebkit.ui.StatusBar": 1,
                "zebkit.ui.StackPan": 1,
                "zebkit.ui.ScrollManager": 1,
                "zebkit.ui.Scroll": 1,
                "zebkit.ui.ScrollPan": 1,
                "zebkit.ui.MobileScrollMan": 1,
                "zebkit.ui.Slider": 1,
                "zebkit.ui.Tabs": 1,
                "zebkit.ui.Tabs.TabView": 1,
                "zebkit.ui.TextField": 1,
                "zebkit.ui.TextField.HintRender": 1,
                "zebkit.ui.TextArea": 1,
                "zebkit.ui.PassTextField": 1,
                "zebkit.ui.BaseList": 1,
                "zebkit.ui.List": 1,
                "zebkit.ui.List.ViewProvider": 1,
                "zebkit.ui.CompList": 1,
                "zebkit.ui.Combo": 1,
                "zebkit.ui.Combo.ContentPan": 1,
                "zebkit.ui.Combo.ComboPadPan": 1,
                "zebkit.ui.Combo.ReadonlyContentPan": 1,
                "zebkit.ui.Combo.EditableContentPan": 1,
                "zebkit.ui.MenuEvent": 1,
                "zebkit.ui.MenuItem": 1,
                "zebkit.ui.Menu": 1,
                "zebkit.ui.Menubar": 1,
                "zebkit.ui.PopupLayerMix": 1,
                "zebkit.ui.WinEvent": 1,
                "zebkit.ui.WinLayer": 1,
                "zebkit.ui.Window": 1,
                "zebkit.ui.Tooltip": 1,
                "zebkit.TooltippupManager": 1,
                "zebkit.ui.tree": 1,
                "zebkit.ui.tree.$IM": 1,
                "zebkit.ui.tree.DefEditors": 1,
                "zebkit.ui.tree.DefViews": 1,
                "zebkit.ui.tree.BaseTree": 1,
                "zebkit.ui.tree.Tree": 1,
                "zebkit.ui.tree.CompTree": 1,
                "zebkit.ui.grid": 1,
                "zebkit.ui.grid.Metrics": 1,
                "zebkit.ui.grid.DefViews": 1,
                "zebkit.ui.grid.DefEditors": 1,
                "zebkit.ui.grid.BaseCaption": 1,
                "zebkit.ui.grid.GridCaption": 1,
                "zebkit.ui.grid.CompGridCaption": 1,
                "zebkit.ui.grid.CompGridCaption.TitlePan": 1,
                "zebkit.ui.grid.Grid": 1,
                "zebkit.ui.grid.GridStretchPan": 1,
                "zebkit.ui.design": 1,
                "zebkit.ui.design.ShaperBorder": 1,
                "zebkit.ui.design.ShaperPan": 1,
                "zebkit.ui.design.FormTreeModel": 1,
                "zebkit.ui.ClipboardSupport": 1,
                "zebkit.web.MouseWheelSupport": 1,
                "zebkit.ui.KeyEventUninfier": 1,
                "zebkit.ui.CursorManager": 1,
                "zebkit.ui.HtmlElement": 1,
                "zebkit.ui.HtmlElementMan": 1,
                "zebkit.ui.HtmlCanvas": 1,
                "zebkit.ui.HtmlWinCanvas": 1,
                "zebkit.ui.html": 1,
                "zebkit.ui.html.HtmlTextInput": 1,
                "zebkit.ui.html.HtmlTextField": 1,
                "zebkit.ui.html.HtmlTextArea": 1,
                "zebkit.ui.html.HtmlLink": 1,
                "zebkit.ui.RootLayer": 1,
                "zebkit.ui.zCanvas": 1,
                "zebkit.ui.web.VideoPan": 1
            },
            "fors": {
                "zebkit.web": 1,
                "zebkit": 1,
                "zebkit.Class": 1,
                "zebkit.util": 1,
                "zebkit.util.Position": 1,
                "zebkit.util.TasksSet.Task": 1,
                "zebkit.util.TasksSet": 1,
                "zebkit.io": 1,
                "zebkit.io.JRPC": 1,
                "zebkit.io.XRPC": 1,
                "zebkit.layout": 1,
                "zebkit.ui": 1,
                "zebkit.ui.Font": 1,
                "zebkit.ui.Checkbox": 1,
                "zebkit.ui.Tabs": 1,
                "zebkit.ui.TextField": 1,
                "zebkit.ui.List": 1,
                "zebkit.ui.Combo": 1,
                "zebkit.ui.grid.CompGridCaption": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ui.date": {
            "name": "ui.date",
            "shortname": "ui.date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/ui.calendar.js",
            "line": 4,
            "description": "The package contains number of classes to implement\nUI date related component like calendar, date field etc.",
            "access": "package"
        },
        "zebkit.ui.date.DaysGrid": {
            "name": "zebkit.ui.date.DaysGrid",
            "shortname": "zebkit.ui.date.DaysGrid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/ui.calendar.js",
            "line": 112,
            "description": "Shows the given month and year days.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.grid.Grid}"
        },
        "ui.vk": {
            "name": "ui.vk",
            "shortname": "ui.vk",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/ui.vk.js",
            "line": 23,
            "description": "Virtual keyboard implementation",
            "access": "package"
        },
        "zebkit.web": {
            "name": "zebkit.web",
            "shortname": "zebkit.web",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 32551,
            "description": "Web specific stuff to provide abstracted method to work in WEB context.",
            "access": "package"
        },
        "zebkit.URI": {
            "name": "zebkit.URI",
            "shortname": "zebkit.URI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 421,
            "description": "URI class",
            "params": [
                {
                    "name": "uri",
                    "description": "an URI.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "zebkit.DoIt": {
            "name": "zebkit.DoIt",
            "shortname": "zebkit.DoIt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 659,
            "description": "Sequential tasks runner. Allows developers to execute number of steps (async and sync) in the\nexact order they have been called by runner. The ideas of the runner implementation is making the\ncode more readable and plain nevertheless it includes asynchronous parts:",
            "example": [
                "\n\n           var r = new zebkit.DoIt();\n\n           // step 1\n           r.then(function() {\n               // call three asynchronous HTTP GET requests to read three files\n               // pass join to every async. method to be notified when the async.\n               // part is completed\n               asyncHttpCall(\"http://test.com/a.txt\", this.join());\n               asyncHttpCall(\"http://test.com/b.txt\", this.join());\n               asyncHttpCall(\"http://test.com/c.txt\", this.join());\n           })\n           .  // step 2\n           then(function(r1, r2, r3) {\n               // handle completely read on previous step files\n               r1.responseText  // \"a.txt\" file content\n               r2.responseText  // \"b.txt\" file content\n               r3.responseText  // \"c.txt\" file content\n           })\n           . // handle error\n           catch(function(e) {\n               // called when an exception has occurred\n               ...\n           });"
            ],
            "is_constructor": 1
        },
        "zebkit": {
            "name": "zebkit",
            "shortname": "zebkit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 1083,
            "description": "This is the core package that provides powerful easy OOP concept, packaging and number of utility methods.\nThe package has no any dependency from others zebkit packages and can be used independently. Briefly the\npackage possibilities are listed below:\n\n      - **easy OOP concept**. Use \"zebkit.Class\" and \"zebkit.Interface\" to declare classes and interfaces\n\n       ```JavaScript\n           // declare class A\n           var ClassA = zebkit.Class([\n               function() {\n                   ... // class constructor\n               },\n\n               // class method\n               function a(p1, p2, p3) { ... }\n           ]);\n\n           var ClassB = zebkit.Class(ClassA, [\n               function() {  // override constructor\n                   this.$super(); // call super constructor\n               },\n\n               function a(p1, p2, p3) { // override method \"a\"\n                   this.$super(p1, p2, p3);  // call super implementation of method \"a\"\n               }\n           ]);\n\n           var b = new ClassB(); // instantiate classB\n           b.a(1,2,3); // call \"a\"\n\n           // instantiate anonymous class with new method \"b\" declared and\n           // overridden method \"a\"\n           var bb = new ClassB([\n               function a(p1, p2, p3) { // override method \"a\"\n                   this.$super(p1, p2, p3);  // call super implementation of method \"a\"\n               },\n\n               function b() { ... } // declare method \"b\"\n           ]);\n\n           b.a();\n           b.b();\n       ```\n\n      - **Packaging**. Zebkit uses Java-like packaging system where your code is bundled in the number of hierarchical packages.\n\n       ```JavaScript\n           // declare package \"zebkit.test\"\n           zebkit.package(\"test\", function(pkg) {\n               // declare class \"Test\" in the package\n               pkg.Test = zebkit.Class([ ... ]);\n           });\n\n           ...\n           // Later on use class \"Test\" from package \"zebkit.test\"\n           zebkit.require(\"test\", function(test) {\n               var test = new test.Test();\n           });\n       ```\n\n      - **Declaring number of core method and classes**",
            "extends": "Package",
            "access": "package"
        },
        "Package": {
            "name": "Package",
            "shortname": "Package",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 1216,
            "description": "Package private class. All zebkit packages are inherits the class methods",
            "access": "private",
            "tagname": ""
        },
        "zebkit.Class": {
            "name": "zebkit.Class",
            "shortname": "zebkit.Class",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 2197,
            "description": "Core method method to declare a zebkit class following easy OOP approach. The easy OOP concept\nsupports the following OOP features:\n\n\n __Single class inheritance.__ Any class can extend an another zebkit class\n\n           // declare class \"A\" that with one method \"a\"\n           var A = zebkit.Class([\n               function a() { ... }\n           ]);\n\n           // declare class \"B\" that inherits class \"A\"\n           var B = zebkit.Class(A, []);\n\n           // instantiate class \"B\" and call method \"a\"\n           var b = new B();\n           b.a();\n\n\n__Class method overriding.__ Override a parent class method implementation\n\n               // declare class \"A\" that with one method \"a\"\n               var A = zebkit.Class([\n                   function a() { ... }\n               ]);\n\n               // declare class \"B\" that inherits class \"A\"\n               // and overrides method a with an own implementation\n               var B = zebkit.Class(A, [\n                   function a() { ... }\n               ]);\n\n\n__Constructors.__ Constructor is a method with empty name\n\n               // declare class \"A\" that with one constructor\n               var A = zebkit.Class([\n                   function () { this.variable = 100; }\n               ]);\n\n               // instantiate \"A\"\n               var a = new A();\n               a.variable // variable is 100\n\n__Static methods and variables declaration.__ Static fields and methods can be defined\n           by declaring special \"$clazz\" method whose context is set to declared class\n\n               var A = zebkit.Class([\n                   // special method where static stuff has to be declared\n                   function $clazz() {\n                       // declare static field\n                       this.staticVar = 100;\n                       // declare static method\n                       this.staticMethod = function() {};\n                   }\n               ]);\n\n               // access static field an method\n               A.staticVar      // 100\n               A.staticMethod() // call static method\n\n__Access to super class context.__ You can call method declared in a parent class\n\n               // declare \"A\" class with one class method \"a(p1,p2)\"\n               var A = zebkit.Class([\n                   function a(p1, p2) { ... }\n               ]);\n\n               // declare \"B\" class that inherits \"A\" class and overrides \"a(p1,p2)\" method\n               var B = zebkit.Class(A, [\n                   function a(p1, p2) {\n                       // call \"a(p1,p2)\" method implemented with \"A\" class\n                       this.$super(p1,p2);\n                   }\n               ]);\n\n\n One of the powerful feature of zebkit easy OOP concept is possibility to instantiate\n anonymous classes and interfaces. Anonymous class is an instance of an existing\n class that can override the original class methods with own implementations, implements\n own list of interfaces and methods. In other words the class instance customizes class\n definition for the particular instance of the class;\n\n                   // declare \"A\" class\n                   var A = zebkit.Class([\n                       function a() { return 1; }\n                   ]);\n\n                   // instantiate anonymous class that add an own implementation of \"a\" method\n                   var a = new A([\n                       function a() { return 2; }\n                   ]);\n                   a.a() // return 2",
            "params": [
                {
                    "name": "inheritedClass",
                    "description": "an optional parent class to be inherited",
                    "type": "zebkit.Class",
                    "optional": true
                },
                {
                    "name": "inheritedInterfaces",
                    "description": "an optional list of interfaces for\nthe declared class to be mixed in the class",
                    "type": "zebkit.Interface",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "methods",
                    "description": "list of declared class methods. Can be empty array.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a class definition",
                "type": "Function"
            },
            "is_constructor": 1
        },
        "zebkit.Interface": {
            "name": "zebkit.Interface",
            "shortname": "zebkit.Interface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 2055,
            "description": "Interface is way to share common functionality by avoiding multiple inheritance.\nIt allows developers to mix number of methods to different classes. For instance:\n\n               // declare \"I\" interface that contains one method a\n               var I = zebkit.Interface([\n                   function a() {\n\n                   }\n               ]);\n\n               // declare \"A\" class\n               var A = zebkit.Class([]);\n\n               // declare \"B\" class that inherits class A and mix interface \"I\"\n               var B = zebkit.Class(A, I, []);\n\n               // instantiate \"B\" class\n               var b = new B();\n               zebkit.instanceOf(b, I);  // true\n               zebkit.instanceOf(b, A);  // true\n               zebkit.instanceOf(b, B);  // true\n\n               // call mixed method\n               b.a();",
            "return": {
                "description": "an interface",
                "type": "Function"
            },
            "params": [
                {
                    "name": "methods",
                    "description": "list of methods declared in the interface",
                    "type": "Array",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebkit.Dummy": {
            "name": "zebkit.Dummy",
            "shortname": "zebkit.Dummy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 2982,
            "description": "Dummy class that implements nothing but can be useful to instantiate\nanonymous classes with some on \"the fly\" functionality:\n\n           // instantiate and use zebkit class with method \"a()\" implemented\n           var ac = new zebkit.Dummy([\n                function a() {\n                   ...\n                }\n           ]);\n\n           // use it\n           ac.a();",
            "is_constructor": 1
        },
        "zebkit.util": {
            "name": "zebkit.util",
            "shortname": "zebkit.util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 3168,
            "description": "Number of different utilities methods and classes. The package has alternative to JS promise approach\nthat helps to make your code more linear looking nevertheless it can contain asynchronous calling.\nOne more useful class is zebkit JSON bag that allows developer to describe number of objects\nand its properties value in JSON format.",
            "access": "package"
        },
        "zebkit.util.Event": {
            "name": "zebkit.util.Event",
            "shortname": "zebkit.util.Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 3283,
            "description": "Abstract event class.",
            "is_constructor": 1
        },
        "zebkit.util.rgb": {
            "name": "zebkit.util.rgb",
            "shortname": "zebkit.util.rgb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 3519,
            "description": "RGB color class. This class represents a rgb color as JavaScript structure:\n\n          // rgb color\n          var rgb1 = new zebkit.util.rgb(100,200,100);\n\n          // rgb with transparency\n          var rgb2 = new zebkit.util.rgb(100,200,100, 0.6);\n\n          // encoded as a string rgb color\n          var rgb3 = new zebkit.util.rgb(\"rgb(100,100,200)\");\n\n          // hex rgb color\n          var rgb3 = new zebkit.util.rgb(\"#CCDDFF\");",
            "params": [
                {
                    "name": "r",
                    "description": "the meaning of the argument depends on number of arguments the\nconstructor gets:\n\n  - If constructor gets only this argument the argument is considered as encoded rgb color:\n     - **String**  means its hex encoded (\"#CCFFDD\") or rgb (\"rgb(100,10,122)\", \"rgba(100,33,33,0.6)\") encoded color\n     - **Integer** means this is number encoded rgb color\n  - Otherwise the argument is an integer value that depicts a red intensity of rgb color\n\nencoded in string rgb color",
                    "type": "Integer|String"
                },
                {
                    "name": "g",
                    "description": "green color intensity",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "b",
                    "description": "blue color intensity",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "alpha color intensity",
                    "type": "Float",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebkit.util.Listeners": {
            "name": "zebkit.util.Listeners",
            "shortname": "zebkit.util.Listeners",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 4042,
            "description": "Listeners container class that can be handy to store number of listeners\nfor one type of event.",
            "params": [
                {
                    "name": "eventName",
                    "description": "an event name the listeners container has been\ncreated. By default \"fired\" is default event name. Event name is used to fire\nthe given event to a listener container.",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n\n     // create container with a default event name\n     var  container = new Listeners();\n\n     // register a listener\n     var  listener = container.add(function(param1, param2) {\n         // handle fired event\n     });\n\n     ...\n     // fire event\n     container.fired(1, 2, 3);\n\n     // remove listener\n     container.remove(listener);"
            ],
            "extends": "{zebkit.util.Listener}"
        },
        "zebkit.util.Position": {
            "name": "zebkit.util.Position",
            "shortname": "zebkit.util.Position",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 4092,
            "description": "Useful class to track a virtual cursor position in a structure that has dedicated number of lines\nwhere every line has a number of elements. The structure metric has to be described by providing\nan instance of zebkit.util.Position.Metric interface that discovers how many lines the structure\nhas and how many elements every line includes.",
            "params": [
                {
                    "name": "m",
                    "description": "a position metric",
                    "type": "zebkit.util.Position.Metric"
                }
            ],
            "is_constructor": 1
        },
        "zebkit.util.Position.Metric": {
            "name": "zebkit.util.Position.Metric",
            "shortname": "zebkit.util.Position.Metric",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 4155,
            "description": "Position metric interface. This interface is designed for describing\na navigational structure that consists on number of lines where\nevery line consists of number of elements"
        },
        "zebkit.util.SingleColPosition": {
            "name": "zebkit.util.SingleColPosition",
            "shortname": "zebkit.util.SingleColPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 4479,
            "description": "Single column position implementation. More simple and more fast implementation of\nposition class for the cases when only one column is possible.",
            "params": [
                {
                    "name": "m",
                    "description": "a position metric",
                    "type": "zebkit.util.Position.Metric"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.util.Position}"
        },
        "zebkit.util.TasksSet": {
            "name": "zebkit.util.TasksSet",
            "shortname": "zebkit.util.TasksSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 4542,
            "description": "Task set is light-weight class to host number of callbacks methods that are called within a context of one JS interval\nmethod execution. The class manages special tasks queue to run it one by one as soon as a dedicated interval for the\ngiven task is elapsed\n\n           var tasks = zebkit.util.TaskSet();\n\n           tasks.run(function(t) {\n               // task1 body\n               ...\n               if (condition) {\n                   t.shutdown();\n               }\n           }, 1000, 200);\n\n           tasks.run(function(t) {\n               // task2 body\n               ...\n               if (condition) {\n                   t.shutdown();\n               }\n           }, 2000, 300);",
            "is_constructor": 1,
            "params": [
                {
                    "name": "maxTasks",
                    "description": "maximal possible number of active tasks in queue.",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        "zebkit.util.TasksSet.Task": {
            "name": "zebkit.util.TasksSet.Task",
            "shortname": "zebkit.util.TasksSet.Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 4580,
            "description": "Task class",
            "params": [
                {
                    "name": "tasksSet",
                    "description": "a reference to tasks set that manages the task",
                    "type": "zebkit.util.TasksSet"
                }
            ],
            "is_constructor": 1
        },
        "zebkit.util.Zson": {
            "name": "zebkit.util.Zson",
            "shortname": "zebkit.util.Zson",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 4864,
            "description": "JSON object loader class is a handy way to load hierarchy of objects encoded with\nJSON format. The class supports standard JSON types plus it extends JSON with a number of\nfeatures that helps to make object creation more flexible. Zson allows developers\nto describe creation of any type of object. For instance if you have a class \"ABC\" with\nproperties \"prop1\", \"prop2\", \"prop3\" you can use instance of the class as a value of\na JSON property as follow:\n\n     { \"instanceOfABC\": {\n             \"@ABC\"  : [],\n             \"prop1\" : \"property 1 value\",\n             \"prop2\" : true,\n             \"prop3\" : 200\n         }\n     }\n\n And than:\n\n      // load JSON mentioned above\n      zebkit.util.Zson.then(\"abc.json\", function(bag) {\n          bag.get(\"instanceOfABC\");\n      });\n\n Features the JSON bag supports are listed below:\n\n   - **Access to hierarchical properties** You can use dot notation to get a property value. For\n   instance:\n\n    { \"a\" : {\n           \"b\" : {\n               \"c\" : 100\n           }\n        }\n    }\n\n    zebkit.util.Zson.then(\"abc.json\", function(bag) {\n        bag.get(\"a.b.c\"); // 100\n    });\n\n\n   - **Property reference** Every string JSON value that starts from \"@\" considers as reference to\n   another property value in the given JSON.\n\n    {  \"a\" : 100,\n       \"b\" : {\n           \"c\" : \"%{a.b}\"\n       }\n    }\n\n   here property \"b.c\" equals to 100 since it refers to  property \"a.b\"\n\n   - **Inheritance** By using special property name \"inherit\" it is possible to embed set of properties\n   from a JSON object:\n\n    {\n       // base component\n       \"BaseComponent\": {\n           \"background\": \"red\",\n           \"border\": \"plain\",\n           \"size\": [300, 300]\n       },\n\n       // component that inherits properties from BaseComponent,\n       // but override background property with own value\n       \"ExtenderComp\": {\n           \"inherit\": \"@{BaseComponent}\",\n           \"background\": \"green\"\n       }\n    }\n\n   - **Class instantiation**  Property can be easily initialized with an instantiation of required class. JSON\n   bag considers all properties whose name starts from \"@\" character as a class name that has to be instantiated:\n\n    {  \"date\": {\n          { \"@Date\" : [] }\n        }\n    }\n\n  Here property \"date\" is set to instance of JS Date class.\n\n  - **Factory classes** JSON bag follows special pattern to describe special type of property whose value\n  is re-instantiated every time the property is requested. Definition of the property value is the same\n  to class instantiation, but the name of class has to prefixed with \"*\" character:\n\n\n    {  \"date\" : {\n          \"@ *Date\" : []\n       }\n    }\n\n\n  Here, every time you call get(\"date\") method a new instance of JS date object will be returned. So\n  every time will have current time.\n\n  - **JS Object initialization** If you have an object in your code you can easily fulfill properties of the\n  object with JSON bag. For instance you can create zebkit UI panel and adjust its background, border and so on\n  with what is stored in JSON:\n\n\n   {\n     \"background\": \"red\",\n     \"layout\"    : { \"@zebkit.layout.BorderLayout\": [] },\n     \"border\"    : { \"@zebkit.ui.RoundBorder\": [ \"black\", 2 ] }\n   }\n\n   var pan = new zebkit.ui.Panel();\n   new zebkit.util.Zson(pan).then(\"pan.json\", function(bag) {\n       // loaded and fullil panel\n       ...\n   });\n\n\n  - **Expression** You can evaluate expression as a property value:\n\n\n     {\n         \"a\": { \".expr\":  \"100*10\" }\n     }\n\n\n  Here property \"a\" equals 1000",
            "is_constructor": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "a root object to be loaded with\nthe given JSON configuration",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "zebkit.io": {
            "name": "zebkit.io",
            "shortname": "zebkit.io",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 5681,
            "description": "The module provides number of classes to help to communicate with remote services and servers by HTTP,\nJSON-RPC, XML-RPC protocols",
            "access": "package"
        },
        "zebkit.io.HTTP": {
            "name": "zebkit.io.HTTP",
            "shortname": "zebkit.io.HTTP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 5813,
            "description": "HTTP request class. This class provides API to generate different\n(GET, POST, etc) HTTP requests",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "an URL to a HTTP resource",
                    "type": "String"
                }
            ]
        },
        "zebkit.io.Service": {
            "name": "zebkit.io.Service",
            "shortname": "zebkit.io.Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6006,
            "description": "A remote service connector class. It is supposed the class has to be extended with\ndifferent protocols like RPC, JSON etc. The typical pattern of connecting to\na remote service is shown below:\n\n           // create service connector that has two methods \"a()\" and \"b(param1)\"\n           var service = new zebkit.io.Service(\"http://myservice.com\", [\n               \"a\", \"b\"\n           ]);\n\n           // call the methods of the remote service\n           service.a();\n           service.b(10);\n\nAlso the methods of a remote service can be called asynchronously. In this case\na callback method has to be passed as the last argument of called remote methods:\n\n           // create service connector that has two methods \"a()\" and \"b(param1)\"\n           var service = new zebkit.io.Service(\"http://myservice.com\", [\n               \"a\", \"b\"\n           ]);\n\n           // call \"b\" method from the remote service asynchronously\n           service.b(10, function(res) {\n               // handle a result of the remote method execution here\n               ...\n           });\n\nIdeally any specific remote service extension of \"zebkit.io.Service\"\nclass has to implement two methods:\n\n       - **encode** to say how the given remote method with passed parameters have\n       to be transformed into a concrete service side protocol (JSON, XML, etc)\n       - **decode** to say how the specific service response has to be converted into\n       JavaScript object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "an URL of remote service",
                    "type": "String"
                },
                {
                    "name": "methods",
                    "description": "a list of methods names the remote service provides",
                    "type": "Array"
                }
            ]
        },
        "zebkit.io.JRPC": {
            "name": "zebkit.io.JRPC",
            "shortname": "zebkit.io.JRPC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6145,
            "description": "The class is implementation of JSON-RPC remote service connector.\n\n           // create JSON-RPC connector to a remote service that\n           // has three remote methods\n           var service = new zebkit.io.JRPC(\"json-rpc.com\", [\n               \"method1\", \"method2\", \"method3\"\n           ]);\n\n           // synchronously call remote method \"method1\"\n           service.method1();\n\n           // asynchronously call remote method \"method1\"\n           service.method1(function(res) {\n               ...\n           });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "an URL of remote service",
                    "type": "String"
                },
                {
                    "name": "methods",
                    "description": "a list of methods names the remote service provides",
                    "type": "Array"
                }
            ],
            "extends": "{zebkit.io.Service}"
        },
        "zebkit.io.XRPC": {
            "name": "zebkit.io.XRPC",
            "shortname": "zebkit.io.XRPC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6215,
            "description": "The class is implementation of XML-RPC remote service connector.\n\n           // create XML-RPC connector to a remote service that\n           // has three remote methods\n           var service = new zebkit.io.XRPC(\"xmlrpc.com\", [\n               \"method1\", \"method2\", \"method3\"\n           ]);\n\n           // synchronously call remote method \"method1\"\n           service.method1();\n\n           // asynchronously call remote method \"method1\"\n           service.method1(function(res) {\n               ...\n           });",
            "is_constructor": 1,
            "extends": "{zebkit.io.Service}",
            "params": [
                {
                    "name": "url",
                    "description": "an URL of remote service",
                    "type": "String"
                },
                {
                    "name": "methods",
                    "description": "a list of methods names the remote service provides",
                    "type": "Array"
                }
            ]
        },
        "zebkit.data": {
            "name": "zebkit.data",
            "shortname": "zebkit.data",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6376,
            "description": "Collection of various data models. The models are widely used by zebkit UI\ncomponents as part of model-view-controller approach, but the package doesn't depend on\nzebkit UI and can be used independently.",
            "access": "package"
        },
        "zebkit.data.TextModel": {
            "name": "zebkit.data.TextModel",
            "shortname": "zebkit.data.TextModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6397,
            "description": "Abstract text model class"
        },
        "zebkit.data.Text": {
            "name": "zebkit.data.Text",
            "shortname": "zebkit.data.Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6477,
            "description": "Multi-lines text model implementation",
            "params": [
                {
                    "name": "s",
                    "description": "the specified text the model has to be filled",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.data.TextModel"
        },
        "zebkit.data.SingleLineTxt": {
            "name": "zebkit.data.SingleLineTxt",
            "shortname": "zebkit.data.SingleLineTxt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6725,
            "description": "Single line text model implementation",
            "params": [
                {
                    "name": "s",
                    "description": "the specified text the model has to be filled",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "max",
                    "description": "the specified maximal text length",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.data.TextModel"
        },
        "zebkit.data.ListModel": {
            "name": "zebkit.data.ListModel",
            "shortname": "zebkit.data.ListModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 6872,
            "description": "List model class",
            "params": [
                {
                    "name": "a",
                    "description": "an array the list model has to be initialized with",
                    "type": "Array",
                    "optional": true
                }
            ],
            "example": [
                "\n\n         // create list model that contains three integer elements\n         var l = new zebkit.data.ListModel([1,2,3]);\n         l.on(\"elementInserted\", function(list, element, index) {\n             // handle list item inserted event\n             ...\n         })\n         ...\n         l.add(10)"
            ],
            "is_constructor": 1
        },
        "zebkit.data.Item": {
            "name": "zebkit.data.Item",
            "shortname": "zebkit.data.Item",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 7057,
            "description": "Tree model item class. The structure is used by tree model to store\ntree items values, parent and children item references.",
            "params": [
                {
                    "name": "v",
                    "description": "the item value",
                    "type": "Object",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebkit.data.TreeModel": {
            "name": "zebkit.data.TreeModel",
            "shortname": "zebkit.data.TreeModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 7102,
            "description": "Tree model class. The class is simple and handy way to keep hierarchical structure.",
            "params": [
                {
                    "name": "r",
                    "description": "a root item. As the argument you can pass \"zebkit.data.Item\" or\na JavaScript object. In the second case you can describe the tree as it is shown in example below:",
                    "type": "zebkit.data.Item|Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\n        // create tree model initialized with tree structure passed as\n        // special formated JavaScript object. The tree will look as follow:\n        //  \"Root\"\n        //    |\n        //    +--- \"Root kid 1\"\n        //    +--- \"Root kid 2\"\n        //            |\n        //            +--- \"Kid of kid 2\"\n        var tree = new zebkit.data.TreeModel({\n           value:\"Root\",\n           kids: [\n               \"Root kid 1\",\n               {\n                   value: \"Root kid 2\",\n                   kids:  [ \"Kid of kid 2\"]\n               }\n           ]\n        });\n        ...\n        // reg item modified events handler\n        tree.on(\"itemModified\", function(tree, item, prevValue) {\n            // catch item value modification\n            ...\n        });\n\n        // item value has to be updated via tree model API\n        tree.setValue(tree.root.kids[0], \"new value\");"
            ],
            "is_constructor": 1
        },
        "zebkit.data.Matrix": {
            "name": "zebkit.data.Matrix",
            "shortname": "zebkit.data.Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 7459,
            "description": "Matrix model class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "the given data as two dimensional array",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "rows",
                    "description": "a number of rows",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "cols",
                    "description": "a number of columns",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n\n    // create matrix with 10 rows and 5 columns\n    var matrix = zebkit.data.Matrix(10, 5);\n\n    matrix.get(0,0);\n    matrix.put(0,0, \"Cell [0,0]\");",
                "\n\n    // create matrix with 3 rows and 5 columns\n    var matrix = zebkit.data.Matrix([\n        [ 0, 1, 2, 3, 4 ],  // row 0\n        [ 0, 1, 2, 3, 4 ],  // row 1\n        [ 0, 1, 2, 3, 4 ],  // row 2\n        [ 0, 1, 2, 3, 4 ],  // row 3\n        [ 0, 1, 2, 3, 4 ]   // row 4\n    ]);",
                "\n\n    // create matrix with 0 rows and 0 columns\n    var matrix = zebkit.data.Matrix();\n\n    // setting value for cell (2, 4) will change\n    // matrix size to 2 rows and 3 columns\n    matrix.put(2, 4, \"Cell [row = 2, col = 4]\");"
            ]
        },
        "zebkit.layout": {
            "name": "zebkit.layout",
            "shortname": "zebkit.layout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 7856,
            "description": "Layout package provides number of classes, interfaces, methods and variables that allows\ndevelopers easily implement rules based layouting of hierarchy of rectangular elements.\nThe package has no relation to any concrete UI, but it can be applied to a required UI\nframework very easily. In general layout manager requires an UI component to provide:\n   - **setLocation(x,y)** method\n   - **setSize(w,h)** method\n   - **setBounds()** method\n   - **getPreferredSize(x,y)** method\n   - **getTop(), getBottom(), getRight(), getLeft()** methods\n   - **constraints** read only property\n   - **width, height, x, y** read only metrics properties\n   - **kids** read only property that keep all children components",
            "access": "package"
        },
        "zebkit.layout.Layout": {
            "name": "zebkit.layout.Layout",
            "shortname": "zebkit.layout.Layout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 7888,
            "description": "Layout manager interface is simple interface that all layout managers have to\nimplement. One method has to calculate preferred size of the given component and\nanother one method has to perform layouting of children components of the given\ntarget component.",
            "interface": "zebkit.layout.Layout"
        },
        "zebkit.layout.Layoutable": {
            "name": "zebkit.layout.Layoutable",
            "shortname": "zebkit.layout.Layoutable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 8046,
            "description": "Layoutable class defines rectangular component that has elementary metrical properties like width,\nheight and location and can be a participant of layout management process. Layoutable component is\ncontainer that can contains other layoutable component as its children. The children components are\nordered by applying a layout manager of its parent component.",
            "is_constructor": 1,
            "extends": "{zebkit.layout.Layout}"
        },
        "zebkit.layout.StackLayout": {
            "name": "zebkit.layout.StackLayout",
            "shortname": "zebkit.layout.StackLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 8693,
            "description": "Layout manager implementation that places layoutbale components on top of each other stretching\nits to fill all available parent component space. Components that want to have be sized according\nto its preferred sizes have to have its constraints set to \"usePsSize\".",
            "example": [
                "\n\n    var pan = new zebkit.ui.Panel();\n    pan.setLayout(new zebkit.ui.StackLayout());\n\n    // label component will be stretched over all available pan area\n    pan.add(new zebkit.ui.Label(\"A\"));\n\n    // button component will be sized according to its preferred size\n    // and aligned to have centered vertical and horizontal alignments\n    pan.add(new zebkit.ui.Button(\"Ok\").setConstraints(\"usePsSize\"));"
            ],
            "is_constructor": 1
        },
        "zebkit.layout.BorderLayout": {
            "name": "zebkit.layout.BorderLayout",
            "shortname": "zebkit.layout.BorderLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 8744,
            "description": "Layout manager implementation that logically splits component area into five areas: top, bottom,\nleft, right and center. Top and bottom components are stretched to fill all available space\nhorizontally and are sized to have preferred height horizontally. Left and right components are\nstretched to fill all available space vertically and are sized to have preferred width vertically.\nCenter component is stretched to occupy all available space taking in account top, left, right\nand bottom components.\n\n         // create panel with border layout\n         var p = new zebkit.ui.Panel(new zebkit.layout.BorderLayout());\n\n         // add children UI components with top, center and left constraints\n         p.add(\"top\",    new zebkit.ui.Label(\"Top\"));\n         p.add(\"center\", new zebkit.ui.Label(\"Center\"));\n         p.add(\"left\",   new zebkit.ui.Label(\"Left\"));\n\n Construct the layout with the given vertical and horizontal gaps.",
            "params": [
                {
                    "name": "hgap",
                    "description": "horizontal gap. The gap is a horizontal distance between laid out components",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "vgap",
                    "description": "vertical gap. The gap is a vertical distance between laid out components",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.layout.Layout}"
        },
        "zebkit.layout.RasterLayout": {
            "name": "zebkit.layout.RasterLayout",
            "shortname": "zebkit.layout.RasterLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 8921,
            "description": "Rester layout manager can be used to use absolute position of layoutable components. That means\nall components will be laid out according coordinates and size they have. Raster layout manager\nprovides extra possibilities to control children components placing. It is possible to align\ncomponents by specifying layout constraints, size component to its preferred size and so on.\nConstraints that can be set for components are the following\n   - \"top\"\n   - \"topRight\"\n   - \"topLeft\"\n   - \"bottom\"\n   - \"bottomLeft\"\n   - \"bottomRight\"\n   - \"right\"\n   - \"center\"\n   - \"left\"",
            "example": [
                "\n    // instantiate component to be ordered\n    var topLeftLab = zebkit.ui.Label(\"topLeft\");\n    var leftLab    = zebkit.ui.Label(\"left\");\n    var centerLab  = zebkit.ui.Label(\"center\");\n\n    // instantiate a container with raster layoyt manager set\n    // the manager is adjusted to size added child component to\n    // its preferred sizes\n    var container = new zebkit.ui.Panel(new zebkit.layout.RasterLayout(true));\n\n    // add child components with appropriate constraints\n    container.add(\"topLeft\", topLeftLab);\n    container.add(\"left\", leftLab);\n    container.add(\"center\", centerLab);"
            ],
            "params": [
                {
                    "name": "usePsSize",
                    "description": "flag to add extra rule to set components size to its preferred\nsizes.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.layout.Layout}"
        },
        "zebkit.layout.FlowLayout": {
            "name": "zebkit.layout.FlowLayout",
            "shortname": "zebkit.layout.FlowLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 9040,
            "description": "Flow layout manager group and places components ordered with different vertical and horizontal\nalignments\n\n           // create panel and set flow layout for it\n           // components added to the panel will be placed\n           // horizontally aligned at the center of the panel\n           var p = new zebkit.ui.Panel();\n           p.setLayout(new zebkit.layout.FlowLayout(\"center\", \"center\"));\n\n           // add three buttons into the panel with flow layout\n           p.add(new zebkit.ui.Button(\"Button 1\"));\n           p.add(new zebkit.ui.Button(\"Button 2\"));\n           p.add(new zebkit.ui.Button(\"Button 3\"));",
            "params": [
                {
                    "name": "ax",
                    "description": "(\"left\" by default) horizontal alignment:\n\n        \"left\"\n        \"center\"\n        \"right\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "ay",
                    "description": "(\"top\" by default) vertical alignment:\n\n        \"top\"\n        \"center\"\n        \"bottom\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "dir",
                    "description": "(\"horizontal\" by default) a direction the component has to be placed\nin the layout\n\n        \"vertical\"\n        \"horizontal\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "gap",
                    "description": "a space in pixels between laid out components",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.layout.Layout}"
        },
        "zebkit.layout.ListLayout": {
            "name": "zebkit.layout.ListLayout",
            "shortname": "zebkit.layout.ListLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 9230,
            "description": "List layout places components vertically one by one\n\n           // create panel and set list layout for it\n           var p = new zebkit.ui.Panel();\n           p.setLayout(new zebkit.layout.ListLayout());\n\n           // add three buttons into the panel with list layout\n           p.add(new zebkit.ui.Button(\"Item 1\"));\n           p.add(new zebkit.ui.Button(\"Item 2\"));\n           p.add(new zebkit.ui.Button(\"Item 3\"));",
            "params": [
                {
                    "name": "ax",
                    "description": "horizontal list item alignment:\n\n        \"left\"\n        \"right\"\n        \"center\"\n        \"stretch\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "gap",
                    "description": "a space in pixels between laid out components",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.layout.Layout}"
        },
        "zebkit.layout.PercentLayout": {
            "name": "zebkit.layout.PercentLayout",
            "shortname": "zebkit.layout.PercentLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 9321,
            "description": "Percent layout places components vertically or horizontally and sizes its according to its\npercentage constraints.\n\n           // create panel and set percent layout for it\n           var p = new zebkit.ui.Panel();\n           p.setLayout(new zebkit.layout.PercentLayout());\n\n           // add three buttons to the panel that are laid out horizontally with\n           // percent layout according to its constraints: 20, 30 and 50 percents\n           p.add(20, new zebkit.ui.Button(\"20%\"));\n           p.add(30, new zebkit.ui.Button(\"30%\"));\n           p.add(50, new zebkit.ui.Button(\"50%\"));",
            "params": [
                {
                    "name": "dir",
                    "description": "a direction of placing components. The\nvalue can be \"horizontal\" or \"vertical\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "gap",
                    "description": "a space in pixels between laid out components",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "stretch",
                    "description": "true if the component should be stretched\nvertically or horizontally",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.layout.Layout}"
        },
        "zebkit.layout.Constraints": {
            "name": "zebkit.layout.Constraints",
            "shortname": "zebkit.layout.Constraints",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 9456,
            "description": "Grid layout manager constraints. Constraints says how a  component has to be placed in\ngrid layout virtual cell. The constraints specifies vertical and horizontal alignments,\na virtual cell paddings, etc.",
            "params": [
                {
                    "name": "ax",
                    "description": "a horizontal alignment",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "ay",
                    "description": "a vertical alignment",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "p",
                    "description": "a cell padding",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebkit.layout.GridLayout": {
            "name": "zebkit.layout.GridLayout",
            "shortname": "zebkit.layout.GridLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 9555,
            "description": "Grid layout manager. can be used to split a component area to number of virtual cells where\nchildren components can be placed. The way how the children components have to be laid out\nin the cells can be customized by using \"zebkit.layout.Constraints\" class:\n\n           // create constraints\n           var ctr = new zebkit.layout.Constraints();\n\n           // specify cell top, left, right, bottom paddings\n           ctr.setPadding(8);\n           // say the component has to be left aligned in a\n           // virtual cell of grid layout\n           ctr.ax = \"left\";\n\n           // create panel and set grid layout manager with two\n           // virtual rows and columns\n           var p = new zebkit.ui.Panel();\n           p.setLayout(new zebkit.layout.GridLayout(2, 2));\n\n           // add children component\n           p.add(ctr, new zebkit.ui.Label(\"Cell 1, 1\"));\n           p.add(ctr, new zebkit.ui.Label(\"Cell 1, 2\"));\n           p.add(ctr, new zebkit.ui.Label(\"Cell 2, 1\"));\n           p.add(ctr, new zebkit.ui.Label(\"Cell 2, 2\"));",
            "params": [
                {
                    "name": "rows",
                    "description": "a number of virtual rows to layout children components",
                    "type": "Integer"
                },
                {
                    "name": "cols",
                    "description": "a number of virtual columns to layout children components",
                    "type": "Integer"
                },
                {
                    "name": "stretchRows",
                    "description": "true if virtual cell height has to be stretched to occupy the\nwhole vertical container component space",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "stretchCols",
                    "description": "true if virtual cell width has to be stretched to occupy the\nwhole horizontal container component space",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.layout.Layout}"
        },
        "zebkit.ui.Manager": {
            "name": "zebkit.ui.Manager",
            "shortname": "zebkit.ui.Manager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 9804,
            "description": "UI manager class. The class is widely used as base for building various UI managers\nlike focus, event managers etc. Manager is automatically registered as global events listener\nfor events it implements handlers",
            "is_constructor": 1
        },
        "zebkit.ui.CompEvent": {
            "name": "zebkit.ui.CompEvent",
            "shortname": "zebkit.ui.CompEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 9819,
            "description": "Component event class. Component event is fired when:\n\n  - the component is re-located (\"compMoved\" event)\n  - the component is re-sized (\"compResized\" event)\n  - the component visibility is updated (\"compShown\" event)\n  - the component is enabled (\"compEnabled\" event)\n  - a component has been inserted into the given component (\"compAdded\" event)\n  - a component has been removed from the given component (\"compRemoved\" event)\n\nAppropriate event type is set in the event id property.",
            "is_constructor": 1,
            "extends": "zebkit.util.Event"
        },
        "zebkit.ui.KeyEvent": {
            "name": "zebkit.ui.KeyEvent",
            "shortname": "zebkit.ui.KeyEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 34318,
            "description": "Input key event class.",
            "extends": "zebkit.util.Event",
            "is_constructor": 1
        },
        "zebkit.ui.PointerEvent": {
            "name": "zebkit.ui.PointerEvent",
            "shortname": "zebkit.ui.PointerEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 33233,
            "description": "Mouse and touch screen input event class. The input event is triggered by a mouse or\ntouch screen.",
            "is_constructor": 1
        },
        "zebkit.ui.EventManager": {
            "name": "zebkit.ui.EventManager",
            "shortname": "zebkit.ui.EventManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 10147,
            "description": "Event manager class. One of the key zebkit manager that is responsible for distributing various\nevents in zebkit UI. The manager provides possibility to catch and handle UI events globally. Below\nis list event types that can be caught with the event manager:\n\n  - Key events:\n    - \"keyTyped\"\n    - \"keyReleased\"\n    - \"keyPressed\"\n\n  - Pointer events:\n    - \"pointerDragged\"\n    - \"pointerDragStarted\"\n    - \"pointerDragEnded\"\n    - \"pointerMoved\"\n    - \"pointerClicked\"\n    - \"pointerDoubleClicked\"\n    - \"pointerPressed\"\n    - \"pointerReleased\"\n    - \"pointerEntered\"\n    - \"pointerExited\"\n\n  - Focus event:\n    - \"focusLost\"\n    - \"focusGained\"\n\n  - Component events:\n    - \"compSized\"\n    - \"compMoved\"\n    - \"compEnabled\"\n    - \"compShown\"\n    - \"compAdded\"\n    - \"compRemoved\"\n\n  - Window events:\n    - \"winOpened\"\n    - \"winActivated\"\n\n  - Menu events:\n    - \"menuItemSelected'\n\n  - Shortcut events:\n    - \"shortcutFired\"\n\nCurrent events manager is available with \"zebkit.ui.events\"",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Manager}",
            "example": [
                "\n\n    // catch all pointer pressed events that are triggered by zebkit UI\n    zebkit.ui.events.on(\"pointerPressed\", function(e) {\n        // handle event\n        ...\n    });"
            ]
        },
        "zebkit.ui": {
            "name": "zebkit.ui",
            "shortname": "zebkit.ui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15527,
            "access": "package"
        },
        "zebkit.ui.Font": {
            "name": "zebkit.ui.Font",
            "shortname": "zebkit.ui.Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 10537,
            "description": "This class represents a font and provides basic font metrics like height, ascent. Using\nthe class developers can compute string width.\n\n    // plain font\n    var f = new zebkit.ui.Font(\"Arial\", 14);\n\n    // bold font\n    var f = new zebkit.ui.Font(\"Arial\", \"bold\", 14);\n\n    // defining font with CSS font name\n    var f = new zebkit.ui.Font(\"100px Futura, Helvetica, sans-serif\");",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "a name of the font. If size and style parameters has not been passed\nthe name is considered as CSS font name that includes size and style",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "a style of the font: \"bold\", \"italic\", etc",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "size",
                    "description": "a size of the font",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.Panel": {
            "name": "zebkit.ui.Panel",
            "shortname": "zebkit.ui.Panel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 10825,
            "description": "This the core UI component class. All other UI components has to be successor of panel class.\n\n        // instantiate panel with no arguments\n        var p = new zebkit.ui.Panel();\n\n        // instantiate panel with border layout set as its layout manager\n        var p = new zebkit.ui.Panel(new zebkit.layout.BorderLayout());\n\n        // instantiate panel with the given properties (border\n        // layout manager, blue background and plain border)\n        var p = new zebkit.ui.Panel({\n           layout: new zebkit.ui.BorderLayout(),\n           background : \"blue\",\n           border     : \"plain\"\n        });\n\n**Container**\n Panel can contains number of other UI components as its children where the children components\n are placed with a defined by the panel layout manager:\n\n        // add few children component to panel top, center and bottom parts\n        // with help of border layout manager\n        var p = new zebkit.ui.Panel();\n        p.setLayout(new zebkit.layout.BorderLayout(4)); // set layout manager to\n                                                       // order children components\n\n        p.add(\"top\", new zebkit.ui.Label(\"Top label\"));\n        p.add(\"center\", new zebkit.ui.TextArea(\"Text area\"));\n        p.add(\"bottom\", new zebkit.ui.Button(\"Button\"));\n\n **Events**\n The class provides possibility to catch various component and input events by declaring an\n appropriate event method handler. The most simple case you just define a method:\n\n        var p = new zebkit.ui.Panel();\n        p.pointerPressed = function(e) {\n            // handle event here\n        };\n\n If you prefer to create an anonymous class instance you can do it as follow:\n\n        var p = new zebkit.ui.Panel([\n            function pointerPressed(e) {\n                // handle event here\n            }\n        ]);\n\n One more way to add the event handler is dynamic extending of an instance class demonstrated\n below:\n\n        var p = new zebkit.ui.Panel(\"Test\");\n        p.extend([\n            function pointerPressed(e) {\n                // handle event here\n            }\n        ]);\n\n Pay attention Zebkit UI components often declare own event handlers and in this case you can\n overwrite the default event handler with a new one. Preventing the basic event handler execution\n can cause the component will work improperly. You should care about the base event handler\n execution as follow:\n\n        // button component declares own pointer pressed event handler\n        // we have to call the original handler to keep the button component\n        // properly working\n        var p = new zebkit.ui.Button(\"Test\");\n        p.extend([\n            function pointerPressed(e) {\n                this.$super(e); // call parent class event handler implementation\n                // handle event here\n            }\n        ]);",
            "params": [
                {
                    "name": "l",
                    "description": "pass a layout manager or number of properties that have\nto be applied to the instance of the panel class.",
                    "type": "Object|zebkit.layout.Layout",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.layout.Layoutable"
        },
        "zebkit.ui.View": {
            "name": "zebkit.ui.View",
            "shortname": "zebkit.ui.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12331,
            "description": "View class that is designed as a basis for various reusable decorative UI elements implementations",
            "is_constructor": 1
        },
        "zebkit.ui.Render": {
            "name": "zebkit.ui.Render",
            "shortname": "zebkit.ui.Render",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12397,
            "description": "Render class extends \"zebkit.ui.View\" class with a notion\nof target object. Render stores reference  to a target that\nthe render knows how to visualize. Basically Render is an\nobject visualizer. For instance, developer can implement\ntext, image and so other objects visualizers.",
            "params": [
                {
                    "name": "target",
                    "description": "a target object to be visualized\nwith the render",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.Sunken": {
            "name": "zebkit.ui.Sunken",
            "shortname": "zebkit.ui.Sunken",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12443,
            "description": "Sunken border view",
            "is_constructor": 1,
            "params": [
                {
                    "name": "brightest",
                    "description": "a brightest border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "moddle",
                    "description": "a middle border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "darkest",
                    "description": "a darkest border line color",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.Etched": {
            "name": "zebkit.ui.Etched",
            "shortname": "zebkit.ui.Etched",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12502,
            "description": "Etched border view",
            "is_constructor": 1,
            "params": [
                {
                    "name": "brightest",
                    "description": "a brightest border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "moddle",
                    "description": "a middle border line color",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.Raised": {
            "name": "zebkit.ui.Raised",
            "shortname": "zebkit.ui.Raised",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12552,
            "description": "Raised border view",
            "params": [
                {
                    "name": "brightest",
                    "description": "a brightest border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "middle",
                    "description": "a middle border line color",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.Dotted": {
            "name": "zebkit.ui.Dotted",
            "shortname": "zebkit.ui.Dotted",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12598,
            "description": "Dotted border view",
            "params": [
                {
                    "name": "c",
                    "description": "the dotted border color",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.Border": {
            "name": "zebkit.ui.Border",
            "shortname": "zebkit.ui.Border",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12664,
            "description": "Border view. Can be used to render CSS-like border. Border can be applied to any\nzebkit UI component by calling setBorder method:\n\n           // create label component\n           var lab = new zebkit.ui.Label(\"Test label\");\n\n           // set red border to the label component\n           lab.setBorder(new zebkit.ui.Border(\"red\"));",
            "params": [
                {
                    "name": "c",
                    "description": "border color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "border width",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "r",
                    "description": "border corners radius",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.RoundBorder": {
            "name": "zebkit.ui.RoundBorder",
            "shortname": "zebkit.ui.RoundBorder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12827,
            "description": "Round border view.",
            "params": [
                {
                    "name": "col",
                    "description": "border color. Use null as the\nborder color value to prevent painting of the border",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "border width",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.CompRender": {
            "name": "zebkit.ui.CompRender",
            "shortname": "zebkit.ui.CompRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12904,
            "description": "UI component render class. Renders the given target UI component\non the given surface using the specified 2D context",
            "params": [
                {
                    "name": "target",
                    "description": "an UI component to be rendered",
                    "type": "zebkit.ui.Panel",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.Render"
        },
        "zebkit.ui.Gradient": {
            "name": "zebkit.ui.Gradient",
            "shortname": "zebkit.ui.Gradient",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 12973,
            "description": "Vertical or horizontal linear gradient view",
            "params": [
                {
                    "name": "startColor",
                    "description": "start color",
                    "type": "String"
                },
                {
                    "name": "endColor",
                    "description": "end color",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type of gradient\n \"vertical\" or \"horizontal\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.Radial": {
            "name": "zebkit.ui.Radial",
            "shortname": "zebkit.ui.Radial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13040,
            "description": "Radial gradient view",
            "params": [
                {
                    "name": "startColor",
                    "description": "a start color",
                    "type": "String"
                },
                {
                    "name": "stopColor",
                    "description": "a stop color",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.Picture": {
            "name": "zebkit.ui.Picture",
            "shortname": "zebkit.ui.Picture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13071,
            "description": "Image render. Render an image target object or specified area of\nthe given target image object.",
            "params": [
                {
                    "name": "img",
                    "description": "the image to be rendered",
                    "type": "Image"
                },
                {
                    "name": "x",
                    "description": "a x coordinate of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "a y coordinate of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "a width of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "a height of the rendered image part",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.Render"
        },
        "zebkit.ui.Pattern": {
            "name": "zebkit.ui.Pattern",
            "shortname": "zebkit.ui.Pattern",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13151,
            "description": "Pattern render.",
            "params": [
                {
                    "name": "img",
                    "description": "an image to be used as the pattern",
                    "type": "Image",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.Render"
        },
        "zebkit.ui.CompositeView": {
            "name": "zebkit.ui.CompositeView",
            "shortname": "zebkit.ui.CompositeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13186,
            "description": "Composite view. The view allows developers to combine number of\nviews and renders its together.",
            "params": [
                {
                    "name": "views",
                    "description": "array of dictionary of views\nto be composed together",
                    "type": "Arrayt|Object",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.View"
        },
        "zebkit.ui.ViewSet": {
            "name": "zebkit.ui.ViewSet",
            "shortname": "zebkit.ui.ViewSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13341,
            "description": "ViewSet view. The view set is a special view container that includes\nnumber of views accessible by a key and allows only one view be active\nin a particular time. Active is view that has to be rendered. The view\nset can be used to store number of decorative elements where only one\ncan be rendered depending from an UI component state.",
            "params": [
                {
                    "name": "args",
                    "description": "object that represents views instances that have\nto be included in the ViewSet",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.CompositeView"
        },
        "zebkit.ui.Line": {
            "name": "zebkit.ui.Line",
            "shortname": "zebkit.ui.Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15800,
            "description": "Line UI component class. Draw series of vertical or horizontal lines of using\nthe given line width and color. Vertical or horizontal line rendering s selected\ndepending on the line component size: if height is greater than width than vertical\nline will be rendered.",
            "extends": "{zebkit.ui.View}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "side",
                    "description": "a side of rectangular area where the line has to be rendered. Use\n\"left\", \"top\", \"right\" or \"bottom\" as the parameter value",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "color",
                    "description": "a line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "a line width",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.BaseTextRender": {
            "name": "zebkit.ui.BaseTextRender",
            "shortname": "zebkit.ui.BaseTextRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13593,
            "description": "Base class to build text render implementations.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "target component to be rendered",
                    "type": "Object",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.Render}"
        },
        "zebkit.ui.StringRender": {
            "name": "zebkit.ui.StringRender",
            "shortname": "zebkit.ui.StringRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13709,
            "description": "Lightweight implementation of single line string render. The render requires\na simple string as a target object.",
            "params": [
                {
                    "name": "str",
                    "description": "a string to be rendered",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "a text font",
                    "type": "zebkit.ui.Font",
                    "optional": true
                },
                {
                    "name": "color",
                    "description": "a text color",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.BaseTextRender}"
        },
        "zebkit.ui.TextRender": {
            "name": "zebkit.ui.TextRender",
            "shortname": "zebkit.ui.TextRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 13842,
            "description": "Text render that expects and draws a text model or a string as its target",
            "is_constructor": 1,
            "extends": "zebkit.ui.BaseTextRender",
            "params": [
                {
                    "name": "text",
                    "description": "a text as string or text model object",
                    "type": "String|zebkit.data.TextModel"
                }
            ]
        },
        "zebkit.ui.PasswordText": {
            "name": "zebkit.ui.PasswordText",
            "shortname": "zebkit.ui.PasswordText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 14322,
            "description": "Password text render class. This class renders a secret text with hiding it with the given character.",
            "params": [
                {
                    "name": "text",
                    "description": "a text as string or text model instance",
                    "type": "String|zebkit.data.TextModel",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.TextRender"
        },
        "zebkit.ui.TitledBorder": {
            "name": "zebkit.ui.TitledBorder",
            "shortname": "zebkit.ui.TitledBorder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 14561,
            "description": "Render class that allows developers to render a border with a title area.\nThe title area has to be specified by an UI component that uses the border\nby defining \"getTitleInfo()\"\" method. The method has to return object that\ndescribes title size, location and alignment:\n\n\n     {\n       x: {Integer}, y: {Integer},\n       width: {Integer}, height: {Integer},\n       orient: {Integer}\n     }",
            "extends": "zebkit.ui.Render",
            "is_constructor": 1,
            "params": [
                {
                    "name": "border",
                    "description": "a border to be rendered with a title area",
                    "type": "zebkit.ui.View"
                },
                {
                    "name": "lineAlignment",
                    "description": "a line alignment. Specifies how\na title area has to be aligned relatively border line:\n\n      \"bottom\"  - title area will be placed on top of border line:\n                   ___| Title area |___\n\n\n     \"center\"   - title area will be centered relatively to border line:\n                   ---| Title area |-----\n\n\n     \"top\"      - title area will be placed underneath of border line:\n                    ____              ________\n                        |  Title area |",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.RadioView": {
            "name": "zebkit.ui.RadioView",
            "shortname": "zebkit.ui.RadioView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 14889,
            "description": "The radio button ticker view.",
            "extends": "zebkit.ui.View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "col1",
                    "description": "color one to render the outer cycle",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "col2",
                    "description": "color tow to render the inner cycle",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.ToggleView": {
            "name": "zebkit.ui.ToggleView",
            "shortname": "zebkit.ui.ToggleView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 14929,
            "description": "Toggle view element class",
            "extends": "{zebkit.ui.View}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "plus",
                    "description": "indicates the sign type plus (true) or minus (false)",
                    "type": "Boolean"
                },
                {
                    "name": "color",
                    "description": "a color",
                    "type": "String"
                },
                {
                    "name": "bg",
                    "description": "a background",
                    "type": "String"
                }
            ]
        },
        "zebkit.ui.FocusEvent": {
            "name": "zebkit.ui.FocusEvent",
            "shortname": "zebkit.ui.FocusEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15040,
            "description": "Focus event class.",
            "is_constructor": 1,
            "extends": "zebkit.util.Event"
        },
        "zebkit.ui.FocusManager": {
            "name": "zebkit.ui.FocusManager",
            "shortname": "zebkit.ui.FocusManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15063,
            "description": "Focus manager class defines the strategy of focus traversing among hierarchy of UI components.\nIt keeps current focus owner component and provides API to change current focus component",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Manager}"
        },
        "zebkit.ui.ShortcutEvent": {
            "name": "zebkit.ui.ShortcutEvent",
            "shortname": "zebkit.ui.ShortcutEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15296,
            "description": "Shortcut event class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "src",
                    "description": "a source of the event",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "shortcut",
                    "description": "a shortcut name",
                    "type": "String"
                },
                {
                    "name": "keys",
                    "description": "a keys combination (\"Control + KeyV\")",
                    "type": "String"
                }
            ],
            "extends": "{zebkit.util.Event}"
        },
        "zebkit.ui.ShortcutManager": {
            "name": "zebkit.ui.ShortcutManager",
            "shortname": "zebkit.ui.ShortcutManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15329,
            "description": "Shortcut manager supports short cut (keys) definition and listening. The shortcuts have to be defined in\nzebkit JSON configuration files. There are two sections:\n\n      - **osx** to keep shortcuts for Mac OS X platform\n      - **common** to keep shortcuts for all other platforms\n\nThe JSON configuration entity has simple structure:\n\n\n        {\n          \"common\": {\n              \"UNDO\": \"Control + KeyZ\",\n              \"REDO\": \"Control + Shift + KeyZ\",\n               ...\n          },\n          \"osx\" : {\n              \"UNDO\":  \"MetaLeft + KeyZ\",\n               ...\n          }\n        }\n\nThe configuration contains list of shortcuts. Every shortcut is bound to a key combination that triggers it.\nShortcut has a name and an optional list of arguments that have to be passed to a shortcut listener method.\nThe optional arguments can be used to differentiate two shortcuts that are bound to the same command.\n\nOn the component level shortcut can be listened by implementing \"shortcutFired(e)\" listener handler.\nPay attention to catch shortcut your component has to be focusable - be able to hold focus.\nFor instance, to catch \"UNDO\" shortcut do the following:\n\n          var pan = new zebkit.ui.Panel([\n              function shortcutFired(e) {\n                  // handle shortcut here\n                  if (e.shortcut === \"UNDO\") {\n\n                  }\n              },\n\n              // visualize the component gets focus\n              function focused() {\n                  this.$super();\n                  this.setBackground(this.hasFocus()?\"red\":null);\n              }\n          ]);\n\n          // let our panel to hold focus by setting appropriate property\n          pan.canHaveFocus = true;",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Manager}"
        },
        "zebkit.ui.Cursor": {
            "name": "zebkit.ui.Cursor",
            "shortname": "zebkit.ui.Cursor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15499,
            "description": "Class that holds mouse cursor constant.",
            "is_constructor": 1
        },
        "zebkit.ui.ViewPan": {
            "name": "zebkit.ui.ViewPan",
            "shortname": "zebkit.ui.ViewPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15658,
            "description": "UI component to keep and render the given \"zebkit.ui.View\" class\ninstance. The target view defines the component preferred size\nand the component view.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.ImagePan": {
            "name": "zebkit.ui.ImagePan",
            "shortname": "zebkit.ui.ImagePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15723,
            "description": "Image panel UI component class. The component renders an image.",
            "params": [
                {
                    "name": "<img>",
                    "description": "a path or direct reference to an image object.\nIf the passed parameter is string it considered as path to an image.\nIn this case the image will be loaded using the passed path.",
                    "type": "String|Image"
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.ViewPan"
        },
        "zebkit.ui.Label": {
            "name": "zebkit.ui.Label",
            "shortname": "zebkit.ui.Label",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 15890,
            "description": "Label UI component class. The label can be used to visualize simple string or multi lines text or\nthe given text render implementation:\n\n           // render simple string\n           var l = new zebkit.ui.Label(\"Simple string\");\n\n           // render multi lines text\n           var l = new zebkit.ui.Label(new zebkit.data.Text(\"Multiline\\ntext\"));\n\n           // render password text\n           var l = new zebkit.ui.Label(new zebkit.ui.PasswordText(\"password\"));",
            "params": [
                {
                    "name": "r",
                    "description": "a text to be shown with the label.\nYou can pass a simple string or an instance of a text model or an instance of text render as the\ntext value.",
                    "type": "String|zebkit.data.TextModel|zebkit.ui.TextRender",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.ViewPan"
        },
        "zebkit.ui.BoldLabel": {
            "name": "zebkit.ui.BoldLabel",
            "shortname": "zebkit.ui.BoldLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 16030,
            "description": "Shortcut class to render bold text in Label",
            "params": [
                {
                    "name": "t",
                    "description": "a text string,\ntext model or text render instance",
                    "type": "String|zebkit.ui.TextRender|zebkit.data.TextModel",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.Label"
        },
        "zebkit.ui.ImageLabel": {
            "name": "zebkit.ui.ImageLabel",
            "shortname": "zebkit.ui.ImageLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 16040,
            "description": "Image label UI component. This is UI container that consists from an image\ncomponent and an label component.Image is located at the left size of text.",
            "params": [
                {
                    "name": "img",
                    "description": "an image or path to the image",
                    "type": "Image|String"
                },
                {
                    "name": "txt",
                    "description": "a text string,\ntext model or text render instance",
                    "type": "String|zebkit.ui.TextRender|zebkit.data.TextModel"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.Progress": {
            "name": "zebkit.ui.Progress",
            "shortname": "zebkit.ui.Progress",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 16214,
            "description": "Progress bar UI component class.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.StatePan": {
            "name": "zebkit.ui.StatePan",
            "shortname": "zebkit.ui.StatePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 16450,
            "description": "State panel class. The class is UI component that allows to customize\nthe component  face, background and border depending on the component\nstate. Number and names of states the component can have is defined\nby developers. To bind a view to the specified state use zebkit.ui.ViewSet\nclass. For instance if a component has to support two states : \"state1\" and\n\"state2\" you can do it as following:\n\n           // create state component\n           var p = new zebkit.ui.StatePan();\n\n           // define border view that contains views for \"state1\" and \"state2\"\n           p.setBorder({\n               \"state1\": new zebkit.ui.Border(\"red\", 1),\n               \"state1\": new zebkit.ui.Border(\"blue\", 2)\n\n           });\n\n           // define background view that contains views for \"state1\" and \"state2\"\n           p.setBorder({\n               \"state1\": \"yellow\",\n               \"state1\": \"green\"\n           });\n\n           // set component state\n           p.setState(\"state1\");\n\nState component children components can listening when the state of the component\nhas been updated by implementing \"parentStateUpdated(o,n,id)\" method. It gets old\nstate, new state and a view id that is mapped to the new state.  The feature is\nuseful if we are developing a composite components whose children component also\nshould react to a state changing.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.ViewPan}"
        },
        "zebkit.ui.EvStatePan": {
            "name": "zebkit.ui.EvStatePan",
            "shortname": "zebkit.ui.EvStatePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 16594,
            "description": "Event state panel class. The class implements UI component whose face, border and\nbackground view depends on its input events state. The component is good basis\nfor creation  dynamic view UI components.The state the component can be is:\n\n       - **over** the pointer cursor is inside the component\n       - **out** the pointer cursor is outside the component\n       - **pressed over** the pointer cursor is inside the component and an action pointer\n         button or key is pressed\n       - **pressed out** the pointer cursor is outside the component and an action pointer\n         button or key is pressed\n       - **disabled** the component is disabled\n\nThe view border, background or face should be set as \"zebkit.ui.ViewSet\" where an required\nfor the given component state view is identified by an id. By default corresponding to\ncomponent states views IDs are the following: \"over\", \"pressed.over\", \"out\", \"pressed.out\",\n\"disabled\".  Imagine for example we have two colors and we need to change between the colors\nevery time pointer cursor is over/out of the component:\n\n        // create state panel\n        var statePan = new zebkit.ui.EvStatePan();\n\n        // add dynamically updated background\n        statePan.setBackground(new zebkit.ui.ViewSet({\n           \"over\": \"red\",\n           \"out\": \"blue\"\n        }));\n\nAlone with background border view can be done also dynamic\n\n        // add dynamically updated border\n        statePan.setBorder(new zebkit.ui.ViewSet({\n           \"over\": new zebkit.ui.Border(\"green\", 4, 8),\n           \"out\": null\n        }));\n\nAdditionally the UI component allows developer to specify whether the component can hold\ninput focus and which UI component has to be considered as the focus marker. The focus marker\ncomponent is used as anchor to paint focus marker view. In simple case the view can be just\na border. So border will be rendered around the focus marker component:\n\n        // create state panel that contains one label component\n        var statePan = new zebkit.ui.EvStatePan();\n        var lab      = new zebkit.ui.Label(\"Focus marker label\");\n        lab.setPadding(6);\n        statePan.setPadding(6);\n        statePan.setLayout(new zebkit.layout.BorderLayout());\n        statePan.add(\"center\", lab);\n\n        // set label as an anchor for focus border indicator\n        statePan.setFocusAnchorComponent(lab);\n        statePan.setFocusMarkerView(\"plain\");",
            "is_constructor": 1,
            "extends": "zebkit.ui.StatePan"
        },
        "zebkit.ui.CompositeEvStatePan": {
            "name": "zebkit.ui.CompositeEvStatePan",
            "shortname": "zebkit.ui.CompositeEvStatePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 16823,
            "description": "Composite event state panel",
            "is_constructor": 1,
            "extends": "{zebkit.ui.EvStatePan}"
        },
        "zebkit.ui.ButtonRepeatMix": {
            "name": "zebkit.ui.ButtonRepeatMix",
            "shortname": "zebkit.ui.ButtonRepeatMix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "zebkit.ui.Button"
            ],
            "file": "build/zebkit.js",
            "line": 16945,
            "description": "Special interface that provides set of method for state components to implement repeatable\nstate.",
            "interface": "zebkit.ui.ButtonRepeatMix"
        },
        "zebkit.ui.ArrowButton": {
            "name": "zebkit.ui.ArrowButton",
            "shortname": "zebkit.ui.ArrowButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17050,
            "description": "Arrow button component. The component use arrow views as its icon.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "direction",
                    "description": "an arrow icon direction. Use \"left\", \"right\", \"top\", \"bottom\" as\nthe parameter value.",
                    "type": "String"
                }
            ],
            "extends": "{zebkit.ui.EvStatePan}",
            "uses": [
                "{zebkit.ui.ButtonRepeatMix}"
            ]
        },
        "zebkit.ui.Button": {
            "name": "zebkit.ui.Button",
            "shortname": "zebkit.ui.Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17165,
            "description": "Button UI component. Button is composite component whose look and feel can\nbe easily customized:\n\n          // create image button\n          var button = new zebkit.ui.Button(new zebkit.ui.ImagePan(\"icon1.gif\"));\n\n          // create image + caption button\n          var button = new zebkit.ui.Button(new zebkit.ui.ImageLabel(\"Caption\", \"icon1.gif\"));\n\n          // create multilines caption button\n          var button = new zebkit.ui.Button(\"Line1\\nLine2\");",
            "is_constructor": 1,
            "params": [
                {
                    "name": "t",
                    "description": "a button label.\nThe label can be a simple text or an UI component.",
                    "type": "String|zebkit.ui.Panel|zebkit.ui.View",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.CompositeEvStatePan",
            "uses": [
                "zebkit.ui.ButtonRepeatMix"
            ]
        },
        "zebkit.ui.SwitchManager": {
            "name": "zebkit.ui.SwitchManager",
            "shortname": "zebkit.ui.SwitchManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17246,
            "description": "The standard UI checkbox component switch manager implementation. The manager holds\nboolean state of a checkbox UI component. There are few ways how a checkbox can\nswitch its state: standard checkbox or radio group. In general we have a deal with\none switchable UI component that can work in different modes. Thus we can re-use\none UI, but customize it with appropriate switch manager. That is the main idea of\nhaving the class.",
            "is_constructor": 1
        },
        "zebkit.ui.Group": {
            "name": "zebkit.ui.Group",
            "shortname": "zebkit.ui.Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17344,
            "description": "Radio group switch manager implementation. This is an extension of \"zebkit.ui.SwicthManager\" to\nsupport radio group switching behavior. You can use it event with normal checkbox:\n\n          // create group of check boxes that will work as a radio group\n          var gr  = new zebkit.ui.Group();\n          var ch1 = new zebkit.ui.Checkbox(\"Test 1\", gr);\n          var ch2 = new zebkit.ui.Checkbox(\"Test 2\", gr);\n          var ch3 = new zebkit.ui.Checkbox(\"Test 3\", gr);",
            "is_constructor": 1,
            "extends": "zebkit.ui.SwitchManager"
        },
        "zebkit.ui.Switchable": {
            "name": "zebkit.ui.Switchable",
            "shortname": "zebkit.ui.Switchable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "zebkit.ui.Checkbox",
                "zebkit.ui.CollapsiblePan"
            ],
            "file": "build/zebkit.js",
            "line": 17397,
            "description": "Switchable component interface",
            "interface": "zebkit.ui.Switchable"
        },
        "zebkit.ui.Checkbox": {
            "name": "zebkit.ui.Checkbox",
            "shortname": "zebkit.ui.Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17465,
            "description": "Check-box UI component. The component is a container that consists from two other UI components:\n\n       - Box component to keep checker indicator\n       - Label component to paint label\n\nDevelopers are free to customize the component as they want. There is no limitation regarding\nhow the box and label components have to be laid out, which UI components have to be used as\nthe box or label components, etc. The check box extends state panel component and re-map states\nto own views IDs:\n\n      - **\"pressed.out\"** - checked and pointer cursor is out\n      - **\"out\"** - un-checked and pointer cursor is out\n      - **\"pressed.disabled\"** - disabled and checked,\n      - **\"disabled\"** - disabled and un-checked ,\n      - **\"pressed.over\"** - checked and pointer cursor is over\n      - **\"over\"** - un-checked and pointer cursor is out\n\n\nCustomize is quite similar to what explained for zebkit.ui.EvStatePan:\n\n\n           // create checkbox component\n           var ch = new zebkit.ui.Checkbox(\"Checkbox\");\n\n           // change border when the component checked to green\n           // otherwise set it to red\n           ch.setBorder(new zebkit.ui.ViewSet({\n               \"*\": new zebkit.ui.Border(\"red\"),\n               \"pressed.*\": new zebkit.ui.Border(\"green\")\n           }));\n\n           // customize checker box children UI component to show\n           // green for checked and red for un-cheked states\n           ch.kids[0].setView(new zebkit.ui.ViewSet({\n               \"*\": \"red\",\n               \"pressed.*\": \"green\"\n           }));\n           // sync current state with new look and feel\n           ch.syncState();\n\nListening checked event should be done by registering a listener in the check box switch manager\nas follow:\n\n           // create checkbox component\n           var ch = new zebkit.ui.Checkbox(\"Checkbox\");\n\n           // register a checkbox listener\n           ch.manager.on(function(sm) {\n               var s = sm.getValue();\n               ...\n           });",
            "extends": "zebkit.ui.CompositeEvStatePan",
            "uses": [
                "zebkit.ui.Switchable"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "label",
                    "description": "a label",
                    "type": "String|zebkit.ui.Panel",
                    "optional": true
                },
                {
                    "name": "m",
                    "description": "a switch manager",
                    "type": "zebkit.ui.SwitchManager",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.Checkbox.Box": {
            "name": "zebkit.ui.Checkbox.Box",
            "shortname": "zebkit.ui.Checkbox.Box",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17557,
            "description": "The box UI component class that is used by default with the check box component.",
            "is_constructor": 1,
            "extends": "zebkit.ui.ViewPan"
        },
        "zebkit.ui.Radiobox": {
            "name": "zebkit.ui.Radiobox",
            "shortname": "zebkit.ui.Radiobox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17644,
            "description": "Radio-box UI component class. This class is extension of \"zebkit.ui.Checkbox\" class that sets group\nas a default switch manager. The other functionality id identical to checkbox component. Generally\nspeaking this class is a shortcut for radio box creation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "label",
                    "description": "a label",
                    "type": "String|zebkit.ui.Panel",
                    "optional": true
                },
                {
                    "name": "m",
                    "description": "a switch manager",
                    "type": "zebkit.ui.Group",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.Checkbox}"
        },
        "zebkit.ui.Link": {
            "name": "zebkit.ui.Link",
            "shortname": "zebkit.ui.Link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17664,
            "description": "UI link component class.",
            "params": [
                {
                    "name": "s",
                    "description": "a link text",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.Button"
        },
        "zebkit.ui.Toolbar": {
            "name": "zebkit.ui.Toolbar",
            "shortname": "zebkit.ui.Toolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17785,
            "description": "Toolbar UI component. Handy way to place number of click able elements",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.BorderPan": {
            "name": "zebkit.ui.BorderPan",
            "shortname": "zebkit.ui.BorderPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 17937,
            "description": "Border panel UI component class. The component renders titled border around the\ngiven  content UI component. Border title can be placed on top or\nbottom border line and aligned horizontally (left, center, right). Every\nzebkit UI component can be used as a border title element.",
            "params": [
                {
                    "name": "title",
                    "description": "a border panel title. Can be a\nstring or any other UI component can be used as the border panel title",
                    "type": "zebkit.ui.Panel|String",
                    "optional": true
                },
                {
                    "name": "content",
                    "description": "a content UI component of the border\npanel",
                    "type": "zebkit.ui.Panel",
                    "optional": true
                },
                {
                    "name": "constraints",
                    "description": "a title constraints. The constraints gives\na possibility to place border panel title in different places. Generally\nthe title can be placed on the top or bottom part of the border panel.\nAlso the title can be aligned horizontally.\n\n```JavaScript\n   // create border panel with a title located at the\n   // top and aligned at the canter\n   var bp = new zebkit.ui.BorderPan(\"Title\",\n                                   new zebkit.ui.Panel(),\n                                   \"top\", \"center\");\n```",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.SplitPan": {
            "name": "zebkit.ui.SplitPan",
            "shortname": "zebkit.ui.SplitPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 18189,
            "description": "Splitter panel UI component class. The component splits its area horizontally or vertically into two areas.\nEvery area hosts an UI component. A size of the parts can be controlled by pointer cursor dragging. Gripper\nelement is children UI component that can be customized. For instance:\n\n         // create split panel\n         var sp = new zebkit.ui.SplitPan(new zebkit.ui.Label(\"Left panel\"),\n                                         new zebkit.ui.Label(\"Right panel\"));\n\n         // customize gripper background color depending on its state\n         sp.gripper.setBackground(new zebkit.ui.ViewSet({\n              \"over\" : \"yellow\"\n              \"out\" : null,\n              \"pressed.over\" : \"red\"\n         }));",
            "params": [
                {
                    "name": "first",
                    "description": "a first UI component in splitter panel",
                    "type": "zebkit.ui.Panel",
                    "optional": true
                },
                {
                    "name": "second",
                    "description": "a second UI component in splitter panel",
                    "type": "zebkit.ui.Panel",
                    "optional": true
                },
                {
                    "name": "o",
                    "description": "an orientation of splitter element: \"vertical\" or \"horizontal\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.CollapsiblePan": {
            "name": "zebkit.ui.CollapsiblePan",
            "shortname": "zebkit.ui.CollapsiblePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 18558,
            "description": "Extendable  UI panel class. Implement collapsible panel where\na user can hide of show content by pressing special control\nelement:\n\n           // create extendable panel that contains list as its content\n           var ext = zebkit.ui.CollapsiblePan(\"Title\", new zebkit.ui.List([\n               \"Item 1\",\n               \"Item 2\",\n               \"Item 3\"\n           ]));",
            "is_constructor": 1,
            "uses": [
                "zebkit.ui.Switchable"
            ],
            "extends": "{zebkit.ui.Panel}",
            "params": [
                {
                    "name": "l",
                    "description": "a title label text or",
                    "type": "zebkit.ui.Panel|String"
                },
                {
                    "name": "c",
                    "description": "a content of the extender panel\ncomponent",
                    "type": "zebkit.ui.Panel"
                }
            ]
        },
        "zebkit.ui.StatusBar": {
            "name": "zebkit.ui.StatusBar",
            "shortname": "zebkit.ui.StatusBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 18780,
            "description": "Status bar UI component class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "gap",
                    "description": "a gap between status bar children elements",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.StackPan": {
            "name": "zebkit.ui.StackPan",
            "shortname": "zebkit.ui.StackPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 18822,
            "description": "Panel class that uses zebkit.layout.StackLayout as a default layout manager.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.ScrollManager": {
            "name": "zebkit.ui.ScrollManager",
            "shortname": "zebkit.ui.ScrollManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 18838,
            "description": "Scroll manager class.",
            "params": [
                {
                    "name": "t",
                    "description": "a target component to be scrolled",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "is_constructor": 1
        },
        "zebkit.ui.Scroll": {
            "name": "zebkit.ui.Scroll",
            "shortname": "zebkit.ui.Scroll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 18968,
            "description": "Scroll bar UI component",
            "params": [
                {
                    "name": "t",
                    "description": "orientation of the scroll bar components:\n\n           \"vertical\" - vertical scroll bar\n           \"horizontal\"- horizontal scroll bar",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}",
            "uses": [
                "{zebkit.util.Position.Metric}",
                "{zebkit.util.Position.Metric}"
            ]
        },
        "zebkit.ui.ScrollPan": {
            "name": "zebkit.ui.ScrollPan",
            "shortname": "zebkit.ui.ScrollPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 19324,
            "description": "Scroll UI panel. The component is used to manage scrolling for a children UI component\nthat occupies more space than it is available. The usage is very simple, just put an\ncomponent you want to scroll horizontally or/and vertically in the scroll panel:\n\n           // scroll vertically and horizontally a large picture\n           var scrollPan = new zebkit.ui.ScrollPan(new zebkit.ui.ImagePan(\"largePicture.jpg\"));\n\n           // scroll vertically  a large picture\n           var scrollPan = new zebkit.ui.ScrollPan(new zebkit.ui.ImagePan(\"largePicture.jpg\"),\n                                                  \"vertical\");\n\n           // scroll horizontally a large picture\n           var scrollPan = new zebkit.ui.ScrollPan(new zebkit.ui.ImagePan(\"largePicture.jpg\"),\n                                                  \"horizontal\");",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component that has to be placed into scroll panel",
                    "type": "zebkit.ui.Panel",
                    "optional": true
                },
                {
                    "name": "scrolls",
                    "description": "a scroll bars that have to be shown. Use \"vertical\", \"horizontal\"\nor \"both\" string value to control scroll bars visibility. By default the value is \"both\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "autoHide",
                    "description": "a boolean value that says if the scrollbars have to work in\nauto hide mode. Pass true to switch scrollbars in auto hide mode. By default the value is\nfalse",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.MobileScrollMan": {
            "name": "zebkit.ui.MobileScrollMan",
            "shortname": "zebkit.ui.MobileScrollMan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 19779,
            "description": "Mobile scroll manager class. Implements inertial scrolling in zebkit mobile application.",
            "extends": "zebkit.ui.Manager",
            "is_constructor": 1
        },
        "zebkit.ui.Slider": {
            "name": "zebkit.ui.Slider",
            "shortname": "zebkit.ui.Slider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 19882,
            "description": "Slider UI component class.",
            "params": [
                {
                    "name": "o",
                    "description": "a slider orientation (\"vertical or \"horizontal\")",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.Tabs": {
            "name": "zebkit.ui.Tabs",
            "shortname": "zebkit.ui.Tabs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 20405,
            "description": "Tabs UI panel. The component is used to organize switching between number of pages where every\npage is an UI component.\n\nFilling tabs component with pages is the same to how you add an UI component to a panel. For\ninstance in the example below three pages with \"Titl1\", \"Title2\", \"Title3\" are added:\n\n         var tabs = new zebkit.ui.Tabs();\n         tabs.add(\"Title1\", new zebkit.ui.Label(\"Label as a page\"));\n         tabs.add(\"Title2\", new zebkit.ui.Button(\"Button as a page\"));\n         tabs.add(\"Title3\", new zebkit.ui.TextArea(\"Text area as a page\"));\n\n You can access tabs pages UI component the same way like you access a panel children components\n\n        ...\n        tabs.kids[0] // access the first page\n\n And you can remove it with standard panel inherited API:\n\n        ...\n        tabs.removeAt(0); // remove first tab page\n\n\n To customize tab page caption and icon you should access tab object and do it with API it provides:\n\n\n           // update a tab caption\n           tabs.getTab(0).setCaption(\"Test\");\n\n           // update a tab icon\n           tabs.getTab(0).setIcon(\"my.gif\");\n\n           // set a particular font and color for the tab in selected state\n           tabs.getTab(0).setColor(true, \"blue\");\n           tabs.getTab(0).setFont(true, new zebkit.ui.Font(\"Arial\", \"bold\", 16));\n\n           // set other caption for the tab in not selected state\n           tabs.getTab(0).setCaption(false, \"Test\");",
            "params": [
                {
                    "name": "o",
                    "description": "the tab panel orientation:\n\n         \"top\"\n         \"bottom\"\n         \"left\"\n         \"right\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.Tabs.TabView": {
            "name": "zebkit.ui.Tabs.TabView",
            "shortname": "zebkit.ui.Tabs.TabView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 20499,
            "description": "Tab view class that defines the tab page title and icon",
            "params": [
                {
                    "name": "icon",
                    "description": "an path to an image or image object",
                    "type": "String|Image",
                    "optional": true
                },
                {
                    "name": "caption",
                    "description": "a tab caption",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.CompRender}",
            "is_constructor": 1
        },
        "zebkit.ui.TextField": {
            "name": "zebkit.ui.TextField",
            "shortname": "zebkit.ui.TextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 21384,
            "description": "Text field UI component. The component is designed to enter single line, multi lines or password text.\nThe component implement text field functionality from the scratch. It supports the following features\n\n       - Text selection\n       - Redu/Undo actions\n       - Native WEB clipboard\n       - Basic text navigation\n       - Read-only mode\n       - Left or right text alignment",
            "is_constructor": 1,
            "params": [
                {
                    "name": "txt",
                    "description": "a text the text field component\nhas to be filled. The parameter can be a simple string, text model or text render class instance.",
                    "type": "String|zebkit.data.TextModel|zebkit.ui.TextRender",
                    "optional": true
                },
                {
                    "name": "maxCol",
                    "description": "a maximal size of entered text. -1 means the size of the edited text\nhas no length limit.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.Label"
        },
        "zebkit.ui.TextField.HintRender": {
            "name": "zebkit.ui.TextField.HintRender",
            "shortname": "zebkit.ui.TextField.HintRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 21437,
            "description": "Text field hint text render",
            "is_constructor": 1,
            "extends": "{zebkit.ui.StringRender}"
        },
        "zebkit.ui.TextArea": {
            "name": "zebkit.ui.TextArea",
            "shortname": "zebkit.ui.TextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 22478,
            "description": "Text area UI component. The UI component to render multi-lines text.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "txt",
                    "description": "a text",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.TextField"
        },
        "zebkit.ui.PassTextField": {
            "name": "zebkit.ui.PassTextField",
            "shortname": "zebkit.ui.PassTextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 22492,
            "description": "Password text field.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "txt",
                    "description": "password text",
                    "type": "String"
                },
                {
                    "name": "maxSize",
                    "description": "maximal size",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "showLast",
                    "description": "indicates if last typed character should\nnot be disguised with a star character",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.TextField"
        },
        "zebkit.ui.BaseList": {
            "name": "zebkit.ui.BaseList",
            "shortname": "zebkit.ui.BaseList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 22552,
            "description": "Base UI list component class that has to be extended with a\nconcrete list component implementation. The list component\nvisualizes list data model (zebkit.data.ListModel).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "m",
                    "description": "a list model that should be passed as an instance\nof zebkit.data.ListModel or as an array.",
                    "type": "zebkit.data.ListModel|Array",
                    "optional": true
                },
                {
                    "name": "b",
                    "description": "true if the list navigation has to be triggered by\npointer cursor moving",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.Panel}",
            "uses": [
                "{zebkit.util.Position.Metric}",
                "{zebkit.ui.$ViewsSetterMix}"
            ]
        },
        "zebkit.ui.List": {
            "name": "zebkit.ui.List",
            "shortname": "zebkit.ui.List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 23227,
            "description": "The class is list component implementation that visualizes zebkit.data.ListModel.\nIt is supposed the model can have any type of items. Visualization of the items\nis customized by defining a view provider.\n\nThe general use case:\n\n           // create list component that contains three item\n           var list = new zebkit.ui.List([\n               \"Item 1\",\n               \"Item 2\",\n               \"Item 3\"\n           ]);\n\n           ...\n           // add new item\n           list.model.add(\"Item 4\");\n\n           ...\n           // remove first item\n           list.model.removeAt(0);\n\n\nTo customize list items views you can redefine item view provider as following:\n\n           // suppose every model item is an array that contains two elements,\n           // first element points to the item icon and the second element defines\n           // the list item text\n           var list = new zebkit.ui.List([\n               [ \"icon1.gif\", \"Caption 1\" ],\n               [ \"icon2.gif\", \"Caption 1\" ],\n               [ \"icon3.gif\", \"Caption 1\" ]\n           ]);\n\n           // define new list item views provider that represents every\n           // list model item as icon with a caption\n           list.setViewProvider(new zebkit.ui.List.ViewProvider([\n               function getView(target, value, i) {\n                   var caption = value[1];\n                   var icon    = value[0];\n                   return new zebkit.ui.CompRender(new zebkit.ui.ImageLabel(caption, icon));\n               }\n           ]));",
            "extends": "zebkit.ui.BaseList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "a list model that should be passed as an instance\nof zebkit.data.ListModel or as an array.",
                    "type": "zebkit.data.ListModel|Array",
                    "optional": true
                },
                {
                    "name": "isComboMode",
                    "description": "true if the list navigation has to be triggered by\npointer cursor moving",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.List.ViewProvider": {
            "name": "zebkit.ui.List.ViewProvider",
            "shortname": "zebkit.ui.List.ViewProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 23312,
            "description": "List view provider class. This implementation renders list item using string\nrender. If a list item is an instance of \"zebkit.ui.View\" class than it will\nbe rendered as the view.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "f",
                    "description": "a font to render list item text",
                    "type": "String|zebkit.ui.Font",
                    "optional": true
                },
                {
                    "name": "c",
                    "description": "a color to render list item text",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.CompList": {
            "name": "zebkit.ui.CompList",
            "shortname": "zebkit.ui.CompList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 23574,
            "description": "List component consider its children UI components as a list model items. Every added to the component\nUI children component becomes a list model element. The implementation allows developers to use\nother UI components as its elements what makes list item view customization very easy and powerful:\n\n           // use image label as the component list items\n           var list = new zebkit.ui.CompList();\n           list.add(new zebkit.ui.ImageLabel(\"Caption 1\", \"icon1.gif\"));\n           list.add(new zebkit.ui.ImageLabel(\"Caption 2\", \"icon2.gif\"));\n           list.add(new zebkit.ui.ImageLabel(\"Caption 3\", \"icon3.gif\"));",
            "is_constructor": 1,
            "extends": "zebkit.ui.BaseList",
            "params": [
                {
                    "name": "model",
                    "description": "a list model that should be passed as an instance\nof zebkit.data.ListModel or as an array.",
                    "type": "zebkit.data.ListModel|Array",
                    "optional": true
                },
                {
                    "name": "isComboMode",
                    "description": "true if the list navigation has to be triggered by\npointer cursor moving",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.Combo": {
            "name": "zebkit.ui.Combo",
            "shortname": "zebkit.ui.Combo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 23763,
            "description": "Combo box UI component class. Combo uses a list component to show in drop down window.\nYou can use any available list component implementation:\n\n           // use simple list as combo box drop down window\n           var combo = new zebkit.ui.Combo(new zebkit.ui.List([\n               \"Item 1\",\n               \"Item 2\",\n               \"Item 3\"\n           ]));\n\n\n           // use component list as combo box drop down window\n           var combo = new zebkit.ui.Combo(new zebkit.ui.CompList([\n               \"Item 1\",\n               \"Item 2\",\n               \"Item 3\"\n           ]));\n\n\n           // let combo box decides which list component has to be used\n           var combo = new zebkit.ui.Combo([\n               \"Item 1\",\n               \"Item 2\",\n               \"Item 3\"\n           ]);",
            "extends": "{zebkit.ui.Panel}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "an combo items array or a list component",
                    "type": "Array|zebkit.ui.BaseList"
                }
            ]
        },
        "zebkit.ui.Combo.ContentPan": {
            "name": "zebkit.ui.Combo.ContentPan",
            "shortname": "zebkit.ui.Combo.ContentPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 23870,
            "description": "UI panel class that is used to implement combo box content area",
            "extends": "{zebkit.ui.Panel}",
            "is_constructor": 1
        },
        "zebkit.ui.Combo.ComboPadPan": {
            "name": "zebkit.ui.Combo.ComboPadPan",
            "shortname": "zebkit.ui.Combo.ComboPadPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 23910,
            "description": "Combo box list pad component class",
            "extends": "zebkit.ui.ScrollPan",
            "is_constructor": 1,
            "params": [
                {
                    "name": "c",
                    "description": "a target component",
                    "type": "zebkit.ui.Panel"
                }
            ]
        },
        "zebkit.ui.Combo.ReadonlyContentPan": {
            "name": "zebkit.ui.Combo.ReadonlyContentPan",
            "shortname": "zebkit.ui.Combo.ReadonlyContentPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 23949,
            "description": "Read-only content area combo box component panel class",
            "extends": "zebkit.ui.Combo.ContentPan",
            "is_constructor": 1
        },
        "zebkit.ui.Combo.EditableContentPan": {
            "name": "zebkit.ui.Combo.EditableContentPan",
            "shortname": "zebkit.ui.Combo.EditableContentPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 24000,
            "description": "Editable content area combo box component panel class",
            "is_constructor": 1,
            "extends": "zebkit.ui.Combo.ContentPan"
        },
        "zebkit.ui.MenuEvent": {
            "name": "zebkit.ui.MenuEvent",
            "shortname": "zebkit.ui.MenuEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 24484,
            "description": "Menu event class",
            "is_constructor": 1,
            "extends": "{zebkit.util.Event}"
        },
        "zebkit.ui.MenuItem": {
            "name": "zebkit.ui.MenuItem",
            "shortname": "zebkit.ui.MenuItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 24539,
            "description": "Menu item panel class. The component holds menu item content like caption, icon, sub-menu\nsign elements. The area of the component is split into three parts: left, right and center.\nCentral part keeps content, left side keeps checked sign element and the right side keeps\nsub-menu sign element.",
            "params": [
                {
                    "name": "caption",
                    "description": "a menu item caption string or component. Caption\nstring can encode the item id, item icon and item checked state. For instance:\n\n  - **\"Menu Item [@menu_item_id]\"** - triggers creation of menu item component\n    with \"Menu Item\" caption and \"menu_item_id\" id property value\n  - **\"[x] Menu Item\"** - triggers creation of checked menu item component\n    with checked on state\n  - **\"@('mypicture.gif') Menu Item\"** - triggers creation of menu item\n     component with \"Menu Item\" caption and loaded mypicture.gif icon",
                    "type": "String|zebkit.ui.Panel"
                }
            ],
            "example": [
                "\n\n\n    // create menu item with icon and \"Item 1\" title\n    var mi = new zebkit.ui.MenuItem(\"@('mypicture.gif') Item 1\");"
            ],
            "extends": "{zebkit.ui.Panel}",
            "is_constructor": 1
        },
        "zebkit.ui.Menu": {
            "name": "zebkit.ui.Menu",
            "shortname": "zebkit.ui.Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 24854,
            "description": "Menu UI component class. The class implements popup menu UI component.\n\n        var m = new Menu({\n           \"Menu Item 1\" : [\n               \"[x] SubMenu Checked Item 1\",\n               \"[ ] SubMenu Unchecked Item 2\",\n               \"-\",   // line\n               \"[ ] SubMenu Unchecked Item 3\"\n           ],\n           \"Menu Item 2\" : null,\n           \"Menu Item 3\" : null\n        });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "list",
                    "description": "menu items description",
                    "type": "Object",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.CompList}"
        },
        "zebkit.ui.Menubar": {
            "name": "zebkit.ui.Menubar",
            "shortname": "zebkit.ui.Menubar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 25298,
            "description": "Menu bar UI component class. Menu bar can be build in any part of UI application.\nThere is no restriction regarding the placement of the component.\n\n           var canvas = new zebkit.ui.zCanvas(300,200);\n           canvas.setLayout(new zebkit.layout.BorderLayout());\n\n           var mbar = new zebkit.ui.Menubar({\n               \"Item 1\": {\n                   \"Subitem 1.1\":null,\n                   \"Subitem 1.2\":null,\n                   \"Subitem 1.3\":null\n               },\n               \"Item 2\": {\n                   \"Subitem 2.1\":null,\n                   \"Subitem 2.2\":null,\n                   \"Subitem 2.3\":null\n               },\n               \"Item 3\": null\n           });\n\n           canvas.root.add(\"bottom\", mbar);",
            "is_constructor": 1,
            "extends": "zebkit.ui.Menu"
        },
        "zebkit.ui.PopupLayerMix": {
            "name": "zebkit.ui.PopupLayerMix",
            "shortname": "zebkit.ui.PopupLayerMix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 25412,
            "description": "UI popup layer class. Special layer implementation to show\ncontext menu. Normally the layer is not used directly.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.HtmlCanvas}"
        },
        "zebkit.ui.WinEvent": {
            "name": "zebkit.ui.WinEvent",
            "shortname": "zebkit.ui.WinEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 25568,
            "description": "Window component event",
            "is_constructor": 1,
            "extends": "{zebkit.util.Event}"
        },
        "zebkit.ui.WinLayer": {
            "name": "zebkit.ui.WinLayer",
            "shortname": "zebkit.ui.WinLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 25661,
            "description": "Window layer class. Window layer is supposed to be used for showing\nmodal and none modal internal window. There are special ready to use\n\"zebkit.ui.Window\" UI component that can be shown as internal window, but\nzebkit allows developers to show any UI component as modal or none modal\nwindow. Add an UI component to window layer to show it as modal o none\nmodal window:\n\n           // create canvas\n           var canvas   = new zebkit.ui.zCanvas();\n\n           // get windows layer\n           var winLayer = canvas.getLayer(zebkit.ui.WinLayerMix.id);\n\n           // create standard UI window component\n           var win = new zebkit.ui.Window();\n           win.setBounds(10,10,200,200);\n\n           // show the created window as modal window\n           winLayer.addWin(\"modal\", win);\n\nAlso shortcut method can be used\n\n           // create canvas\n           var canvas   = new zebkit.ui.zCanvas();\n\n           // create standard UI window component\n           var win = new zebkit.ui.Window();\n           win.setBounds(10,10,200,200);\n\n           // show the created window as modal window\n           zebkit.ui.showModalWindow(canvas, win);\n\nWindow layer supports three types of windows:\n\n       - **\"modal\"** a modal window catches all input till it will be closed\n       - **\"mdi\"** a MDI window can get focus, but it doesn't block switching\n       focus to other UI elements\n       - **\"info\"** an INFO window cannot get focus. It is supposed to show\n       some information like tooltip.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.HtmlCanvas}"
        },
        "zebkit.ui.Window": {
            "name": "zebkit.ui.Window",
            "shortname": "zebkit.ui.Window",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 25945,
            "description": "Window UI component class. Implements window like UI component. The window component has a header,\nstatus bar and content areas. The header component is usually placed at the top of window, the\nstatus bar component is placed at the bottom and the content component at places the central part\nof the window. Also the window defines corner UI component that is supposed to be used to resize\nthe window. The window implementation provides the following possibilities:\n\n       - Move window by dragging the window on its header\n       - Resize window by dragging the window corner element\n       - Place buttons in the header to maximize, minimize, close, etc the window\n       - Indicates state of window (active or inactive) by changing\n       the widow header style\n       - Define a window icon component\n       - Define a window status bar component",
            "params": [
                {
                    "name": "s",
                    "description": "a window title",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "c",
                    "description": "a window content",
                    "type": "zebkit.ui.Panel",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.Tooltip": {
            "name": "zebkit.ui.Tooltip",
            "shortname": "zebkit.ui.Tooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 26350,
            "description": "Tooltip UI component. The component can be used as a tooltip that shows specified content in\nfigured border.",
            "params": [
                {
                    "name": "a",
                    "description": "content component or test label to be shown in tooltip",
                    "type": "zebkit.util.Panel|String"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.TooltippupManager": {
            "name": "zebkit.TooltippupManager",
            "shortname": "zebkit.TooltippupManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 26441,
            "description": "Popup window manager class. The manager registering and triggers showing context popup menu\nand tooltips. Menu appearing is triggered by right pointer click or double fingers touch event.\nTo bind a popup menu to an UI component you can either set \"tooltip\" property of the component\nwith a popup menu instance:\n\n           // create canvas\n           var canvas = new zebkit.ui.zCanvas();\n\n           // create menu with three items\n           var m = new zebkit.ui.Menu();\n           m.add(\"Menu Item 1\");\n           m.add(\"Menu Item 2\");\n           m.add(\"Menu Item 3\");\n\n           // bind the menu to root panel\n           canvas.root.popup = m;\n\nOr implement \"getPopup(target,x,y)\" method that can rule showing popup menu depending on\nthe current cursor location:\n\n           // create canvas\n           var canvas = new zebkit.ui.zCanvas();\n\n           // visualize 50x50 pixels hot component spot\n           // to which the context menu is bound\n           canvas.root.paint = function(g) {\n               g.setColor(\"red\");\n               g.fillRect(50,50,50,50);\n           }\n\n           // create menu with three items\n           var m = new zebkit.ui.Menu();\n           m.add(\"Menu Item 1\");\n           m.add(\"Menu Item 2\");\n           m.add(\"Menu Item 3\");\n\n           // implement \"getPopup\" method that shows popup menu only\n           // if pointer cursor located at red rectangular area of the\n           // component\n           canvas.root.getPopup = function(target, x, y) {\n               // test if pointer cursor position is in red spot area\n               // and return context menu if it is true\n               if (x > 50 && y > 50 && x < 100 && y <  100)  {\n                   return m;\n               }\n               return null;\n           }\n\n Defining a tooltip for an UI component follows the same approach. Other you\n define set \"tooltip\" property of your component with a component that has to\n be shown as the tooltip:\n\n            // create canvas\n            var canvas = new zebkit.ui.zCanvas();\n\n            // create tooltip\n            var t = new zebkit.ui.Label(\"Tooltip\");\n            t.setBorder(\"plain\");\n            t.setBackground(\"yellow\");\n            t.setPadding(6);\n\n            // bind the tooltip to root panel\n            canvas.root.popup = t;\n\n Or you can implement \"getTooltip(target,x,y)\" method if the tooltip showing depends on\n the pointer cursor location:\n\n\n           // create canvas\n           var canvas = new zebkit.ui.zCanvas();\n\n           // create tooltip\n           var t = new zebkit.ui.Label(\"Tooltip\");\n           t.setBorder(\"plain\");\n           t.setBackground(\"yellow\");\n           t.setPadding(6);\n\n           // bind the tooltip to root panel\n           canvas.root.getPopup = function(target, x, y) {\n               return x < 10 && y < 10 ? t : null;\n           };",
            "extends": "zebkit.ui.Manager",
            "is_constructor": 1
        },
        "zebkit.ui.tree": {
            "name": "zebkit.ui.tree",
            "shortname": "zebkit.ui.tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 26798,
            "description": "Tree UI components and all related to the component classes and interfaces.\nTree components are graphical representation of a tree model that allows a user\nto navigate over the model item, customize the items rendering and\norganize customizable editing of the items.\n\n           // create tree component instance to visualize the given tree model\n           var tree = new zebkit.ui.tree.Tree({\n               value: \"Root\",\n               kids : [\n                   \"Item 1\",\n                   \"Item 2\",\n                   \"Item 3\"\n               ]\n           });\n\n           // make all tree items editable with text field component\n           tree.setEditorProvider(new zebkit.ui.tree.DefEditors());\n\nOne more tree  component implementation - \"CompTree\" - allows developers\nto create tree whose nodes are  other UI components\n\n           // create tree component instance to visualize the given tree model\n           var tree = new zebkit.ui.tree.CompTree({\n               value: new zebkit.ui.Label(\"Root label item\"),\n               kids : [\n                   new zebkit.ui.Checkbox(\"Checkbox Item\"),\n                   new zebkit.ui.Button(\"Button Item\"),\n                   new zebkit.ui.TextField(\"Text field item\")\n               ]\n           });",
            "access": "package"
        },
        "zebkit.ui.tree.$IM": {
            "name": "zebkit.ui.tree.$IM",
            "shortname": "zebkit.ui.tree.$IM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 26839,
            "description": "Simple private structure to keep a tree model item metrical characteristics",
            "is_constructor": 1,
            "params": [
                {
                    "name": "b",
                    "description": "a state of an appropriate tree component node of the given\ntree model item. The state is sensible for item that has children items and\nthe state indicates if the given tree node is collapsed (false) or expanded\n(true)",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "zebkit.ui.tree.DefEditors": {
            "name": "zebkit.ui.tree.DefEditors",
            "shortname": "zebkit.ui.tree.DefEditors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 26894,
            "description": "Default tree editor provider",
            "is_constructor": 1
        },
        "zebkit.ui.tree.DefViews": {
            "name": "zebkit.ui.tree.DefViews",
            "shortname": "zebkit.ui.tree.DefViews",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 26954,
            "description": "Default tree editor view provider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "color",
                    "description": "the tree item text color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "font",
                    "description": "the tree item text font",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.tree.BaseTree": {
            "name": "zebkit.ui.tree.BaseTree",
            "shortname": "zebkit.ui.tree.BaseTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 27023,
            "description": "Abstract tree component that can used as basement for building own tree components.\nThe component is responsible for rendering tree, calculating tree nodes metrics,\ncomputing visible area, organizing basic user interaction. Classes that inherit it\nhas to provide the following important things:\n\n**A tree model item metric** Developers have to implement \"getItemPreferredSize(item)\"\n         method to say which size the given tree item wants to have.\n**Tree node item rendering** If necessary developers have to implement the way\n         a tree item has to be visualized by implementing \"this.paintItem(...)\" method",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "tree model. It can be an instance of tree model\nclass or an object that described tree model. An example of such object is shown below:\n\n           {\n               value : \"Root\",\n               kids  : [\n                   {\n                       value: \"Child 1\",\n                       kids :[\n                           \"Sub child 1\"\n                       ]\n                   },\n                   \"Child 2\",\n                   \"Child 3\"\n               ]\n           }",
                    "type": "zebkit.data.TreeModel|Object"
                },
                {
                    "name": "nodeState",
                    "description": "a default tree nodes state (expanded or collapsed)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.tree.Tree": {
            "name": "zebkit.ui.tree.Tree",
            "shortname": "zebkit.ui.tree.Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 28066,
            "description": "Tree UI component that visualizes a tree data model. The model itself can be passed as JavaScript\nstructure or as a instance of zebkit.data.TreeModel. Internally tree component keeps the model always\nas zebkit.data.TreeModel class instance:\n\n        var tree = new zebkit.ui.tree.Tree({\n             value: \"Root\",\n             kids : [  \"Item 1\", \"Item 2\"]\n        });\n\nor\n\n        var model = new zebkit.data.TreeModel(\"Root\");\n        model.add(model.root, \"Item 1\");\n        model.add(model.root, \"Item 2\");\n\n        var tree = new zebkit.ui.tree.Tree(model);\n\nTree model rendering is fully customizable by defining an own views provider. Default views\nprovider renders tree model item as text. The tree node can be made editable by defining an\neditor provider. By default tree modes are not editable.",
            "is_constructor": 1,
            "extends": "zebkit.ui.tree.BaseTree",
            "params": [
                {
                    "name": "model",
                    "description": "a tree data model passed as JavaScript\nstructure or as an instance",
                    "type": "Object|zebkit.data.TreeModel",
                    "optional": true
                },
                {
                    "name": "b",
                    "description": "the tree component items toggle state. true to have all items\nin opened state.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.tree.CompTree": {
            "name": "zebkit.ui.tree.CompTree",
            "shortname": "zebkit.ui.tree.CompTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 28385,
            "description": "Component tree component that expects other UI components to be a tree model values.\nIn general the implementation lays out passed via tree model UI components as tree\ncomponent nodes. For instance:\n\n        var tree = new zebkit.ui.tree.Tree({\n             value: new zebkit.ui.Label(\"Label root item\"),\n             kids : [\n                   new zebkit.ui.Checkbox(\"Checkbox Item\"),\n                   new zebkit.ui.Button(\"Button item\"),\n                   new zebkit.ui.Combo([\"Combo item 1\", \"Combo item 2\"])\n            ]\n        });\n\nBut to prevent unexpected navigation it is better to use number of predefined\nwith component tree UI components:\n\n      - zebkit.ui.tree.CompTree.Label\n      - zebkit.ui.tree.CompTree.Checkbox\n      - zebkit.ui.tree.CompTree.Combo\n\nYou can describe tree model keeping in mind special notation\n\n        var tree = new zebkit.ui.tree.Tree({\n             value: \"Label root item\",  // zebkit.ui.tree.CompTree.Label\n             kids : [\n                   \"[ ] Checkbox Item 1\", // unchecked zebkit.ui.tree.CompTree.Checkbox\n                   \"[x] Checkbox Item 2\", // checked zebkit.ui.tree.CompTree.Checkbox\n                   [\"Combo item 1\", \"Combo item 2\"] // zebkit.ui.tree.CompTree.Combo\n            ]\n        });",
            "is_constructor": 1,
            "extends": "zebkit.ui.tree.BaseTree",
            "params": [
                {
                    "name": "model",
                    "description": "a tree data model passed as JavaScript\nstructure or as an instance",
                    "type": "Object|zebkit.data.TreeModel",
                    "optional": true
                },
                {
                    "name": "b",
                    "description": "the tree component items toggle state. true to have all items\nin opened state.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.grid": {
            "name": "zebkit.ui.grid",
            "shortname": "zebkit.ui.grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 28666,
            "description": "The package contains number of classes and interfaces to implement\nUI Grid component. The grid allows developers to visualize matrix\nmodel, customize the model data editing and rendering.",
            "access": "package"
        },
        "zebkit.ui.grid.Metrics": {
            "name": "zebkit.ui.grid.Metrics",
            "shortname": "zebkit.ui.grid.Metrics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "zebkit.ui.grid.Grid"
            ],
            "file": "build/zebkit.js",
            "line": 28685,
            "description": "Interface that describes a grid component metrics",
            "interface": "zebkit.ui.grid.Metrics"
        },
        "zebkit.ui.grid.DefViews": {
            "name": "zebkit.ui.grid.DefViews",
            "shortname": "zebkit.ui.grid.DefViews",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 28788,
            "description": "Default grid cell views provider. The class rules how a grid cell content,\nbackground has to be rendered and aligned. Developers can implement an own\nviews providers and than setup it for a grid by calling \"setViewProvider(...)\"\nmethod.",
            "params": [
                {
                    "name": "render",
                    "description": "a string render",
                    "type": "zebkit.ui.TextRender|zebkit.ui.StringText",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebkit.ui.grid.DefEditors": {
            "name": "zebkit.ui.grid.DefEditors",
            "shortname": "zebkit.ui.grid.DefEditors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 28884,
            "description": "Simple grid cells editors provider implementation. By default the editors provider\nuses a text field component or check box component as a cell content editor. Check\nbox component is used if a cell data type is boolean, otherwise text filed is applied\nas the cell editor.\n\n           // grid with tree columns and three rows\n           // first and last column will be editable with text field component\n           // second column will be editable with check box component\n           var grid = new zebkit.ui.grid.Grid([\n               [\"Text Cell\", true, \"Text cell\"],\n               [\"Text Cell\", false, \"Text cell\"],\n               [\"Text Cell\", true, \"Text cell\"]\n           ]);\n\n           // make grid cell editable\n           grid.setEditorProvider(new zebkit.ui.grid.DefEditors());\n\n\nIt is possible to customize a grid column editor by specifying setting \"editors[col]\" property\nvalue. You can define an UI component that has to be applied as an editor for the given column\nAlso you can disable editing by setting appropriate column editor class to null:\n\n           // grid with tree columns and three rows\n           // first and last column will be editable with text field component\n           // second column will be editable with check box component\n           var grid = new zebkit.ui.grid.Grid([\n               [\"Text Cell\", true, \"Text cell\"],\n               [\"Text Cell\", false, \"Text cell\"],\n               [\"Text Cell\", true, \"Text cell\"]\n           ]);\n\n           // grid cell editors provider\n           var editorsProvider = new zebkit.ui.grid.DefEditors();\n\n           // disable the first column editing\n           editorsProvider.editors[0] = null;\n\n           // make grid cell editable\n           grid.setEditorProvider(editorsProvider);",
            "is_constructor": 1
        },
        "zebkit.ui.grid.BaseCaption": {
            "name": "zebkit.ui.grid.BaseCaption",
            "shortname": "zebkit.ui.grid.BaseCaption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 29073,
            "description": "Grid caption base UI component class. This class has to be used\nas base to implement grid caption components",
            "extends": "{zebkit.ui.Panel}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "titles",
                    "description": "a caption component titles",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.grid.GridCaption": {
            "name": "zebkit.ui.grid.GridCaption",
            "shortname": "zebkit.ui.grid.GridCaption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 29494,
            "description": "Grid caption class that implements rendered caption.\nRendered means all caption titles, border are painted\nas a number of views.",
            "params": [
                {
                    "name": "titles",
                    "description": "a caption titles. Title can be a string or\na zebkit.ui.View class instance",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "render",
                    "description": "a text render to be used\nto paint grid titles",
                    "type": "zebkit.ui.StringRender|zebkit.ui.TextRender",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.grid.BaseCaption"
        },
        "zebkit.ui.grid.CompGridCaption": {
            "name": "zebkit.ui.grid.CompGridCaption",
            "shortname": "zebkit.ui.grid.CompGridCaption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 29717,
            "description": "Grid caption class that implements component based caption.\nComponent based caption uses other UI component as the\ncaption titles.",
            "params": [
                {
                    "name": "a",
                    "description": "caption titles. Title can be a string or\na zebkit.ui.Panel class instance",
                    "type": "Array"
                }
            ],
            "is_constructor": 1,
            "extends": "zebkit.ui.grid.BaseCaption"
        },
        "zebkit.ui.grid.CompGridCaption.TitlePan": {
            "name": "zebkit.ui.grid.CompGridCaption.TitlePan",
            "shortname": "zebkit.ui.grid.CompGridCaption.TitlePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 29782,
            "description": "Title panel that is designed to be used as CompGridCaption UI component title element.\nThe panel keeps a grid column or row title, a column or row sort indicator. Using the\ncomponent you can have sortable grid columns.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "grid column or row title",
                    "type": "String"
                }
            ]
        },
        "zebkit.ui.grid.Grid": {
            "name": "zebkit.ui.grid.Grid",
            "shortname": "zebkit.ui.grid.Grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 30071,
            "description": "Grid UI component class. The grid component visualizes \"zebkit.data.Matrix\" data model.\nGrid cell visualization can be customized by defining and setting an own view provider.\nGrid component supports cell editing. Every existent UI component can be configured\nas a cell editor by defining an own editor provider.\n\n\n           // create a grid that contains three rows and tree columns\n           var grid  = new zebkit.ui.grid.Grid([\n               [ \"Cell 1.1\", \"Cell 1.2\", \"Cell 1.3\"],\n               [ \"Cell 2.1\", \"Cell 2.2\", \"Cell 2.3\"],\n               [ \"Cell 3.1\", \"Cell 3.2\", \"Cell 3.3\"]\n           ]);\n\n           // add the top caption\n           grid.add(\"top\", new zebkit.ui.grid.GridCaption([\n               \"Caption title 1\", \"Caption title 2\", \"Caption title 3\"\n           ]));\n\n           // set rows size\n           grid.setRowsHeight(45);\n\n\nGrid can have top and left captions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "a matrix model to be visualized with the grid\ncomponent. It can be an instance of zebkit.data.Matrix class or an array that contains\nembedded arrays. Every embedded array is a grid row.",
                    "type": "zebkit.data.Matrix|Array",
                    "optional": true
                },
                {
                    "name": "rows",
                    "description": "a number of rows",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "columns",
                    "description": "a number of columns",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.Panel}",
            "uses": [
                "zebkit.ui.grid.Metrics"
            ]
        },
        "zebkit.ui.grid.GridStretchPan": {
            "name": "zebkit.ui.grid.GridStretchPan",
            "shortname": "zebkit.ui.grid.GridStretchPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 31947,
            "description": "Special UI panel that manages to stretch grid columns to occupy the whole panel space.\n\n\n           ...\n\n           var canvas = new zebkit.ui.zCanvas();\n           var grid = new zebkit.ui.grid.Grid(100,10);\n           var pan  = new zebkit.ui.grid.GridStretchPan(grid);\n\n           canvas.root.setLayout(new zebkit.layout.BorderLayout());\n           canvas.root.add(\"center\", pan);\n\n           ...",
            "is_constructor": 1,
            "params": [
                {
                    "name": "grid",
                    "description": "a grid component that has to be added in the panel",
                    "type": "zebkit.ui.grid.Grid"
                }
            ],
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.design": {
            "name": "zebkit.ui.design",
            "shortname": "zebkit.ui.design",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 32166,
            "description": "The package contains number of UI components that can be helpful to\nmake visual control of an UI component size and location",
            "access": "package"
        },
        "zebkit.ui.design.ShaperBorder": {
            "name": "zebkit.ui.design.ShaperBorder",
            "shortname": "zebkit.ui.design.ShaperBorder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 32185,
            "description": "A designer border view. The border view visually indicates areas\nof border with different size possibilities.",
            "is_constructor": 1,
            "extends": "{zebkit.ui.View}"
        },
        "zebkit.ui.design.ShaperPan": {
            "name": "zebkit.ui.design.ShaperPan",
            "shortname": "zebkit.ui.design.ShaperPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 32274,
            "description": "This is UI component class that implements possibility to embeds another\nUI components to control the component size and location visually.\n\n           // create canvas\n           var canvas = new zebkit.ui.zCanvas(300,300);\n\n           // create two UI components\n           var lab = new zebkit.ui.Label(\"Label\");\n           var but = new zebkit.ui.Button(\"Button\");\n\n           // add created before label component as target of the shaper\n           // component and than add the shaper component into root panel\n           canvas.root.add(new zebkit.ui.design.ShaperPan(lab).properties({\n               bounds: [ 30,30,100,40]\n           }));\n\n           // add created before button component as target of the shaper\n           // component and than add the shaper component into root panel\n           canvas.root.add(new zebkit.ui.design.ShaperPan(but).properties({\n               bounds: [ 130,130,100,50]\n           }));",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Panel}",
            "params": [
                {
                    "name": "target",
                    "description": "a target UI component whose size and location\nhas to be controlled",
                    "type": "zebkit.ui.Panel"
                }
            ]
        },
        "zebkit.ui.design.FormTreeModel": {
            "name": "zebkit.ui.design.FormTreeModel",
            "shortname": "zebkit.ui.design.FormTreeModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 32500,
            "description": "Special tree model implementation that represent zebkit UI component\nhierarchy as a simple tree model.",
            "params": [
                {
                    "name": "target",
                    "description": "a root UI component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebkit.data.TreeModel}"
        },
        "zebkit.ui.ClipboardSupport": {
            "name": "zebkit.ui.ClipboardSupport",
            "shortname": "zebkit.ui.ClipboardSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 33011,
            "description": "Clipboard support class. The class is light abstraction that helps to perform\ntextual data exchange via system (browser) clipboard. Browsers have different approaches\nand features regarding clipboard implementation and clipboard API. This class\nhides the native specific and provides simple way to exchange data via clipboard.",
            "params": [
                {
                    "name": "triggerKeyCode",
                    "description": "a key code that starts triggering clipboard copy\npaste actions. It depends on platform. On Linux \"Control\" + <xxx> combination\nshould be used, but on Mac OSX \"MetaLeft\" + xxx.\nTo handle copy, paste and cut event override the following methods:\n   - **copy**   \"clipCopy(focusOwnerComponent, data)\"\n   - **paste**  \"clipPaste(focusOwnerComponent, data)\"\n   - **cut**    \"clipCut(focusOwnerComponent, data)\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebkit.web.MouseWheelSupport": {
            "name": "zebkit.web.MouseWheelSupport",
            "shortname": "zebkit.web.MouseWheelSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 34055,
            "description": "Mouse wheel support class. Installs necessary mouse wheel listeners and handles mouse wheel\nevents in zebkit UI. The mouse wheel support is plugging that is configured by a JSON\nconfiguration.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "DOMElement"
                },
                {
                    "name": "destination",
                    "description": "",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "zebkit.ui.KeyEventUninfier": {
            "name": "zebkit.ui.KeyEventUninfier",
            "shortname": "zebkit.ui.KeyEventUninfier",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 34381,
            "description": "Class that is responsible for translating native DOM element key event into abstract event that further\ncan be transfered to zebkit UI engine (or any other destination). Browsers key events support can be\nimplemented with slight differences from the standards. The goal of the class is key events unification.\nThe class fires three types of key events to passed event destination code:\n   - $keyPressed(e)\n   - $keyReleased(e)\n   - $keyTyped(e)\n\nFor instance imagine we have a DOM Element and want to have identical sequence and parameters of key\nevents the DOM element triggers. It can be done as follow:\n\n     new KeyEventUnifier(domElement, {\n         \"$keyPressed\" : function(e) {\n             ...\n         },\n\n         \"$keyReleased\" : function(e) {\n             ...\n         },\n\n         \"$keyTyped\" : function(e) {\n             ...\n         }\n     });",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "destination",
                    "description": "a destination listener that can listen",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "zebkit.ui.CursorManager": {
            "name": "zebkit.ui.CursorManager",
            "shortname": "zebkit.ui.CursorManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 34637,
            "description": "Cursor manager class. Allows developers to control pointer cursor type by implementing an own\ngetCursorType method or by specifying a cursor by cursorType field. Imagine an UI component\nneeds to change cursor type. It\n can be done by one of the following way:\n\n       - **Implement getCursorType method by the component itself if the cursor type depends on cursor location**\n\n             var p = new zebkit.ui.Panel([\n                  // implement getCursorType method to set required\n                  // pointer cursor type\n                  function getCursorType(target, x, y) {\n                      return zebkit.ui.Cursor.WAIT;\n                  }\n             ]);\n\n       - **Define \"cursorType\" property in component if the cursor type doesn't depend on cursor location **\n\n             var myPanel = new zebkit.ui.Panel();\n             ...\n             myPanel.cursorType = zebkit.ui.Cursor.WAIT;",
            "is_constructor": 1,
            "extends": "{zebkit.ui.Manager}"
        },
        "zebkit.ui.HtmlElement": {
            "name": "zebkit.ui.HtmlElement",
            "shortname": "zebkit.ui.HtmlElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 34739,
            "description": "HTML element UI component wrapper class. The class represents an HTML element as if it is standard\nUI component. It helps to use some standard HTML element as zebkit UI components and embeds it\nin zebkit UI application layout.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "an HTML element to be represented as a standard zebkit UI\ncomponent. If the passed parameter is string it denotes a name of an HTML element. In this case\na new HTML element will be created.",
                    "type": "String|HTMLElement",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.Panel}"
        },
        "zebkit.ui.HtmlElementMan": {
            "name": "zebkit.ui.HtmlElementMan",
            "shortname": "zebkit.ui.HtmlElementMan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 35255,
            "description": "This special private manager that plays key role in integration of HTML ELement into zebkit UI hierarchy.\nDescription to the class contains technical details of implementation that should not be interested for\nend users.\n\nHTML element integrated into zebkit layout has to be tracked regarding:\n  1) DOM hierarchy. A new added into zebkit layout DOM element has to be attached to the first found\n     parent DOM element\n  2) Visibility. If a zebkit UI component change its visibility state it has to have side effect to all\n     children HTML elements on any subsequent hierarchy level\n  3) Moving a zebkit UI component has to correct location of children HTML element on any subsequent\n     hierarchy level.\n\nThe implementation of HTML element component has the following specific:\n  1) Every original HTML is wrapped with \"div\" element. It is necessary since not all HTML element has been\n     designed to be a container for another HTML element. By adding extra div we can consider the wrapper as\n     container. The wrapper element is used to control visibility, location, enabled state\n  2) HTML element has \"isDOMElement\" property set to true\n  3) HTML element visibility depends on an ancestor component visibility. HTML element is visible if:\n     - the element isVisible property is true\n     - the element has a parent DOM element set\n     - all his ancestors are visible\n     - size of element is more than zero\n     - getCanvas() != null\n\nThe visibility state is controlled with \"e.style.visibility\"\n\nTo support effective DOM hierarchy tracking a zebkit UI component defines \"$domKid\" property that contains\ndirect DOM element the UI component hosts and other UI components that host DOM element. This is sort of tree:\n\n<pre>\n  +---------------------------------------------------------\n  |  p1 (zebkit component)\n  |   +--------------------------------------------------\n  |   |  p2 (zebkit component)\n  |   |    +---------+      +-----------------------+\n  |   |    |   h1    |      | p3 zebkit component   |\n  |   |    +---------+      |  +---------------+    |\n  |   |                     |  |    h3         |    |\n  |   |    +---------+      |  |  +---------+  |    |\n  |   |    |   h2    |      |  |  |   p4    |  |    |\n  |   |    +---------+      |  |  +---------+  |    |\n  |   |                     |  +---------------+    |\n  |   |                     +-----------------------+\n\n   p1.$domKids : {\n       p2.$domKids : {\n           h1,    * leaf elements are always DOM element\n           h2,\n           p3.$domKids : {\n              h3\n           }\n       }\n   }\n </pre>",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "zebkit.ui.HtmlCanvas": {
            "name": "zebkit.ui.HtmlCanvas",
            "shortname": "zebkit.ui.HtmlCanvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 35645,
            "description": "HTML Canvas native DOM element wrapper.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "e",
                    "description": "HTML canvas element to be wrapped as a zebkit UI component or nothing to creete\na new canvas element",
                    "type": "HTMLCanvas",
                    "optional": true
                }
            ],
            "extends": "{zebkit.ui.HtmlElement}"
        },
        "zebkit.ui.HtmlWinCanvas": {
            "name": "zebkit.ui.HtmlWinCanvas",
            "shortname": "zebkit.ui.HtmlWinCanvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 35907,
            "description": "Class that wrapped window component with own HTML Canvas",
            "params": [
                {
                    "name": "target",
                    "description": "a window component. If target is not defined it will be instantiated\nautomatically",
                    "type": "zebkit.ui.Window"
                }
            ],
            "is_constructor": 1
        },
        "zebkit.ui.html": {
            "name": "zebkit.ui.html",
            "shortname": "zebkit.ui.html",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 35946,
            "description": "WEB based HTML components wrapped with as zebkit components.",
            "access": "package"
        },
        "zebkit.ui.html.HtmlTextInput": {
            "name": "zebkit.ui.html.HtmlTextInput",
            "shortname": "zebkit.ui.html.HtmlTextInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 35959,
            "description": "HTML input element wrapper class. The class can be used as basis class\nto wrap HTML elements that can be used to enter a textual information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "a text the text input component has to be filled with",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "an input element name",
                    "type": "String"
                }
            ],
            "extends": "zebkit.ui.HtmlElement"
        },
        "zebkit.ui.html.HtmlTextField": {
            "name": "zebkit.ui.html.HtmlTextField",
            "shortname": "zebkit.ui.html.HtmlTextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 36004,
            "description": "HTML input text element wrapper class. The class wraps standard HTML text field\nand represents it as zebkit UI component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "a text the text field component has to be filled with",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.html.HtmlTextInput"
        },
        "zebkit.ui.html.HtmlTextArea": {
            "name": "zebkit.ui.html.HtmlTextArea",
            "shortname": "zebkit.ui.html.HtmlTextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 36019,
            "description": "HTML input textarea element wrapper class. The class wraps standard HTML textarea\nelement and represents it as zebkit UI component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "a text the text area component has to be filled with",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebkit.ui.html.HtmlTextInput"
        },
        "zebkit.ui.html.HtmlLink": {
            "name": "zebkit.ui.html.HtmlLink",
            "shortname": "zebkit.ui.html.HtmlLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 36038,
            "description": "HTML Link component",
            "params": [
                {
                    "name": "text",
                    "description": "a text of link",
                    "type": "String"
                },
                {
                    "name": "href",
                    "description": "an href of the link",
                    "type": "String"
                }
            ],
            "extends": "zebkit.ui.HtmlElement"
        },
        "zebkit.ui.RootLayer": {
            "name": "zebkit.ui.RootLayer",
            "shortname": "zebkit.ui.RootLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 36063,
            "description": "Root layer implementation. This is the simplest UI layer implementation where the layer always\ntry grabbing all input event",
            "is_constructor": 1,
            "extends": "{zebkit.ui.HtmlCanvas}"
        },
        "zebkit.ui.zCanvas": {
            "name": "zebkit.ui.zCanvas",
            "shortname": "zebkit.ui.zCanvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 36125,
            "description": "zCanvas zebkit UI component class. This is starting point for building zebkit UI. The class is a wrapper\nfor HTML5 Canvas element. The main goals of the class is catching all native HTML5 Canvas element  events\nand translating its into Zebkit UI events.\n\nzCanvas instantiation can trigger a new HTML Canvas will be created and added to HTML DOM tree.\nIt happens if developer doesn't pass an HTML Canvas element reference or an ID of existing HTML\nCanvas element. To re-use an existent in DOM tree HTML5 canvas element pass an id of the canvas\nelement:\n\n          // a new HTML canvas element is created and added into HTML DOM tree\n          var canvas = zebkit.ui.zCanvas();\n\n          // a new HTML canvas element is created into HTML DOM tree\n          var canvas = zebkit.ui.zCanvas(400,500);  // pass canvas size\n\n          // stick to existent HTML canvas element\n          var canvas = zebkit.ui.zCanvas(\"ExistentCanvasID\");\n\nzCanvas has layered structure. Every layer is responsible for showing and controlling a dedicated\ntype of UI elements like windows pop-up menus, tool tips and so on. To start building UI use root layer.\nThe layer is standard zebkit UI panel that is accessible via \"root\" zCanvas field:\n\n          // create canvas\n          var canvas = zebkit.ui.zCanvas(400,500);\n\n          // save reference to canvas root layer where\n          // hierarchy of UI components have to be hosted\n          var root = canvas.root;\n\n          // fill root with UI components\n          var label = new zebkit.ui.Label(\"Label\");\n          label.setBounds(10,10,100,50);\n          root.add(label);",
            "extends": "{zebkit.ui.HtmlCanvas}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "an ID of a HTML canvas element or reference to an HTML Canvas element.",
                    "type": "String|Canvas",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "a width of an HTML canvas element",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "a height of an HTML canvas element",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        "zebkit.ui.web.VideoPan": {
            "name": "zebkit.ui.web.VideoPan",
            "shortname": "zebkit.ui.web.VideoPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/zebkit.js",
            "line": 36977,
            "description": "Simple video panel that can be used to play a video:\n\n\n           // create canvas, add video panel to the center and\n           // play video\n           var canvas = zebkit.ui.zCanvas(500,500).root.properties({\n               layout: new zebkit.layout.BorderLayout(),\n               center: new zebkit.ui.web.VideoPan(\"trailer.mpg\")\n           });",
            "params": [
                {
                    "name": "url",
                    "description": "an URL to a video",
                    "type": "String"
                }
            ],
            "extends": "{zebkit.ui.Panel}",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "build/zebkit.js",
            "line": 207,
            "description": "Loads an image by the given URL.",
            "params": [
                {
                    "name": "img",
                    "description": "an image URL or image object",
                    "type": "String|HTMLImageElement"
                },
                {
                    "name": "ready",
                    "description": "a call back method to be notified when the image has been completely\nloaded or failed. The method gets three parameters\n\n           - an URL to the image\n           - boolean loading result. true means success\n           - an image that has been loaded",
                    "type": "Function"
                }
            ],
            "example": [
                "\n           // load image\n           zebkit.environment.loadImage(\"test.png\", function(image) {\n                // handle loaded image\n                ...\n           }, function (img, exception) {\n               // handle error\n               ...\n           });"
            ],
            "return": {
                "description": "an image",
                "type": "HTMLImageElement"
            },
            "itemtype": "method",
            "name": "loadImage",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 304,
            "description": "Request to run a method as an animation task.",
            "params": [
                {
                    "name": "f",
                    "description": "the task body method",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "animate",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 542,
            "description": "Append the given parameters to a query string of the specified URL",
            "params": [
                {
                    "name": "obj",
                    "description": "a dictionary of parameters to be appended to\nthe URL query string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "appendQS",
            "class": "zebkit.URI"
        },
        {
            "file": "build/zebkit.js",
            "line": 563,
            "description": "Test if the given url is absolute",
            "params": [
                {
                    "name": "u",
                    "description": "an URL",
                    "type": "String|zebkit.URL"
                }
            ],
            "return": {
                "description": "true if the URL is absolute",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isAbsolute",
            "static": 1,
            "class": "zebkit.URI"
        },
        {
            "file": "build/zebkit.js",
            "line": 578,
            "description": "Fetch and parse query string of the given URL",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a parsed query string as a dictionary of parameters",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "parseQS",
            "static": 1,
            "class": "zebkit.URI"
        },
        {
            "file": "build/zebkit.js",
            "line": 600,
            "description": "Convert the given dictionary of parameters to a query string.",
            "params": [
                {
                    "name": "obj",
                    "description": "a dictionary of parameters",
                    "type": "Object"
                },
                {
                    "name": "encode",
                    "description": "say if the parameters values have to be\nencoded",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a query string built from parameters list",
                "type": "String"
            },
            "static": 1,
            "itemtype": "method",
            "name": "toQS",
            "class": "zebkit.URI"
        },
        {
            "file": "build/zebkit.js",
            "line": 625,
            "description": "Join the given relative path to the URL. If the passed path starts from \"/\" character\nit will be joined without taking in account the URL path",
            "params": [
                {
                    "name": "p",
                    "description": "a relative paths",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "an absolute URL",
                "type": "String"
            },
            "itemtype": "method",
            "name": "join",
            "class": "zebkit.URI"
        },
        {
            "file": "build/zebkit.js",
            "line": 732,
            "description": "Run the given method as one of the sequential step of the runner execution.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "body",
                    "description": "a method to be executed. The method can get results of previous step\nexecution as its arguments. The method is called in context of instance of a Do.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "zebkit.DoIt"
        },
        {
            "file": "build/zebkit.js",
            "line": 863,
            "description": "Fire error if something goes wrong.",
            "params": [
                {
                    "name": "e",
                    "description": "an error",
                    "type": "Error"
                }
            ],
            "itemtype": "method",
            "name": "error",
            "class": "zebkit.DoIt"
        },
        {
            "file": "build/zebkit.js",
            "line": 894,
            "description": "Wait before the given runner can be called",
            "params": [
                {
                    "name": "r",
                    "description": "a runner",
                    "type": "zebkit.DoIt"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "wait",
            "class": "zebkit.DoIt"
        },
        {
            "file": "build/zebkit.js",
            "line": 929,
            "description": "Returns join callback for asynchronous parts of the runner. The callback\nhas to be requested and called by\nan asynchronous method to inform the runner the given method is completed.",
            "return": {
                "description": "a method to notify runner the given asynchronous part\nhas been completed. The passed\nto the method arguments will be passed to the next step of the runner.",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "join",
            "class": "zebkit.DoIt"
        },
        {
            "file": "build/zebkit.js",
            "line": 1002,
            "description": "Method to catch error that has occurred during the runner sequence execution.",
            "params": [
                {
                    "name": "callback",
                    "description": "a callback to handle the error. The method gets an error\nthat has happened as its argument",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "catch",
            "class": "zebkit.DoIt"
        },
        {
            "file": "build/zebkit.js",
            "line": 1222,
            "description": "URL the package has been loaded",
            "itemtype": "attribute",
            "name": "$url",
            "readonly": "",
            "type": "{zebkit.URL}",
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1230,
            "description": "Name of the package",
            "itemtype": "attribute",
            "name": "$name",
            "readonly": "",
            "type": "{String}",
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1240,
            "description": "Reference to parent package",
            "itemtype": "attribute",
            "name": "$parent",
            "type": "{Package}",
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1263,
            "description": "Get full name of the package. Full name includes not the only the given\npackage name, but also all parent packages separated with \".\" character.",
            "return": {
                "description": "a full package name",
                "type": "String"
            },
            "itemtype": "method",
            "name": "fullname",
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1278,
            "description": "Convert file like path to package relatively to the given package.",
            "return": {
                "description": "path a path",
                "type": "String"
            },
            "itemtype": "method",
            "name": "cd",
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1307,
            "description": "List the package sub-packages.",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function that gets a sub-package name and the\nsub-package itself as its arguments",
                    "type": "Function"
                },
                {
                    "name": "recursively",
                    "description": "indicates if sub-packages have to be traversed recursively",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "packages",
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1332,
            "description": "Build import JS code string that can be evaluated in a local space to make visible\nthe given package or packages classes, variables and methods.",
            "example": [
                "\n\n    (function() {\n        // make visible variables, classes and methods declared in \"zebkit.ui\"\n        // package in the method local space\n        eval(zeblit.import(\"ui\"));\n\n        // use imported from \"zebkit.ui.Button\" class without necessity to specify\n        // full path to it\n        var bt = new Button(\"Ok\");\n    })();"
            ],
            "params": [
                {
                    "name": "pkgname",
                    "description": "names of packages to be imported",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "an import string to be evaluated in a local JS space",
                "type": "String"
            },
            "itemtype": "method",
            "name": "import",
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1373,
            "description": "Method to request sub-package or sub-packages be ready and visible in passed callback or series\nof callback methods. The method guarantees the callbacks be called the time all zebkit data is\nloaded and ready.",
            "params": [
                {
                    "name": "packages",
                    "description": "name or names of sub-packages to make visible\nin callback method",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "callback",
                    "description": "a method or number of methods to be called. The methods are called\nin context of the given package and gets packages passed as first arguments",
                    "type": "Function",
                    "optional": true,
                    "multiple": true
                }
            ],
            "itemtype": "method",
            "name": "require",
            "example": [
                "\n\n    zebkit.require(\"ui\", function(ui) {\n        var b = new ui.Button(\"Ok\");\n        ...\n    });\n"
            ],
            "class": "Package"
        },
        {
            "file": "build/zebkit.js",
            "line": 1495,
            "description": "Method that has to be used to declare package.",
            "params": [
                {
                    "name": "name",
                    "description": "a name of the package",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "a call back method that is called in package context. The method has to\nbe used to populate the given package classes, interfaces and variables.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n    // declare package \"zebkit.log\"\n    zebkit.package(\"log\", function(pkg) {\n        // declare the package class Log\n        pkg.Log = zebkit.Class([\n             function error() { ... },\n             function warn()  { ... },\n             function info()  { ... }\n        ]);\n    });\n\n    // later on you can use the declared package stuff as follow\n    zebkit.require(\"log\", function(log) {\n        var myLog = new log.Log();\n        ...\n        myLog.warn(\"Warning\");\n    });"
            ],
            "return": {
                "description": "a package",
                "type": "Package"
            },
            "itemtype": "method",
            "name": "package",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1680,
            "description": "Unique string hash code.",
            "itemtype": "attribute",
            "name": "$hash$",
            "access": "private",
            "tagname": "",
            "type": "{String}",
            "readonly": "",
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 1689,
            "description": "Dictionary of all inherited interfaces where key is unique interface hash code and the value\nis interface itself.",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "{Object}",
            "itemtype": "attribute",
            "name": "$parents",
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 1777,
            "description": "Check if the given value is string",
            "params": [
                {
                    "name": "v",
                    "description": "a value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the given value is string",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isString",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1786,
            "description": "Check if the given value is number",
            "params": [
                {
                    "name": "v",
                    "description": "a value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the given value is number",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isNumber",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1795,
            "description": "Check if the given value is boolean",
            "params": [
                {
                    "name": "v",
                    "description": "a value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the given value is boolean",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isBoolean",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1804,
            "description": "Reference to global space.",
            "itemtype": "attribute",
            "name": "$global",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "{Object}",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1880,
            "description": "Clone the given object",
            "params": [
                {
                    "name": "obj",
                    "description": "an object to be cloned",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a cloned object",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "clone",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1947,
            "description": "Instantiate a new class instance of the given class with the specified constructor\narguments.",
            "params": [
                {
                    "name": "clazz",
                    "description": "a class",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "an arguments list",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new instance of the given class initialized with the specified arguments",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "newInstance",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1967,
            "description": "Get a property setter method if it is declared with the class of the specified object for the\ngiven property. Setter is a method whose name matches the following pattern: \"set<PropertyName>\"\nwhere the first letter of the property name is in upper case. For instance setter method for\nproperty \"color\" has to have name \"setColor\".",
            "params": [
                {
                    "name": "obj",
                    "description": "an object instance",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "a property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a method that can be used as a setter for the given property",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "getPropertySetter",
            "access": "protected",
            "tagname": "",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 1993,
            "description": "Populate the given target object with the properties set. The properties set\nis a dictionary that keeps properties names and its corresponding values.\nThe method detects if a property setter method exits and call it to apply\nthe property value. Otherwise property is initialized as a field. Setter\nmethod is a method that matches \"set<PropertyName>\" pattern.",
            "params": [
                {
                    "name": "target",
                    "description": "a target object",
                    "type": "Object"
                },
                {
                    "name": "p",
                    "description": "a properties set",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an object with the populated properties set.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "properties",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 2458,
            "description": "Reference to a parent class",
            "itemtype": "attribute",
            "name": "$parent",
            "type": "{zebkit.Class}",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 2481,
            "description": "Extend existent class instance with the given methods and interfaces\nFor example:\n\n               var A = zebkit.Class([ // declare class A that defines one \"a\" method\n                   function a() {\n                       console.log(\"A:a()\");\n                   }\n               ]);\n\n               var a = new A();\n               a.a();  // show \"A:a()\" message\n\n               A.a.extend([\n                   function b() {\n                       console.log(\"EA:b()\");\n                   },\n\n                   function a() {   // redefine \"a\" method\n                       console.log(\"EA:a()\");\n                   }\n               ]);\n\n               a.b(); // show \"EA:b()\" message\n               a.a(); // show \"EA:a()\" message",
            "params": [
                {
                    "name": "interfaces",
                    "description": "interfaces to be implemented with the\nclass instance",
                    "type": "zebkit.Interface",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "methods",
                    "description": "list of methods the class instance has to be extended\nwith",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "extend",
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 2568,
            "description": "Call super method implementation.",
            "params": [
                {
                    "name": "superMethod",
                    "description": "? optional parameter that should be a method of the class instance\nthat has to be called",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "args",
                    "description": "arguments list to pass the executed method",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "return what super method returns",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "$super",
            "example": [
                "\n\n   var A = zebkit.Class([\n       function a(p) { return 10 + p; }\n   ]);\n\n   var B = zebkit.Class(A, [\n       function a(p) {\n           return this.$super(p) * 10;\n       }\n   ]);\n\n   var b = new B();\n   b.a(10) // return 200"
            ],
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 2647,
            "description": "Get a first super implementation of the given method in parent classes hierarchy.",
            "params": [
                {
                    "name": "name",
                    "description": "a name of the method",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a super method implementation",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "$getSuper",
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 2707,
            "description": "The instance class.",
            "itemtype": "attribute",
            "name": "clazz",
            "type": "{zebkit.Class}",
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 2873,
            "description": "Get an object by the given key from cache (and cached it if necessary)",
            "params": [
                {
                    "name": "key",
                    "description": "a key to an object. The key is hierarchical reference starting with the global\nname space as root. For instance \"test.a\" key will fetch $global.test.a object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an object",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$cache",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 2932,
            "description": "Get class by the given class name",
            "params": [
                {
                    "name": "name",
                    "description": "a class name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a class. Throws exception if the class cannot be\nresolved by the given class name",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "forName",
            "throws": {
                "description": "Error"
            },
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 2945,
            "description": "Create an instance of the class",
            "params": [
                {
                    "name": "name",
                    "description": "arguments to be passed to the class constructor",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "an instance of the class.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "newInstance",
            "class": "zebkit.Class"
        },
        {
            "file": "build/zebkit.js",
            "line": 2956,
            "description": "Test if the given object is instance of the specified class or interface. It is preferable\nto use this method instead of JavaScript \"instanceof\" operator whenever you are dealing with\nzebkit classes and interfaces.",
            "params": [
                {
                    "name": "obj",
                    "description": "an object to be evaluated",
                    "type": "Object"
                },
                {
                    "name": "clazz",
                    "description": "a class or interface",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "true if a passed object is instance of the given class or interface",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "instanceOf",
            "class": "zebkit"
        },
        {
            "file": "build/zebkit.js",
            "line": 3177,
            "description": "Validate the specified value to be equal one of the given values",
            "params": [
                {
                    "name": "value",
                    "description": "a value to be validated",
                    "type": "Value"
                },
                {
                    "name": "value",
                    "description": "a number of valid values to test against",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ],
            "throws": {
                "description": "Error if the value doesn't match any valid value"
            },
            "itemtype": "method",
            "name": "$validateValue",
            "example": [
                "\n     // test if the alignment is equal one of the possible values\n     // throws error otherwise\n     zebkit.util.$validateValue(alignment, \"top\", \"left\", \"right\", \"bottom\");"
            ],
            "access": "protected",
            "tagname": "",
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 3290,
            "description": "Source of an event",
            "itemtype": "attribute",
            "name": "source",
            "type": "{Object}",
            "default": "null",
            "readonly": "",
            "class": "zebkit.util.Event"
        },
        {
            "file": "build/zebkit.js",
            "line": 3301,
            "description": "Finds an item by xpath-like simplified expression applied to a tree-like structure. Passed tree-like structure\ndoesn't have a special requirements except items of the structure have to define its kids by exposing \"kids\"\nfield. The field is array of children elements:\n\n          var treeLikeRoot = {\n              value : \"Root\",\n              kids : [\n                  { value: \"Item 1\" },\n                  { value: \"Item 2\" }\n              ]\n          };\n\n          zebkit.util.findInTree(treeLikeRoot,\n                                \"/item1\",\n                                function(foundElement) {\n                                   ...\n                                   // true means stop lookup\n                                   return true;\n                                },\n                                function(item, fragment) {\n                                    return item.value === fragment;\n                                });\n\n\n The find method traverse the tree-like structure according to the xpath-like expression. To understand if\n the given tree item confronts with the currently traversing path fragment a special equality method has\n to be passed. The method gets the traversing tree item, a string path fragment and has to decide if the\n given tree item complies the specified path fragment.",
            "params": [
                {
                    "name": "root",
                    "description": "a tree root element. If the element has a children elements the children have to\n be stored in  \"kids\" field as an array.",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "a path-like expression. The path has to satisfy number of requirements:\n\n      - has to start from \".\" or \"/\" or \"//\" characters\n      - has to define path part after \"/\" or \"//\"\n      - path part can be either \"*\" or a name\n      - optionally an attribute and its can be defined as \"[@<attr_name>=<attr_value>]\"\n      - attribute value is optional and can be boolean (true or false), integer, null or string value\n      - string attribute value has to be wrapped with single quote\n\n\n For examples:\n\n      - \"//*\" traverse all tree elements\n      - \"//*[@a=10]\" traverse all tree elements that has an attribute \"a\" that equals 10\n      - \"//*[@a]\" traverse all tree elements that has an attribute \"a\" defined\n      - \"/Item1/Item2\" find an element by exact path\n      - \".//\" traverse all tree elements including the root element (element traversing has started)",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "callback function that is called every time a new tree element\n matches the given path fragment. The function has to return true if the tree look up\n has to be interrupted",
                    "type": "Function"
                },
                {
                    "name": "eq",
                    "description": "an equality function. The function gets current evaluated tree element\n and a path fragment against which the tree element has to be evaluated. It is expected the method\n returns boolean value to say if the given passed tree element matches the path fragment.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "findInTree",
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 3463,
            "description": "Provide path search functionality",
            "interface": "zebkit.util.PathSearch",
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 3470,
            "description": "Find all a first children component that satisfies the passed path expression.",
            "params": [
                {
                    "name": "path",
                    "description": "path expression. Path expression is simplified form\nof XPath-like expression:\n\n  - **\"/zebkit.ui.Panel\"**  - find the first child item that has class name equals \"zebkit.ui.Panel\"\n  - **\"/zebkit.ui.Panel[@id='top']\"** - find the first child item that has class name equals \"zebkit.ui.Panel\" and \"id\" property equals \"top\"\n  - **\"//zebkit.ui.Panel\"**  - find recursively the first child item that has class name equals \"zebkit.ui.Panel\"\n  - **\"//~zebkit.ui.Panel\"**  - find recursively the first child item that is an instance of \"zebkit.ui.Panel\" class\n\nShortcuts:\n\n  - **\"#id\"** - find an item by its \"id\" attribute value. This is equivalent of \"//*[@id='a component id property']\" path",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "function that is called every time a new children component has been found.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "find",
            "return": {
                "description": "found children component or null if\nno children component can be found",
                "type": "zebkit.layout.Layoutable"
            },
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 3551,
            "description": "Red color intensity",
            "itemtype": "attribute",
            "name": "r",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.util.rgb"
        },
        {
            "file": "build/zebkit.js",
            "line": 3558,
            "description": "Green color intensity",
            "itemtype": "attribute",
            "name": "g",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.util.rgb"
        },
        {
            "file": "build/zebkit.js",
            "line": 3565,
            "description": "Blue color intensity",
            "itemtype": "attribute",
            "name": "b",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.util.rgb"
        },
        {
            "file": "build/zebkit.js",
            "line": 3572,
            "description": "Alpha",
            "itemtype": "attribute",
            "name": "a",
            "type": "{Float}",
            "readonly": "",
            "class": "zebkit.util.rgb"
        },
        {
            "file": "build/zebkit.js",
            "line": 3620,
            "description": "Indicates if the color is opaque",
            "itemtype": "attribute",
            "name": "isOpaque",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebkit.util.rgb"
        },
        {
            "file": "build/zebkit.js",
            "line": 3634,
            "description": "Black color constant",
            "itemtype": "attribute",
            "name": "black",
            "type": "{zebkit.util.rgb}",
            "static": 1,
            "class": "zebkit.util.rgb"
        },
        {
            "file": "build/zebkit.js",
            "line": 3661,
            "description": "Compute intersection of the two given rectangular areas",
            "params": [
                {
                    "name": "x1",
                    "description": "a x coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y1",
                    "description": "a y coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w1",
                    "description": "a width of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h1",
                    "description": "a height of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "x2",
                    "description": "a x coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y2",
                    "description": "a y coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w2",
                    "description": "a width of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h2",
                    "description": "a height of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "r",
                    "description": "an object to store result\n\n     { x: {Integer}, y:{Integer}, width:{Integer}, height:{Integer} }",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "intersection",
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 3685,
            "description": "Test if two rectangular areas have intersection",
            "params": [
                {
                    "name": "x1",
                    "description": "a x coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y1",
                    "description": "a y coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w1",
                    "description": "a width of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h1",
                    "description": "a height of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "x2",
                    "description": "a x coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y2",
                    "description": "a y coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w2",
                    "description": "a width of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h2",
                    "description": "a height of the first rectangular area",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the given two rectangular areas intersect",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isIntersect",
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 3705,
            "description": "Unite two rectangular areas to one rectangular area.",
            "params": [
                {
                    "name": "x1",
                    "description": "a x coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y1",
                    "description": "a y coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w1",
                    "description": "a width of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h1",
                    "description": "a height of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "x2",
                    "description": "a x coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y2",
                    "description": "a y coordinate of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w2",
                    "description": "a width of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h2",
                    "description": "a height of the first rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "r",
                    "description": "an object to store result\n\n     { x: {Integer}, y:{Integer}, width:{Integer}, height:{Integer} }",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "unite",
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 3735,
            "description": "This method allows to declare a listeners container class for the given\ndedicated event types.\n\n           // create listener container to keep three different events\n           // handlers\n           var MyListenerContainerClass = zebkit.util.ListenersClass(\"event1\",\n                                                                     \"event2\",\n                                                                     \"event3\");\n\n           // instantiate listener class container\n           var listeners = new MyListenerContainerClass();\n\n           // add \"event1\" listener\n           listeners.add(function event1() {\n               ...\n           });\n\n           // add \"event2\" listener\n           listeners.add(function event2() {\n              ...\n           });\n\n           // add listener for both event1 and event2 events\n           listeners.add(function() {\n              ...\n           });\n\n           // and firing event1 to registered handlers\n           listeners.event1(...);\n\n           // and firing event2 to registered handlers\n           listeners.event2(...);",
            "itemtype": "method",
            "name": "ListenersClass",
            "params": [
                {
                    "name": "events",
                    "description": "events types the listeners container has to support",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "a listener container class",
                "type": "zebkit.util.Listener"
            },
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 4071,
            "description": "Add listener",
            "params": [
                {
                    "name": "l",
                    "description": "a listener method or object.",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "a listener that has been registered in the container. The result should\nbe used to un-register the listener",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "add",
            "class": "zebkit.util.Listeners"
        },
        {
            "file": "build/zebkit.js",
            "line": 4080,
            "description": "Remove listener or all registered listeners from the container",
            "params": [
                {
                    "name": "l",
                    "description": "a listener to be removed. If the argument has not been specified\nall registered in the container listeners will be removed",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "zebkit.util.Listeners"
        },
        {
            "file": "build/zebkit.js",
            "line": 4102,
            "description": "Fire when a virtual cursor position has been updated\n\n           position.on(function(src, prevOffset, prevLine, prevCol) {\n               ...\n           });",
            "itemtype": "event",
            "name": "posChanged",
            "params": [
                {
                    "name": "src",
                    "description": "an object that triggers the event",
                    "type": "zebkit.util.Position"
                },
                {
                    "name": "prevOffest",
                    "description": "a previous virtual cursor offset",
                    "type": "Integer"
                },
                {
                    "name": "prevLine",
                    "description": "a previous virtual cursor line",
                    "type": "Integer"
                },
                {
                    "name": "prevCol",
                    "description": "a previous virtual cursor column in the previous line",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4119,
            "description": "Shows if the position object is in valid state.",
            "access": "private",
            "tagname": "",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "isValid",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4127,
            "description": "Current virtual cursor line position",
            "itemtype": "attribute",
            "name": "currentLine",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4134,
            "description": "Current virtual cursor column position",
            "itemtype": "attribute",
            "name": "currentCol",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4141,
            "description": "Current virtual cursor offset",
            "itemtype": "attribute",
            "name": "offset",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4162,
            "description": "Get number of lines to navigate through",
            "return": {
                "description": "a number of lines",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLines",
            "class": "zebkit.util.Position.Metric"
        },
        {
            "file": "build/zebkit.js",
            "line": 4168,
            "description": "Get a number of elements in the given line",
            "params": [
                {
                    "name": "l",
                    "description": "a line index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a number of elements in a line",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLineSize",
            "class": "zebkit.util.Position.Metric"
        },
        {
            "file": "build/zebkit.js",
            "line": 4175,
            "description": "Get a maximal element index (a last element of a last line)",
            "return": {
                "description": "a maximal element index",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getMaxOffset",
            "class": "zebkit.util.Position.Metric"
        },
        {
            "file": "build/zebkit.js",
            "line": 4197,
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4201,
            "description": "Set the specified virtual cursor offsest",
            "params": [
                {
                    "name": "o",
                    "description": "an offset, pass null to set position to indefinite state.\n\n  - if offset is null than offset will set to -1 (undefined state)\n  - if offset is less than zero than offset will be set to zero\n  - if offset is greater or equal to maximal possible offset it will be set to maximal possible offset",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an offset that has been set",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "setOffset",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4242,
            "description": "Seek virtual cursor offset with the given shift",
            "params": [
                {
                    "name": "off",
                    "description": "a shift",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an offset that has been set",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "seek",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4252,
            "description": "Set the virtual cursor line and the given column in the line",
            "params": [
                {
                    "name": "r",
                    "description": "a line",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a column in the line",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRowCol",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4271,
            "description": "Special method to inform the position object that its state has to be adjusted\nbecause of the given portion of data had been inserted .",
            "params": [
                {
                    "name": "off",
                    "description": "an offset the insertion has happened",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a length of the inserted portion",
                    "type": "Integer"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "removed",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4286,
            "description": "Special method to inform the position object that its state has to be adjusted\nbecause of the given portion of data had been removed.",
            "params": [
                {
                    "name": "off",
                    "description": "an offset the removal has happened",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a length of the removed portion",
                    "type": "Integer"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "removed",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4302,
            "description": "Calculate a line and line column by the given offset.",
            "params": [
                {
                    "name": "off",
                    "description": "an offset",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an array that contains a line as the first\nelement and a column in the line as the second element.",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getPointByOffset",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4347,
            "description": "Calculate an offset by the given line and column in the line",
            "params": [
                {
                    "name": "row",
                    "description": "a line",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a column in the line",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an offset",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getOffsetByPoint",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4382,
            "description": "Seek virtual cursor to the next position. How the method has to seek to the next position\nhas to be denoted by one of the following constants:\n\n       - **\"begin\"** seek cursor to the begin of the current line\n       - **\"end\"** seek cursor to the end of the current line\n       - **\"up\"** seek cursor one line up\n       - **\"down\"** seek cursor one line down\n\nIf the current virtual position is not known (-1) the method always sets\nit to the first line, the first column in the line (offset is zero).",
            "params": [
                {
                    "name": "t",
                    "description": "an action the seek has to be done",
                    "type": "Integer"
                },
                {
                    "name": "num",
                    "description": "number of seek actions",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "seekLineTo",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4460,
            "description": "Set position metric. Metric describes how many lines\nand elements in these line the virtual cursor can be navigated",
            "params": [
                {
                    "name": "p",
                    "description": "a position metric",
                    "type": "zebkit.util.Position.Metric"
                }
            ],
            "itemtype": "method",
            "name": "setMetric",
            "class": "zebkit.util.Position"
        },
        {
            "file": "build/zebkit.js",
            "line": 4589,
            "description": "Reference to a tasks set that owns the task",
            "type": "{zebkit.util.TasksSet}",
            "itemtype": "attribute",
            "name": "taskSet",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "zebkit.util.TasksSet.Task"
        },
        {
            "file": "build/zebkit.js",
            "line": 4598,
            "description": "Indicates if the task is executed (active)",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "isStarted",
            "readonly": "",
            "class": "zebkit.util.TasksSet.Task"
        },
        {
            "file": "build/zebkit.js",
            "line": 4611,
            "description": "Shutdown the given task.",
            "return": {
                "description": "true if the task has been stopped",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "shutdown",
            "class": "zebkit.util.TasksSet.Task"
        },
        {
            "file": "build/zebkit.js",
            "line": 4620,
            "description": "Pause the given task.",
            "return": {
                "description": "true if the task has been paused",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "pause",
            "class": "zebkit.util.TasksSet.Task"
        },
        {
            "file": "build/zebkit.js",
            "line": 4637,
            "description": "Resume the given task",
            "params": [
                {
                    "name": "startIn",
                    "description": "a time in milliseconds to resume the task",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if the task has been resumed",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "resume",
            "class": "zebkit.util.TasksSet.Task"
        },
        {
            "file": "build/zebkit.js",
            "line": 4659,
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4663,
            "description": "Interval",
            "itemtype": "attribute",
            "name": "quantum",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "40",
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4672,
            "description": "pid of executed JS interval method callback",
            "itemtype": "attribute",
            "name": "pid",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "-1",
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4681,
            "description": "Number of run in the set tasks",
            "itemtype": "attribute",
            "name": "count",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4690,
            "description": "Shut down all active at the given moment tasks\nbody and the given context.",
            "itemtype": "method",
            "name": "shutdownAll",
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4701,
            "description": "Shutdown the given task",
            "params": [
                {
                    "name": "t",
                    "description": "a task",
                    "type": "zebkit.util.TasksSet.Task"
                }
            ],
            "return": {
                "description": "true if the task has been stopped, false if the task has not been started\nto be stopped",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "shutdown",
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4726,
            "description": "Take a free task from tasks pool and run it once in the specified period of time.",
            "params": [
                {
                    "name": "f",
                    "description": "a task function that has to be executed. The task method gets the task\ncontext as its argument. You can pass an object as the argument if the object has \"run\" method\nimplemented. In this cases \"run\" method will be used as the task body.",
                    "type": "Function|Object"
                },
                {
                    "name": "startIn",
                    "description": "time in milliseconds the task has to be executed in",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "runOnce",
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4738,
            "description": "Take a free task from pool and run it with the specified body and the given context.",
            "params": [
                {
                    "name": "f",
                    "description": "a task function that has to be executed. The task method gets the task\ncontext as its argument. You can pass an object as the argument if the object has \"run\" method\nimplemented. In this cases \"run\" method will be used as the task body.",
                    "type": "Function|Object"
                },
                {
                    "name": "si",
                    "description": "time in milliseconds the task has to be executed",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "ri",
                    "description": "the time in milliseconds the task has to be periodically repeated",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "an allocated task",
                "type": "zebkit.util.Task"
            },
            "example": [
                "\n\n               var tasks = new zebkit.util.TasksSet();\n\n               // execute task\n               var task = tasks.run(function (t) {\n                   // do something\n                   ...\n                   // complete task if necessary\n                   t.shutdown();\n               }, 100, 300);\n\n               // pause task\n               task.pause(1000, 2000);\n\n               ...\n               // resume task in a second\n               task.resume(1000);",
                "\n\n                var tasks = new zebkit.util.TasksSet();\n\n                var a = new zebkit.Dummy([\n                    function run() {\n                       // task body\n                       ...\n                    }\n                ]);\n\n                // execute task\n                var task = tasks.runOnce(a);"
            ],
            "itemtype": "method",
            "name": "run",
            "class": "zebkit.util.TasksSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 4853,
            "description": "Predefined default tasks set.",
            "itemtype": "attribute",
            "name": "tasksSet",
            "type": "{zebkit.util.TasksSet}",
            "class": "zebkit.util"
        },
        {
            "file": "build/zebkit.js",
            "line": 4997,
            "description": "Map of aliases and appropriate classes",
            "itemtype": "attribute",
            "name": "classAliases",
            "access": "protected",
            "tagname": "",
            "type": "{Object}",
            "default": "{}",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5011,
            "description": "Object that keeps loaded and resolved content of a JSON",
            "readonly": "",
            "itemtype": "attribute",
            "name": "root",
            "type": "{Object}",
            "default": "{}",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5020,
            "description": "Original JSON as a JS object",
            "itemtype": "attribute",
            "name": "content",
            "access": "protected",
            "tagname": "",
            "type": "{Object}",
            "default": "null",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5029,
            "description": "The property says if the object introspection is required to try find a setter\nmethod for the given key. For instance if an object is loaded with the\nfollowing JSON:\n\n            {\n               \"color\": \"red\"\n            }\n\nthe introspection will cause bag class to try finding \"setColor(c)\" method in\nthe loaded with the JSON object and call it to set \"red\" property value.",
            "itemtype": "attribute",
            "name": "usePropertySetters",
            "default": "true",
            "type": "{Boolean}",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5046,
            "description": "Get a property value by the given key. The property name can point to embedded fields:\n\n     new zebkit.util.Zson().then(\"my.json\", function(bag) {\n         bag.get(\"a.b.c\");\n     });",
            "params": [
                {
                    "name": "key",
                    "description": "a property key.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a property value",
                "type": "Object"
            },
            "throws": {
                "description": "Error if property cannot be found and it  doesn't start with \"?\""
            },
            "itemtype": "method",
            "name": "get",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5078,
            "description": "Internal implementation of fetching a property value.",
            "params": [
                {
                    "name": "keys",
                    "description": "array of a key path parts",
                    "type": "Array"
                },
                {
                    "name": "root",
                    "description": "an object to start resolving a property value",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "$get",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "a property value or undefined if the property  cannot be fetched from the\nobject",
                "type": "Object"
            },
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5102,
            "description": "Test if the given value has atomic type (String, Number or Boolean).",
            "params": [
                {
                    "name": "v",
                    "description": "a value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the value has atomic type",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "$isAtomic",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5116,
            "description": "Call method.",
            "params": [
                {
                    "name": "name",
                    "description": "a method name",
                    "type": "String"
                },
                {
                    "name": "d",
                    "description": "arguments",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a method execution result",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "callMethod",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5418,
            "description": "Build a value by the given JSON description",
            "params": [
                {
                    "name": "d",
                    "description": "a JSON description",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a value",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "buildValue",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5565,
            "description": "Called every time the given class name has to be transformed into\nthe class object (constructor) reference. The method checks if the given class name\nis alias that is mapped with the bag to a class.",
            "params": [
                {
                    "name": "className",
                    "description": "a class name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a class reference",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "resolveClass",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5579,
            "description": "Adds class aliases",
            "params": [
                {
                    "name": "aliases",
                    "description": "dictionary where key is a class alias that can be referenced from\nJSON and the value is class itself (constructor)",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "addClassAliases",
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5599,
            "description": "Load and parse the given JSON content.",
            "params": [
                {
                    "name": "json",
                    "description": "a JSON content. It can be:\n   - **String**\n      - JSON string\n      - URL to a JSON\n   - **Object** JavaScript object",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "a reference to the runner",
                "type": "zebkit.DoIt"
            },
            "itemtype": "method",
            "name": "then",
            "example": [
                "\n\n    // load JSON in bag from a remote site asynchronously\n    new zebkit.util.Zson().then(\"http://test.com/test.json\", function(bag) {\n            // bag is loaded and ready for use\n            bag.get(\"a.c\");\n        }\n    ).catch(function(error) {\n        // handle error\n        ...\n    });"
            ],
            "class": "zebkit.util.Zson"
        },
        {
            "file": "build/zebkit.js",
            "line": 5701,
            "description": "Generate UUID of the given length",
            "params": [
                {
                    "name": "size",
                    "description": "the generated UUID length. The default size is 16 characters.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "an UUID",
                "type": "String"
            },
            "itemtype": "method",
            "name": "UID",
            "class": "zebkit.io"
        },
        {
            "file": "build/zebkit.js",
            "line": 5715,
            "description": "Encode the given string into base64",
            "params": [
                {
                    "name": "input",
                    "description": "a string to be encoded",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "b64encode",
            "class": "zebkit.io"
        },
        {
            "file": "build/zebkit.js",
            "line": 5756,
            "description": "Decode the base64 encoded string",
            "params": [
                {
                    "name": "input",
                    "description": "base64 encoded string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a string",
                "type": "String"
            },
            "itemtype": "method",
            "name": "b64decode",
            "class": "zebkit.io"
        },
        {
            "file": "build/zebkit.js",
            "line": 5827,
            "description": "Perform HTTP GET request with the given query parameters.",
            "params": [
                {
                    "name": "q",
                    "description": "a dictionary of query parameters",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "an object to get response",
                "type": "zebkit.DoIt"
            },
            "example": [
                "\n\n               // GET request with the number of query parameters\n               var result = zebkit.io.HTTP(\"google.com\").GET({\n                   param1: \"var1\",\n                   param3: \"var2\",\n                   param3: \"var3\"\n               }).then(function(req) {\n                   // handle response\n                   req.responseText;\n               }).catch(function(e)  {\n                   // handle error\n                   ...\n               });"
            ],
            "itemtype": "method",
            "name": "GET",
            "class": "zebkit.io.HTTP"
        },
        {
            "file": "build/zebkit.js",
            "line": 5855,
            "description": "Perform HTTP POST request with the give data to be sent.",
            "params": [
                {
                    "name": "d",
                    "description": "a data to be sent by HTTP POST request.  It can be\neither a parameters set or a string.",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "an object to get response",
                "type": "zebkit.DoIt"
            },
            "example": [
                "\n\n              // asynchronously send POST\n              zebkit.io.HTTP(\"google.com\").POST(\"Hello\").then(function(req) {\n                  // handle HTTP GET response ...\n              }).catch(function(e) {\n                  // handle error ...\n              });\n\nOr you can pass a number of parameters to be sent:\n\n              // send parameters synchronously by HTTP POST request\n              zebkit.io.HTTP(\"google.com\").POST({\n                  param1: \"val1\",\n                  param2: \"val3\",\n                  param3: \"val3\"\n              }).then(function(req) {\n                   // handle HTTP GET response ...\n              }).catch(function(e) {\n                   // handle error ...\n              });"
            ],
            "itemtype": "method",
            "name": "POST",
            "class": "zebkit.io.HTTP"
        },
        {
            "file": "build/zebkit.js",
            "line": 5897,
            "description": "Universal HTTP request method that can be used to generate a HTTP request with\nany HTTP method to the given URL with the given data to be sent asynchronously.",
            "params": [
                {
                    "name": "method",
                    "description": "an HTTP method (GET, POST, DELETE, PUT, etc)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "a data to be sent to the given URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "an object to handle result",
                "type": "zebkit.DoIt"
            },
            "itemtype": "method",
            "name": "SEND",
            "class": "zebkit.io.HTTP"
        },
        {
            "file": "build/zebkit.js",
            "line": 5943,
            "description": "Shortcut method to perform HTTP GET requests.\n\n           zebkit.io.GET(\"http://test.com\").then(function(request) {\n               // handle result ...\n           }).catch(function(e) {\n               // handle error ...\n           });\n\n           var res = zebkit.io.GET(\"http://test.com\", {\n               param1 : \"var1\",\n               param1 : \"var2\",\n               param1 : \"var3\"\n           }).then(function(req) {\n               // handle result ...\n           });",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String|Object"
                },
                {
                    "name": "parameters",
                    "description": "a dictionary of query parameters",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "an object to handle result",
                "type": "zebkit.DoIt"
            },
            "itemtype": "method",
            "name": "GET",
            "class": "zebkit.io"
        },
        {
            "file": "build/zebkit.js",
            "line": 5971,
            "description": "Shortcut method to perform HTTP POST requests.\n\n           zebkit.io.POST(\"http://test.com\", null).then(function(request) {\n               // handle result\n               ...\n           }).catch(function(e) {\n               // handle error ...\n           });\n\n           var res = zebkit.io.POST(\"http://test.com\", {\n               param1 : \"var1\",\n               param1 : \"var2\",\n               param1 : \"var3\"\n           }).then(function(request) {\n               // handle result\n               ...\n           });\n\n           zebkit.io.POST(\"http://test.com\", \"request\").then(function(request) {\n               // handle error\n               ...\n           });",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "a data or form data parameters",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "an object to handle result",
                "type": "zebkit.DoIt"
            },
            "itemtype": "method",
            "name": "POST",
            "class": "zebkit.io"
        },
        {
            "file": "build/zebkit.js",
            "line": 6050,
            "description": "Remote service url",
            "itemtype": "attribute",
            "name": "url",
            "readonly": "",
            "type": "{String}",
            "class": "zebkit.io.Service"
        },
        {
            "file": "build/zebkit.js",
            "line": 6058,
            "description": "Remote service methods names",
            "itemtype": "attribute",
            "name": "methods",
            "readonly": "",
            "type": "{Array}",
            "class": "zebkit.io.Service"
        },
        {
            "file": "build/zebkit.js",
            "line": 6089,
            "description": "Send the given data to the given url and return a response. Callback\nfunction can be passed for asynchronous result handling.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "a data to be send",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a result",
                "type": "zebkit.util."
            },
            "itemtype": "method",
            "name": "send",
            "class": "zebkit.io.Service"
        },
        {
            "file": "build/zebkit.js",
            "line": 6107,
            "description": "Transforms the given remote method execution with the specified parameters\nto service specific protocol.",
            "params": [
                {
                    "name": "name",
                    "description": "a remote method name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "an passed to the remote method arguments",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a remote service specific encoded string",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "encode",
            "class": "zebkit.io.Service"
        },
        {
            "file": "build/zebkit.js",
            "line": 6117,
            "description": "Transforms the given remote method response to a JavaScript\nobject.",
            "params": [
                {
                    "name": "name",
                    "description": "a remote method name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a result of the remote method calling as a JavaScript\nobject",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "decode",
            "class": "zebkit.io.Service"
        },
        {
            "file": "build/zebkit.js",
            "line": 6128,
            "description": "Build invoke method that calls a service method.",
            "params": [
                {
                    "name": "clazz",
                    "description": "a class",
                    "type": "zebkit.Class"
                },
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "service method name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a wrapped method to call RPC method with",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "invoke",
            "static": 1,
            "class": "zebkit.io.Service"
        },
        {
            "file": "build/zebkit.js",
            "line": 6199,
            "description": "Shortcut to call the specified method of a JSON-RPC service.",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "a method name",
                    "type": "String"
                }
            ],
            "static": 1,
            "itemtype": "method",
            "name": "invoke",
            "class": "zebkit.io.JRPC"
        },
        {
            "file": "build/zebkit.js",
            "line": 6362,
            "description": "Shortcut to call the specified method of a XML-RPC service.",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "a method name",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "invoke",
            "static": 1,
            "class": "zebkit.io.XRPC"
        },
        {
            "file": "build/zebkit.js",
            "line": 6402,
            "description": "Get the given string line stored in the model",
            "itemtype": "method",
            "name": "getLine",
            "params": [
                {
                    "name": "line",
                    "description": "a line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a string line",
                "type": "String"
            },
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6409,
            "description": "Get wrapped by the text model original text string",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "an original text",
                "type": "String"
            },
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6415,
            "description": "Get number of lines stored in the text model",
            "itemtype": "method",
            "name": "getLines",
            "return": {
                "description": "a number of lines",
                "type": "Integer"
            },
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6421,
            "description": "Get number of characters stored in the model",
            "itemtype": "method",
            "name": "getTextLength",
            "return": {
                "description": "a number of characters",
                "type": "Integer"
            },
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6427,
            "description": "Write the given string in the text model starting from the specified offset",
            "itemtype": "method",
            "name": "write",
            "params": [
                {
                    "name": "s",
                    "description": "a string to be written into the text model",
                    "type": "String"
                },
                {
                    "name": "offset",
                    "description": "an offset starting from that the passed\nstring has to be written into the text model",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6435,
            "description": "Remove substring from the text model.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "offset",
                    "description": "an offset starting from that a substring\nwill be removed",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a size of a substring to be removed",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6443,
            "description": "Fill the text model with the given text",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "text",
                    "description": "a new text to be set for the text model",
                    "type": "String"
                }
            ],
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6449,
            "description": "Fired when the text model has been updated: a string has been\ninserted or removed\n\n           text.on(function (src, b, off, len, startLine, lines) {\n               ...\n           });",
            "itemtype": "event",
            "name": "textUpdated",
            "params": [
                {
                    "name": "src",
                    "description": "a text model that triggers the event",
                    "type": "zebkit.data.Text"
                },
                {
                    "name": "b",
                    "description": "a flag that is true if a string has been written\nin the text model, false if the model substring has been removed",
                    "type": "Boolean"
                },
                {
                    "name": "off",
                    "description": "an offset starting form that the text update\ntook place",
                    "type": "Integer"
                },
                {
                    "name": "len",
                    "description": "a length of text that has been affected by\nthe text model update",
                    "type": "Integer"
                },
                {
                    "name": "startLine",
                    "description": "a first line that has been affected\nby the text model update",
                    "type": "Integer"
                },
                {
                    "name": "lines",
                    "description": "a number of lines that has been affected\nby the text model update",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.TextModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6486,
            "description": "Array of lines",
            "itemtype": "attribute",
            "name": "lines",
            "type": "{zebkit.data.Text.Line[]}",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "zebkit.data.Text"
        },
        {
            "file": "build/zebkit.js",
            "line": 6510,
            "description": "Text length",
            "itemtype": "attribute",
            "name": "textLength",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.data.Text"
        },
        {
            "file": "build/zebkit.js",
            "line": 6519,
            "description": "Detect line by offset starting from the given line and offset.",
            "params": [
                {
                    "name": "start",
                    "description": "start line",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "startOffset",
                    "description": "start offset of the start line",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "o",
                    "description": "offset to detect line",
                    "type": "Integer"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "calcLineByOffset",
            "return": {
                "description": "an array that consists of two elements: detected line index and its offset",
                "type": "Array"
            },
            "class": "zebkit.data.Text"
        },
        {
            "file": "build/zebkit.js",
            "line": 6543,
            "description": "Calculate an offset in the text the first character of the specified line.",
            "params": [
                {
                    "name": "line",
                    "description": "a line index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an offset",
                "type": "Integer"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "calcLineOffset",
            "class": "zebkit.data.Text"
        },
        {
            "file": "build/zebkit.js",
            "line": 6579,
            "description": "Remove number of text lines starting form the specified line",
            "params": [
                {
                    "name": "start",
                    "description": "a starting line to remove text lines",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a number of lines to be removed. If the\nargument is not passed number equals 1",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "removeLines",
            "class": "zebkit.data.Text"
        },
        {
            "file": "build/zebkit.js",
            "line": 6617,
            "description": "Insert number of lines starting from the given starting line",
            "params": [
                {
                    "name": "startLine",
                    "description": "a starting line to insert lines",
                    "type": "Integer"
                },
                {
                    "name": "lines",
                    "description": "string lines to inserted",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ],
            "itemtype": "method",
            "name": "insertLines",
            "class": "zebkit.data.Text"
        },
        {
            "file": "build/zebkit.js",
            "line": 6748,
            "description": "Maximal text length. -1 means the text is not restricted\nregarding its length.",
            "itemtype": "attribute",
            "name": "maxLen",
            "type": "{Integer}",
            "default": "-1",
            "readonly": "",
            "class": "zebkit.data.SingleLineTxt"
        },
        {
            "file": "build/zebkit.js",
            "line": 6764,
            "description": "Get number of lines stored in the text model. The model\ncan have only one line",
            "itemtype": "method",
            "name": "getLines",
            "return": {
                "description": "a number of lines",
                "type": "Integer"
            },
            "class": "zebkit.data.SingleLineTxt"
        },
        {
            "file": "build/zebkit.js",
            "line": 6849,
            "description": "Set the given maximal length the text can have",
            "itemtype": "method",
            "name": "setMaxLength",
            "params": [
                {
                    "name": "max",
                    "description": "a maximal length of text",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.SingleLineTxt"
        },
        {
            "file": "build/zebkit.js",
            "line": 6861,
            "description": "Validate the given text. This method can be implemented to prevent\ninserting text in text model that doesn't satisfy the given condition.\nFor instance text can allow only numeric.",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "text",
                    "description": "a text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return true if the text is valid otherwise return false",
                "type": "Boolean"
            },
            "class": "zebkit.data.SingleLineTxt"
        },
        {
            "file": "build/zebkit.js",
            "line": 6890,
            "description": "Fired when a new element has been added to the list model\n\n        list.on(\"elementInserted\", function(src, o, i) {\n            ...\n        });",
            "itemtype": "event",
            "name": "elementInserted",
            "params": [
                {
                    "name": "src",
                    "description": "a list model that triggers the event",
                    "type": "zebkit.data.ListModel"
                },
                {
                    "name": "o",
                    "description": "an element that has been added",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "an index at that the new element has been added",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6903,
            "description": "Fired when an element has been removed from the list model\n\n        list.on(\"elementRemoved\", function(src, o, i) {\n            ...\n        });",
            "itemtype": "event",
            "name": "elementRemoved",
            "params": [
                {
                    "name": "src",
                    "description": "a list model that triggers the event",
                    "type": "zebkit.data.ListModel"
                },
                {
                    "name": "o",
                    "description": "an element that has been removed",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "an index at that the element has been removed",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6916,
            "description": "Fired when an element has been re-set\n\n        list.on(\"elementSet\", function(src, o, p, i) {\n            ...\n        });",
            "itemtype": "event",
            "name": "elementSet",
            "params": [
                {
                    "name": "src",
                    "description": "a list model that triggers the event",
                    "type": "zebkit.data.ListModel"
                },
                {
                    "name": "o",
                    "description": "an element that has been set",
                    "type": "Object"
                },
                {
                    "name": "p",
                    "description": "a previous element",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "an index at that the element has been re-set",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6941,
            "description": "Get an item stored at the given location in the list",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "an item location",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a list item",
                "type": "Object"
            },
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6954,
            "description": "Add the given item to the end of the list",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "o",
                    "description": "an item to be added",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6964,
            "description": "Remove all elements from the list model",
            "itemtype": "method",
            "name": "removeAll",
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6973,
            "description": "Remove an element at the given location of the list model",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "i",
                    "description": "a location of an element to be removed from the list",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6984,
            "description": "Remove the given element from the list",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "o",
                    "description": "an element to be removed from the list",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 6995,
            "description": "Insert the given element into the given position of the list",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "i",
                    "description": "a position at which the element has to be inserted into the list",
                    "type": "Integer"
                },
                {
                    "name": "o",
                    "description": "an element to be inserted into the list",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7009,
            "description": "Get number of elements stored in the list",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "a number of element in the list",
                "type": "Integer"
            },
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7018,
            "description": "Set the new element at the given position",
            "itemtype": "method",
            "name": "setAt",
            "params": [
                {
                    "name": "i",
                    "description": "a position",
                    "type": "Integer"
                },
                {
                    "name": "o",
                    "description": "a new element to be set as the list element at the given position",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "previous element that was stored at the given position",
                "type": "Object"
            },
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7035,
            "description": "Check if the element is in the list",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "o",
                    "description": "an element to be checked",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the element is in the list",
                "type": "Boolean"
            },
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7045,
            "description": "Get position the given element is stored in the list",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "o",
                    "description": "an element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the element position. -1 if the element cannot be found in the list",
                "type": "Integer"
            },
            "class": "zebkit.data.ListModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7066,
            "description": "Array of children items of the item element",
            "itemtype": "attribute",
            "name": "kids",
            "type": "{Array}",
            "default": "[]",
            "readonly": "",
            "class": "zebkit.data.Item"
        },
        {
            "file": "build/zebkit.js",
            "line": 7075,
            "description": "Value stored with this item",
            "itemtype": "attribute",
            "name": "value",
            "type": "{Object}",
            "default": "null",
            "readonly": "",
            "class": "zebkit.data.Item"
        },
        {
            "file": "build/zebkit.js",
            "line": 7088,
            "description": "Reference to a parent item",
            "itemtype": "attribute",
            "name": "parent",
            "type": "{zebkit.data.Item}",
            "default": "undefined",
            "readonly": "",
            "class": "zebkit.data.Item"
        },
        {
            "file": "build/zebkit.js",
            "line": 7141,
            "description": "Fired when the tree model item value has been updated.\n\n        tree.on(\"itemModified\", function(src, item, prevValue) {\n            ...\n        });",
            "itemtype": "event",
            "name": "itemModified",
            "params": [
                {
                    "name": "src",
                    "description": "a tree model that triggers the event",
                    "type": "zebkit.data.TreeModel"
                },
                {
                    "name": "item",
                    "description": "an item whose value has been updated",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "prevValue",
                    "description": "a previous value the item has had",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7154,
            "description": "Fired when the tree model item has been removed\n\n        tree.on(\"itemRemoved\", function(src, item) {\n           ...\n        });",
            "itemtype": "event",
            "name": "itemRemoved",
            "params": [
                {
                    "name": "src",
                    "description": "a tree model that triggers the event",
                    "type": "zebkit.data.TreeModel"
                },
                {
                    "name": "item",
                    "description": "an item that has been removed from the tree model",
                    "type": "zebkit.data.Item"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7166,
            "description": "Fired when the tree model item has been inserted into the model)\n\n        tree.on(\"itemInserted\", function(src, item) {{\n           ...\n        });",
            "itemtype": "event",
            "name": "itemInserted",
            "params": [
                {
                    "name": "src",
                    "description": "a tree model that triggers the event",
                    "type": "zebkit.data.TreeModel"
                },
                {
                    "name": "item",
                    "description": "an item that has been inserted into the tree model",
                    "type": "zebkit.data.Item"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7182,
            "description": "Reference to the tree model root item",
            "itemtype": "attribute",
            "name": "root",
            "type": "{zebkit.data.Item}",
            "readonly": "",
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7197,
            "description": "Create tree model item hierarchy by the given JavaScript object.",
            "params": [
                {
                    "name": "r",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a built items hierarchy",
                "type": "zebkit.data.Item"
            },
            "example": [
                "\n\n     // create the following items hierarchy:\n     //  \"Root\"\n     //    +--- \"Kid 1\"\n     //    |      +--- \"Kid 1.1\"\n     //    |      |       +--- \"Kid 1.1.1\"\n     //    |      +--- \"Kid 2.2\"\n     //    +--- \"Kid 2\"\n     //    |        +--- \"Kid 2.1\"\n     //    |        +--- \"Kid 2.2\"\n     //    |        +--- \"Kid 2.3\"\n     //    +--- \"Kid 3\"\n     //\n     var rootItem = zebkit.data.TreeModel.create({\n         value : \"Root\",\n         kids  : [\n             {   value : \"Kid 1\"\n                 kids  : [\n                     {  value: \"Kid 1.1\",\n                        kids : \"Kid 1.1.1\"\n                     },\n                     \"Kid 2.2\"\n                 ]\n             },\n             {   value: \"Kid 2\",\n                 kids : [\"Kid 2.1\", \"Kid 2.2\", \"Kid 2.3\"]\n             },\n             \"Kid 3\"\n         ]\n     });"
            ],
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7247,
            "description": "Find the first tree item (starting from the specified root item) whose value equals the given value.",
            "params": [
                {
                    "name": "root",
                    "description": "a root item of the tree",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "value",
                    "description": "a value to evaluate",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a found tree item",
                "type": "zebkit.data.Item"
            },
            "static": 1,
            "itemtype": "method",
            "name": "findOne",
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7264,
            "description": "Find all items (starting from the specified root item) whose value equals the given value.",
            "params": [
                {
                    "name": "root",
                    "description": "a root item of the tree",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "value",
                    "description": "a value to evaluate",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "a callback method that is called for every tree item whose value matches\nthe specified one. The method gets the found item as its argument. The method can return true\nif the tree traversing has to be interrupted.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a list of all found item whose value matches the specified one. The array is returned\nonly if no callback method has been passed to the method.",
                "type": "Array"
            },
            "example": [
                "\n\n     // create tree items\n     var rootItem = zebkit.data.TreeModel.create({\n         value: \"Root\",\n         kids : [ \"Kid 1\", \"Kid 2\", \"Kid 1\", \"Kid 3\", \"Kid 1\" ]\n     });\n\n     // find all items that have its value set to \"Kid 1\" and return\n     // it as array\n     var items = zebkit.data.TreeModel.find(rootItem, \"Kid 1\");\n\n     // find the first two \"Kid 1\" item in the tree using callback\n     var items = [];\n     zebkit.data.TreeModel.find(rootItem, \"Kid 1\", function(item) {\n         items.push(item);\n\n         // stop the tree traversing as soon as we found two items\n         return items.length > 1;\n     });"
            ],
            "static": 1,
            "itemtype": "method",
            "name": "find",
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7355,
            "description": "Iterate over tree hierarchy starting from its root element",
            "params": [
                {
                    "name": "r",
                    "description": "a root element to start traversing the tree model",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "f",
                    "description": "a callback function that is called for every tree item traversed item.\nThe callback gets tree model and the item as its arguments",
                    "type": "Function"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7371,
            "description": "Update a value of the given tree model item with the new one",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "item",
                    "description": "an item whose value has to be updated",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "v",
                    "description": "a new item value",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7383,
            "description": "Add the new item to the tree model as a children element of the given parent item",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "to",
                    "description": "a parent item to which the new item has to be added",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "an",
                    "description": "item or value of the item to be\nadded to the parent item of the tree model",
                    "type": "Object|zebkit.data.Item"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7394,
            "description": "Insert the new item to the tree model as a children element at the\ngiven position of the parent element",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "to",
                    "description": "a parent item to which the new item\nhas to be inserted",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "an",
                    "description": "item or value of the item to be\ninserted to the parent item",
                    "type": "Object|zebkit.data.Item"
                },
                {
                    "name": "i",
                    "description": "a position the new item has to be inserted into\nthe parent item",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7419,
            "description": "Remove the given item from the tree model",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "an item to be removed from the tree model",
                    "type": "zebkit.data.Item"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7446,
            "description": "Remove all children items from the given item of the tree model",
            "itemtype": "method",
            "name": "removeKids",
            "params": [
                {
                    "name": "item",
                    "description": "an item from that all children items have to be removed",
                    "type": "zebkit.data.Item"
                }
            ],
            "class": "zebkit.data.TreeModel"
        },
        {
            "file": "build/zebkit.js",
            "line": 7495,
            "description": "Fired when the matrix model size (number of rows or columns) is changed.\n\n         matrix.on(\"matrixResized\", function(src, pr, pc) {\n             ...\n         });",
            "itemtype": "event",
            "name": "matrixResized",
            "params": [
                {
                    "name": "src",
                    "description": "a matrix that triggers the event",
                    "type": "zebkit.data.Matrix"
                },
                {
                    "name": "pr",
                    "description": "a previous number of rows",
                    "type": "Integer"
                },
                {
                    "name": "pc",
                    "description": "a previous number of columns",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7508,
            "description": "Fired when the matrix model cell has been updated.\n\n         matrix.on(\"cellModified\", function(src, row, col, old) {\n            ...\n         });",
            "itemtype": "event",
            "name": "cellModified",
            "params": [
                {
                    "name": "src",
                    "description": "a matrix that triggers the event",
                    "type": "zebkit.data.Matrix"
                },
                {
                    "name": "row",
                    "description": "an updated row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "an updated column",
                    "type": "Integer"
                },
                {
                    "name": "old",
                    "description": "a previous cell value",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7522,
            "description": "Fired when the matrix data has been re-ordered.\n\n         matrix.on(\"matrixSorted\", function(src, sortInfo) {\n            ...\n         });",
            "itemtype": "event",
            "name": "matrixSorted",
            "params": [
                {
                    "name": "src",
                    "description": "a matrix that triggers the event",
                    "type": "zebkit.data.Matrix"
                },
                {
                    "name": "sortInfo",
                    "description": "a new data order info. The information\ncontains:\n\n     {\n        func: sortFunction,\n        name: sortFunctionName,\n        col : sortColumn\n     }",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7542,
            "description": "Fired when a row has been inserted into the matrix.\n\n         matrix.on(\"matrixRowInserted\", function(src, rowIndex) {\n            ...\n         });",
            "itemtype": "event",
            "name": "matrixColInserted",
            "params": [
                {
                    "name": "src",
                    "description": "a matrix that triggers the event",
                    "type": "zebkit.data.Matrix"
                },
                {
                    "name": "rowIndex",
                    "description": "a row that has been inserted\ncontains:",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7555,
            "description": "Fired when a column has been inserted into the matrix.\n\n         matrix.on(\"matrixColInserted\", function(src, colIndex) {\n            ...\n         });",
            "itemtype": "event",
            "name": "matrixColInserted",
            "params": [
                {
                    "name": "src",
                    "description": "a matrix that triggers the event",
                    "type": "zebkit.data.Matrix"
                },
                {
                    "name": "colIndex",
                    "description": "a column that has been inserted\ncontains:",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7569,
            "description": "Number of rows in the matrix model",
            "itemtype": "attribute",
            "name": "rows",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7576,
            "description": "Number of columns in the matrix model",
            "itemtype": "attribute",
            "name": "cols",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7583,
            "description": "The multi-dimensional embedded arrays to host matrix data",
            "itemtype": "attribute",
            "name": "objs",
            "type": "{Array}",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7612,
            "description": "Get a matrix model cell value at the specified row and column",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "row",
                    "description": "a cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a cell column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "matrix model cell value",
                "type": "Object"
            },
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7631,
            "description": "Get a matrix model cell value by the specified index",
            "itemtype": "method",
            "name": "geti",
            "params": [
                {
                    "name": "index",
                    "description": "a cell index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "matrix model cell value",
                "type": "Object"
            },
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7641,
            "description": "Set the specified by row and column cell value. If the specified row or column\nis greater than the matrix model has the model size will be adjusted to new one.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "row",
                    "description": "a cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a cell column",
                    "type": "Integer"
                },
                {
                    "name": "obj",
                    "description": "a new cell value",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7666,
            "description": "Set the specified by index cell value. The index identifies cell starting from [0,0]\ncell till [rows,columns]. If the index is greater than size of model the model size\nwill be adjusted to new one.",
            "itemtype": "method",
            "name": "puti",
            "params": [
                {
                    "name": "i",
                    "description": "a cell row",
                    "type": "Integer"
                },
                {
                    "name": "obj",
                    "description": "a new cell value",
                    "type": "Object"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7679,
            "description": "Set the given number of rows and columns the model has to have.",
            "itemtype": "method",
            "name": "setRowsCols",
            "params": [
                {
                    "name": "rows",
                    "description": "a new number of rows",
                    "type": "Integer"
                },
                {
                    "name": "cols",
                    "description": "a new number of columns",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7713,
            "description": "Set the given number of rows the model has to have.",
            "itemtype": "method",
            "name": "setRows",
            "params": [
                {
                    "name": "rows",
                    "description": "a new number of rows",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7722,
            "description": "Set the given number of columns the model has to have.",
            "itemtype": "method",
            "name": "setCols",
            "params": [
                {
                    "name": "cols",
                    "description": "a new number of columns",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7731,
            "description": "Remove specified number of rows from the model starting\nfrom the given row.",
            "itemtype": "method",
            "name": "removeRows",
            "params": [
                {
                    "name": "begrow",
                    "description": "a start row",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of rows to be removed",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7752,
            "description": "Remove specified number of columns from the model starting\nfrom the given column.",
            "itemtype": "method",
            "name": "removeCols",
            "params": [
                {
                    "name": "begcol",
                    "description": "a start column",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of columns to be removed",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7778,
            "description": "Insert the given number of rows at the specified row",
            "params": [
                {
                    "name": "row",
                    "description": "a starting row to insert",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of rows to be added",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "insertRows",
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7805,
            "description": "Insert the given number of columns at the specified column",
            "params": [
                {
                    "name": "col",
                    "description": "a starting column to insert",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of columns to be added",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "insertCols",
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7831,
            "description": "Sort the given column of the matrix model.",
            "params": [
                {
                    "name": "col",
                    "description": "a column to be re-ordered",
                    "type": "Integer"
                },
                {
                    "name": "f",
                    "description": "an optional sort function. The name of the function\nis grabbed to indicate type of the sorting the method does. For instance:\n\"descent\", \"ascent\".",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "sortCol",
            "class": "zebkit.data.Matrix"
        },
        {
            "file": "build/zebkit.js",
            "line": 7874,
            "description": "Find a direct children element for the given children component\nand the specified parent component",
            "params": [
                {
                    "name": "parent",
                    "description": "a parent component",
                    "type": "zebkit.layout.Layoutable"
                },
                {
                    "name": "child",
                    "description": "a children component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a direct children component",
                "type": "zebkit.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "getDirectChild",
            "class": "zebkit.layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 7897,
            "description": "Calculate preferred size of the given component",
            "params": [
                {
                    "name": "t",
                    "description": "a target layoutable component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "calcPreferredSize",
            "class": "zebkit.layout.Layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 7903,
            "description": "Layout children components of the specified layoutable target component",
            "params": [
                {
                    "name": "t",
                    "description": "a target layoutable component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "doLayout",
            "class": "zebkit.layout.Layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 7914,
            "description": "Find a direct component located at the given location of the specified parent component\nand the specified parent component",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate relatively to the parent component",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate relatively to the parent component",
                    "type": "Integer"
                },
                {
                    "name": "parent",
                    "description": "a parent component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "an index of direct children component\nor -1 if no a children component can be found",
                "type": "zebkit.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "getDirectAt",
            "class": "zebkit.layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 7935,
            "description": "Get a top (the highest in component hierarchy) parent component\nof the given component",
            "params": [
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a top parent component",
                "type": "zebkit.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "getTopParent",
            "class": "zebkit.layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 7948,
            "description": "Translate the given relative location into the parent relative location.",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate relatively  to the given component",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "a y coordinate relatively  to the given component",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.layout.Layoutable"
                },
                {
                    "name": "p",
                    "description": "a parent component",
                    "type": "zebkit.layout.Layoutable",
                    "optional": true
                }
            ],
            "return": {
                "description": "a relative to the given parent UI component location:\n\n           { x:{Integer}, y:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toParentOrigin",
            "class": "zebkit.layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 7983,
            "description": "Convert the given component location into relative\nlocation of the specified children component successor.",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate relatively to the given\ncomponent",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate relatively to the given\ncomponent",
                    "type": "Integer"
                },
                {
                    "name": "p",
                    "description": "a component",
                    "type": "zebkit.layout.Layoutable"
                },
                {
                    "name": "c",
                    "description": "a children successor component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a relative location\n\n     { x:{Integer}, y:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toChildOrigin",
            "class": "zebkit.layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 8008,
            "description": "Calculate maximal preferred width and height of\nchildren component of the given target component.",
            "params": [
                {
                    "name": "target",
                    "description": "a target component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a maximal preferred width and height\n\n           { width:{Integer}, height:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getMaxPreferredSize",
            "class": "zebkit.layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 8033,
            "description": "Test if the given parent component is ancestor of the specified component.",
            "params": [
                {
                    "name": "p",
                    "description": "a parent component",
                    "type": "zebkit.layout.Layoutable"
                },
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "true if the given parent is ancestor of the specified component",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isAncestorOf",
            "class": "zebkit.layout"
        },
        {
            "file": "build/zebkit.js",
            "line": 8057,
            "description": "Reference to children components",
            "itemtype": "attribute",
            "name": "kids",
            "type": "{Array}",
            "default": "empty array",
            "readonly": "",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8066,
            "description": "Layout manager that is used to order children layoutable components",
            "itemtype": "attribute",
            "name": "layout",
            "default": "itself",
            "readonly": "",
            "type": "{zebkit.layout.Layout}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8077,
            "description": "x coordinate",
            "itemtype": "attribute",
            "name": "x",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8085,
            "description": "y coordinate",
            "itemtype": "attribute",
            "name": "y",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8093,
            "description": "Width of rectangular area",
            "itemtype": "attribute",
            "name": "width",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8101,
            "description": "Height of rectangular area",
            "itemtype": "attribute",
            "name": "height",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8109,
            "description": "Indicate a layoutable component visibility",
            "itemtype": "attribute",
            "name": "isVisible",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8117,
            "description": "Indicate a layoutable component validity",
            "itemtype": "attribute",
            "name": "isValid",
            "default": "false",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8125,
            "description": "Reference to a parent layoutable component",
            "itemtype": "attribute",
            "name": "parent",
            "default": "null",
            "readonly": "",
            "type": "{zebkit.layout.Layoutable}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8140,
            "description": "The component layout constraints. The constraints is specific to\nthe parent component layout manager value that customizes the\nchildren component layouting on the parent component.",
            "itemtype": "attribute",
            "name": "constraints",
            "default": "null",
            "type": "{Object}",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8162,
            "description": "Set the given id for the component",
            "params": [
                {
                    "name": "id",
                    "description": "an ID to be set",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setId",
            "chainable": 1,
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8173,
            "description": "Apply the given set of properties to the given component or a number of children\ncomponents.\n\n           var c = new zebkit.layout.Layoutable();\n           c.properties({\n               width: [100, 100],\n               location: [10,10],\n               layout: new zebkit.layout.BorderLayout()\n           })\n\n           c.add(new zebkit.layout.Layoutable()).add(zebkit.layout.Layoutable())\n                                                .add(zebkit.layout.Layoutable());\n           c.properties(\"//*\", {\n               size: [100, 200]\n           });",
            "params": [
                {
                    "name": "path",
                    "description": "a path to find children components",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "props",
                    "description": "a dictionary of properties to be applied",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a component itself",
                "type": "zebkit.ui.Layoutable"
            },
            "chainable": 1,
            "itemtype": "method",
            "name": "properties",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8209,
            "description": "Set the given property to the component or children component\nspecified by the given selector",
            "params": [
                {
                    "name": "path",
                    "description": "a path to find children components",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "name",
                    "description": "a property name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "a property value",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "property",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8228,
            "description": "Validate the component metrics. The method is called as a one step of the component validation\nprocedure. The method causes \"recalc\" method execution if the method has been implemented and\nthe component is in invalid state. It is supposed the \"recalc\" method has to be implemented by\na component as safe place where the component metrics can be calculated. Component metrics is\nindividual for the given component properties that has influence to the component preferred\nsize value. In many cases the properties calculation has to be minimized what can be done by\nmoving the calculation in \"recalc\" method",
            "itemtype": "method",
            "name": "validateMetric",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8246,
            "description": "By default there is no any implementation of \"recalc\" method in the layoutable component. In other\nwords the method doesn't exist. Developer should implement the method if the need a proper and\nefficient place  to calculate component properties that have influence to the component preferred\nsize. The \"recalc\" method is called only when it is really necessary to compute the component metrics.",
            "itemtype": "method",
            "name": "recalc",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8255,
            "description": "Invalidate the component layout. Layout invalidation means the component children components have to\nbe placed with the component layout manager. Layout invalidation causes a parent component layout is\nalso invalidated.",
            "itemtype": "method",
            "name": "invalidateLayout",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8267,
            "description": "Invalidate component layout and metrics.",
            "itemtype": "method",
            "name": "invalidate",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8279,
            "description": "Force validation of the component metrics and layout if it is not valid",
            "itemtype": "method",
            "name": "validate",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8301,
            "description": "The method can be implemented to be informed every time the component has completed to layout\nits children components",
            "itemtype": "method",
            "name": "laidout",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8307,
            "description": "Get preferred size. The preferred size includes  top, left, bottom and right paddings and\nthe size the component wants to have",
            "itemtype": "method",
            "name": "getPreferredSize",
            "return": {
                "description": "return size object the component wants to\nhave as the following structure:\n\n            {width:{Integer}, height:{Integer}} object",
                "type": "Object"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8336,
            "description": "Get top padding.",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "top padding in pixel",
                "type": "Integer"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8343,
            "description": "Get left padding.",
            "itemtype": "method",
            "name": "getLeft",
            "return": {
                "description": "left padding in pixel",
                "type": "Integer"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8350,
            "description": "Get bottom padding.",
            "itemtype": "method",
            "name": "getBottom",
            "return": {
                "description": "bottom padding in pixel",
                "type": "Integer"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8357,
            "description": "Get right padding.",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "right padding in pixel",
                "type": "Integer"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8364,
            "description": "Set the parent component.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "a parent component",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "setParent",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8378,
            "description": "Set the given layout manager that is used to place\nchildren component. Layout manager is simple class\nthat defines number of rules concerning the way\nchildren components have to be ordered on its parent\nsurface.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "m",
                    "description": "a layout manager",
                    "type": "zebkit.ui.Layout"
                }
            ],
            "chainable": 1,
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8402,
            "description": "Internal implementation of the component preferred size calculation.",
            "params": [
                {
                    "name": "target",
                    "description": "a component for that the metric has to be calculated",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a preferred size. The method always\nreturns { width:10, height:10 } as the component preferred\nsize",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "calcPreferredSize",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8415,
            "description": "By default layoutbable component itself implements layout manager to order its children\ncomponents. This method implementation does nothing, so children component will placed\naccording locations and sizes they have set.",
            "itemtype": "method",
            "name": "doLayout",
            "access": "private",
            "tagname": "",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8424,
            "description": "Detect index of a children component.",
            "params": [
                {
                    "name": "c",
                    "description": "a children component",
                    "type": "zebkit.ui.Layoutbale"
                }
            ],
            "itemtype": "method",
            "name": "indexOf",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8434,
            "description": "Insert the new children component at the given index with the specified layout constraints.\nThe passed constraints can be set via a layoutable component that is inserted. Just\nset \"constraints\" property of in inserted component.",
            "params": [
                {
                    "name": "i",
                    "description": "an index at that the new children component has to be inserted",
                    "type": "Integer"
                },
                {
                    "name": "constr",
                    "description": "layout constraints of the new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children layoutable component to be added",
                    "type": "zebkit.layout.Layoutbale"
                }
            ],
            "return": {
                "description": "an inserted children layoutable component",
                "type": "zebkit.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "insert",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8460,
            "description": "The method can be implemented to be informed every time a new component\nhas been inserted into the component",
            "params": [
                {
                    "name": "i",
                    "description": "an index at that the new children component has been inserted",
                    "type": "Integer"
                },
                {
                    "name": "constr",
                    "description": "layout constraints of the new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children layoutable component that has\nbeen added",
                    "type": "zebkit.layout.Layoutbale"
                }
            ],
            "itemtype": "method",
            "name": "kidAdded",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8470,
            "description": "Set the layoutable component location. Location is x, y coordinates relatively to\na parent component",
            "params": [
                {
                    "name": "xx",
                    "description": "x coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "yy",
                    "description": "y coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLocation",
            "chainable": 1,
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8490,
            "description": "The method can be implemented to be informed every time the component\nhas been moved",
            "params": [
                {
                    "name": "px",
                    "description": "x previous coordinate of moved children component",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "y previous coordinate of moved children component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "relocated",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8499,
            "description": "Set the layoutable component bounds. Bounds defines the component location and size.",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setBounds",
            "chainable": 1,
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8514,
            "description": "Set the layoutable component size.",
            "params": [
                {
                    "name": "w",
                    "description": "a width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setSize",
            "chainable": 1,
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8534,
            "description": "The method can be implemented to be informed every time the component\nhas been resized",
            "params": [
                {
                    "name": "w",
                    "description": "a previous width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a previous height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "resized",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8542,
            "description": "Get a children layoutable component by the given constraints.",
            "params": [
                {
                    "name": "c",
                    "description": "a constraints",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a children component",
                "type": "zebkit.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "byConstraints",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8574,
            "description": "Set the component constraints without invalidating the component and its parents components\nlayouts and metrics. It is supposed to be used for internal use",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "a constraints",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "$setConstraints",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8587,
            "description": "Remove the given children component.",
            "params": [
                {
                    "name": "c",
                    "description": "a children component to be removed",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "a removed children component",
                "type": "zebkit.layout.Layoutable"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8597,
            "description": "Remove a children component at the specified position.",
            "params": [
                {
                    "name": "i",
                    "description": "a children component index at which it has to be removed",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "removeAt",
            "return": {
                "description": "a removed children component",
                "type": "zebkit.layout.Layoutable"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8617,
            "description": "Remove the component from its parent if it has a parent",
            "itemtype": "method",
            "name": "removeMe",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8628,
            "description": "The method can be implemented to be informed every time a children component\nhas been removed",
            "params": [
                {
                    "name": "i",
                    "description": "a children component index at which it has been removed",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a children component that has been removed",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "kidRemoved",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8636,
            "description": "Set the specified preferred size the component has to have. Component preferred size is\nimportant thing that is widely used to layout the component. Usually the preferred\nsize is calculated by a concrete component basing on its metrics. For instance, label\ncomponent calculates its preferred size basing on text size. But if it is required\nthe component preferred size can be fixed with the desired value.",
            "params": [
                {
                    "name": "w",
                    "description": "a preferred width. Pass \"-1\" as the\nargument value to not set preferred width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a preferred height. Pass \"-1\" as the\nargument value to not set preferred height",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setPreferredSize",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8662,
            "description": "Replace a children component at the specified index\nwith the given new children component",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a children component to be replaced",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "a new children",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a previous component that has\nbeen re-set with the new one",
                "type": "zebkit.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "setAt",
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8678,
            "description": "Add the new children component with the given constraints",
            "params": [
                {
                    "name": "constr",
                    "description": "a constraints of a new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children component to\nbe added",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "add",
            "return": {
                "description": "added layoutable component",
                "type": "zebkit.layout.Layoutable"
            },
            "class": "zebkit.layout.Layoutable"
        },
        {
            "file": "build/zebkit.js",
            "line": 8778,
            "description": "Horizontal gap (space between components)",
            "itemtype": "attribute",
            "name": "hgap",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.BorderLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 8786,
            "description": "Vertical gap (space between components)",
            "itemtype": "attribute",
            "name": "vgap",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.BorderLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 8960,
            "description": "Define if managed with layout manager components have to be sized according to its\npreferred size",
            "itemtype": "attribute",
            "name": "usePsSize",
            "type": "{Boolean}",
            "default": "false",
            "class": "zebkit.layout.RasterLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9097,
            "description": "Gap between laid out components",
            "itemtype": "attribute",
            "name": "gap",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.layout.FlowLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9106,
            "description": "Horizontal laid out components alignment",
            "itemtype": "attribute",
            "name": "ax",
            "readonly": "",
            "type": "{String}",
            "default": "\"left\"",
            "class": "zebkit.layout.FlowLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9115,
            "description": "Vertical laid out components alignment",
            "itemtype": "attribute",
            "name": "ay",
            "readonly": "",
            "type": "{String}",
            "default": "\"center\"",
            "class": "zebkit.layout.FlowLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9124,
            "description": "Laid out components direction",
            "itemtype": "attribute",
            "name": "direction",
            "readonly": "",
            "type": "{String}",
            "default": "\"horizontal\"",
            "class": "zebkit.layout.FlowLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9133,
            "description": "Define if the last added component has to be stretched to occupy\nthe rest of horizontal or vertical space of a parent component.",
            "itemtype": "attribute",
            "name": "stretchLast",
            "type": "{Boolean}",
            "default": "false",
            "class": "zebkit.layout.FlowLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9265,
            "description": "Horizontal list items alignment",
            "itemtype": "attribute",
            "name": "ax",
            "type": "{String}",
            "readonly": "",
            "class": "zebkit.layout.ListLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9273,
            "description": "Pixel gap between list items",
            "itemtype": "attribute",
            "name": "gap",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.layout.ListLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9354,
            "description": "Direction the components have to be placed (vertically or horizontally)",
            "itemtype": "attribute",
            "name": "direction",
            "readonly": "",
            "type": "{String}",
            "default": "\"horizontal\"",
            "class": "zebkit.layout.PercentLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9363,
            "description": "Pixel gap between components",
            "itemtype": "attribute",
            "name": "gap",
            "readonly": "",
            "type": "{Integer}",
            "default": "2",
            "class": "zebkit.layout.PercentLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9372,
            "description": "Boolean flag that say if the laid out components have\nto be stretched vertically (if direction is set to \"vertical\")\nor horizontally (if direction is set to \"horizontal\")",
            "itemtype": "attribute",
            "name": "stretch",
            "readonly": "",
            "type": "{Integer}",
            "default": "true",
            "class": "zebkit.layout.PercentLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9479,
            "description": "Top cell padding",
            "itemtype": "attribute",
            "name": "top",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9486,
            "description": "Left cell padding",
            "itemtype": "attribute",
            "name": "left",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9493,
            "description": "Right cell padding",
            "itemtype": "attribute",
            "name": "right",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9500,
            "description": "Bottom cell padding",
            "itemtype": "attribute",
            "name": "bottom",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9507,
            "description": "Horizontal alignment",
            "itemtype": "attribute",
            "name": "ax",
            "type": "{String}",
            "default": "\"stretch\"",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9514,
            "description": "Vertical alignment",
            "itemtype": "attribute",
            "name": "ay",
            "type": "{String}",
            "default": "\"stretch\"",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9525,
            "description": "Set all four paddings (top, left, bottom, right) to the given value",
            "params": [
                {
                    "name": "p",
                    "description": "a padding",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setPadding",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9532,
            "description": "Set top, left, bottom, right paddings",
            "params": [
                {
                    "name": "t",
                    "description": "a top padding",
                    "type": "Integer"
                },
                {
                    "name": "l",
                    "description": "a left padding",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a bottom padding",
                    "type": "Integer"
                },
                {
                    "name": "r",
                    "description": "a right padding",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setPadding",
            "class": "zebkit.layout.Constraints"
        },
        {
            "file": "build/zebkit.js",
            "line": 9592,
            "description": "Number of virtual rows to place children components",
            "itemtype": "attribute",
            "name": "rows",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9600,
            "description": "Number of virtual columns to place children components",
            "itemtype": "attribute",
            "name": "cols",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9611,
            "description": "Default constraints that is applied for children components\nthat doesn't define own constraints",
            "type": "{zebkit.layout.Constraints}",
            "itemtype": "attribute",
            "name": "constraints",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9626,
            "description": "Set default grid layout cell paddings (top, left, bottom, right) to the given value",
            "params": [
                {
                    "name": "p",
                    "description": "a padding",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setPadding",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9633,
            "description": "Set default grid layout cell paddings: top, left, bottom, right",
            "params": [
                {
                    "name": "t",
                    "description": "a top padding",
                    "type": "Integer"
                },
                {
                    "name": "l",
                    "description": "a left padding",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a bottom padding",
                    "type": "Integer"
                },
                {
                    "name": "r",
                    "description": "a right padding",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setPadding",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9647,
            "description": "Set default constraints.",
            "itemtype": "method",
            "name": "setDefaultConstraints",
            "chainable": 1,
            "params": [
                {
                    "name": "c",
                    "description": "a constraints",
                    "type": "zebkit.layout.Constraints"
                }
            ],
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9658,
            "description": "Calculate columns metrics",
            "params": [
                {
                    "name": "c",
                    "description": "the target container",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a columns widths",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "calcCols",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9674,
            "description": "Calculate rows metrics",
            "params": [
                {
                    "name": "c",
                    "description": "the target container",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a rows heights",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "calcRows",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9690,
            "description": "Calculate the given row height",
            "params": [
                {
                    "name": "row",
                    "description": "a row",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "the target container",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a size of the row",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "calcRow",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9713,
            "description": "Calculate the given column width",
            "params": [
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "the target container",
                    "type": "zebkit.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a size of the column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "calcCol",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.layout.GridLayout"
        },
        {
            "file": "build/zebkit.js",
            "line": 9836,
            "description": "A kid component that has been added or removed (depending on event type).",
            "itemtype": "attribute",
            "name": "kid",
            "readonly": "",
            "default": "null",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.CompEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9845,
            "description": "A constraints with that a kid component has been added or removed (depending on event type).",
            "itemtype": "attribute",
            "name": "constraints",
            "readonly": "",
            "default": "null",
            "type": "{Object}",
            "class": "zebkit.ui.CompEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9853,
            "description": "A previous x location the component has had.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "prevX",
            "type": "{Integer}",
            "default": "-1",
            "class": "zebkit.ui.CompEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9861,
            "description": "A previous y location the component has had.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "prevY",
            "type": "{Integer}",
            "default": "-1",
            "class": "zebkit.ui.CompEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9869,
            "description": "An index at which a component has been added or removed.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "index",
            "type": "{Integer}",
            "default": "-1",
            "class": "zebkit.ui.CompEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9877,
            "description": "A previous width the component has had.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "prevWidth",
            "type": "{Integer}",
            "default": "-1",
            "class": "zebkit.ui.CompEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9885,
            "description": "A previous height the component has had.",
            "readonly": "",
            "itemtype": "attribute",
            "name": "height",
            "type": "{Integer}",
            "default": "-1",
            "class": "zebkit.ui.CompEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9905,
            "description": "A code of a pressed key",
            "itemtype": "attribute",
            "name": "code",
            "readonly": "",
            "type": "{Strung}",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9913,
            "description": "A pressed key",
            "itemtype": "attribute",
            "name": "key",
            "readonly": "",
            "type": "{String}",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9921,
            "description": "Input device type. Can be for instance \"keyboard\", vkeyboard\" (virtual keyboard)",
            "itemtype": "attribute",
            "name": "device",
            "default": "\"keyboard\"",
            "type": "{String}",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9929,
            "description": "Boolean that shows state of ALT key.",
            "itemtype": "attribute",
            "name": "altKey",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9937,
            "description": "Boolean that shows state of SHIFT key.",
            "itemtype": "attribute",
            "name": "shiftKey",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9945,
            "description": "Boolean that shows state of CTRL key.",
            "itemtype": "attribute",
            "name": "ctrlKey",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9953,
            "description": "Boolean that shows state of META key.",
            "itemtype": "attribute",
            "name": "metaKey",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9961,
            "description": "Repeat counter",
            "itemtype": "attribute",
            "name": "repeat",
            "type": "{Number}",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 9968,
            "description": "Time stamp",
            "itemtype": "attribute",
            "name": "timeStamp",
            "type": "{Number}",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10006,
            "description": "Pointer type. Can be \"mouse\", \"touch\", \"pen\"",
            "itemtype": "attribute",
            "name": "poiterType",
            "type": "{String}",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10013,
            "description": "Touch counter",
            "itemtype": "attribute",
            "name": "touchCounter",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10021,
            "description": "Page x",
            "itemtype": "attribute",
            "name": "pageX",
            "type": "{Integer}",
            "default": "-1",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10029,
            "description": "Page y",
            "itemtype": "attribute",
            "name": "pageY",
            "type": "{Integer}",
            "default": "-1",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10037,
            "description": "Target DOM element",
            "itemtype": "attribute",
            "name": "target",
            "type": "{DOMElement}",
            "default": "null",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10045,
            "description": "Pointer identifier",
            "itemtype": "attribute",
            "name": "identifier",
            "type": "{Object}",
            "default": "null",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10057,
            "description": "Absolute mouse pointer x coordinate",
            "itemtype": "attribute",
            "name": "absX",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10065,
            "description": "Absolute mouse pointer y coordinate",
            "itemtype": "attribute",
            "name": "absY",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10073,
            "description": "Mouse pointer x coordinate (relatively to source UI component)",
            "itemtype": "attribute",
            "name": "x",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10081,
            "description": "Mouse pointer y coordinate (relatively to source UI component)",
            "itemtype": "attribute",
            "name": "y",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10089,
            "description": "Recompute the event relative location for the new source component and it\nabsolute location",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source",
                    "description": "a source component that triggers the event",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "ax",
                    "description": "an absolute (relatively to a canvas where the source\ncomponent is hosted) x mouse cursor coordinate",
                    "type": "Integer"
                },
                {
                    "name": "ay",
                    "description": "an absolute (relatively to a canvas where the source\ncomponent is hosted) y mouse cursor coordinate",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "updateCoordinates",
            "class": "zebkit.ui.PointerEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 10261,
            "description": "Fire event with the given id",
            "params": [
                {
                    "name": "id",
                    "description": "an event id",
                    "type": "String"
                },
                {
                    "name": "e",
                    "description": "different sort of event",
                    "type": "zebkit.util.Event"
                }
            ],
            "return": {
                "description": "boolean flag that indicates if a event handling has been interrupted on one of a stage:\n\n   - Suppressed by a target component\n   - By a global listener\n   - By a target component event listener",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "fire",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.EventManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 10308,
            "description": "Event manager reference. The reference can be used to register listeners that can\nget all events of the given type that are fired by zebkit UI. For instance you can\ncatch all pointer pressed events as follow:",
            "example": [
                "\n\n    zebkit.ui.events.addListeners(function pointerPressed(e) {\n        // handle pointer pressed event here\n        ...\n    });"
            ],
            "itemtype": "attribute",
            "name": "events",
            "type": "{zebkit.ui.EventManager}",
            "readonly": "",
            "class": "zebkit.ui.EventManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 10335,
            "description": "Current cursor type",
            "itemtype": "attribute",
            "name": "cursorType",
            "type": "{String}",
            "readonly": "",
            "default": "\"default\"",
            "class": "zebkit.ui.EventManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 10415,
            "description": "Get preferred size shortcut. Null can be passed as the method argument",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "l",
                    "description": "a layoutable component",
                    "type": "zebkit.ui.Layoutable"
                }
            ],
            "return": {
                "description": "a preferred size:\n     { width : {Integer}, height: {Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "$getPS",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 10429,
            "description": "Calculate visible area of the given components taking in account\nintersections with parent hierarchy.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "r",
                    "description": "a variable to store visible area\n\n           { x: {Integer}, y: {Integer}, width: {integer}, height: {Integer} }",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "$cvp",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 10478,
            "description": "Relocate the given component to make them fully visible.",
            "params": [
                {
                    "name": "d",
                    "description": "a parent component where the given component has to be re-located",
                    "type": "zebkit.ui.Panel",
                    "optional": true
                },
                {
                    "name": "c",
                    "description": "a component to re-locate to make it fully visible in the parent\ncomponent",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "makeFullyVisible",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 10610,
            "description": "Height of the font",
            "itemtype": "attribute",
            "name": "height",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.ui.Font"
        },
        {
            "file": "build/zebkit.js",
            "line": 10618,
            "description": "Ascent of the font",
            "itemtype": "attribute",
            "name": "ascent",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.ui.Font"
        },
        {
            "file": "build/zebkit.js",
            "line": 10671,
            "description": "Returns CSS font representation",
            "return": {
                "description": "a CSS representation of the given Font",
                "type": "String"
            },
            "itemtype": "method",
            "name": "toString",
            "class": "zebkit.ui.Font"
        },
        {
            "file": "build/zebkit.js",
            "line": 10694,
            "description": "Calculate the specified substring width",
            "params": [
                {
                    "name": "s",
                    "description": "a string",
                    "type": "String"
                },
                {
                    "name": "off",
                    "description": "fist character index",
                    "type": "Integer"
                },
                {
                    "name": "len",
                    "description": "length of substring",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a substring size in pixels",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "charsWidth",
            "class": "zebkit.ui.Font"
        },
        {
            "file": "build/zebkit.js",
            "line": 10712,
            "description": "Resize font and return new instance of font class with new size.",
            "params": [
                {
                    "name": "size",
                    "description": "can be specified in pixels as integer value or as\na percentage from the given font:",
                    "type": "Integer | String"
                }
            ],
            "return": {
                "description": "a font",
                "type": "zebkit.ui.Font"
            },
            "itemtype": "method",
            "name": "resize",
            "example": [
                "\n\n```javascript\nvar font = new zebkit.ui.Font(10); // font 10 pixels\nfont = font.resize(\"200%\"); // two times higher font\n```"
            ],
            "class": "zebkit.ui.Font"
        },
        {
            "file": "build/zebkit.js",
            "line": 10745,
            "description": "Trigger painting for all collected paint tasks",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "$doPaint",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 10906,
            "description": "Implement the event handler method to catch pointer pressed event. The event is triggered every time\na pointer button has been pressed or a finger has touched a touch screen.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerPressed = function(e) { ... }; // add event handler",
            "itemtype": "event",
            "name": "pointerPressed",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10917,
            "description": "Implement the event handler method to catch pointer released event. The event is triggered every time\na pointer button has been released or a finger has untouched a touch screen.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerReleased = function(e) { ... }; // add event handler",
            "itemtype": "event",
            "name": "pointerReleased",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10928,
            "description": "Implement the event handler method  to catch pointer moved event. The event is triggered every time\na pointer cursor has been moved with no a pointer button pressed.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerMoved = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "event",
            "name": "pointerMoved",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10939,
            "description": "Implement the event handler method to catch pointer entered event. The event is triggered every\ntime a pointer cursor entered the given component.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerEntered = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "event",
            "name": "pointerEntered",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10950,
            "description": "Implement the event handler method to catch pointer exited event. The event is triggered every\ntime a pointer cursor exited the given component.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerExited = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "event",
            "name": "pointerExited",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10961,
            "description": "Implement the event handler method to catch pointer clicked event. The event is triggered every\ntime a pointer button has been clicked. Click events are generated only if no one pointer moved\nor drag events has been generated in between pointer pressed -> pointer released events sequence.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerClicked = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "event",
            "name": "pointerClicked",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10973,
            "description": "Implement the event handler method to catch pointer dragged event. The event is triggered every\ntime a pointer cursor has been moved when a pointer button has been pressed. Or when a finger\nhas been moved over a touch screen.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerDragged = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "event",
            "name": "pointerDragged",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10985,
            "description": "Implement the event handler method to catch pointer drag started event. The event is triggered\nevery time a pointer cursor has been moved first time when a pointer button has been pressed.\nOr when a finger has been moved first time over a touch screen.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerDragStarted = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "event",
            "name": "pointerDragStarted",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 10997,
            "description": "Implement the event handler method to catch pointer drag ended event. The event is triggered\nevery time a pointer cursor has been moved last time when a pointer button has been pressed.\nOr when a finger has been moved last time over a touch screen.\n\n        var p = new zebkit.ui.Panel();\n        p.pointerDragEnded = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "event",
            "name": "pointerDragEnded",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11009,
            "description": "Implement the event handler method to catch key pressed event The event is triggered every\ntime a key has been pressed.\n\n        var p = new zebkit.ui.Panel();\n        p.keyPressed = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "event",
            "name": "keyPressed",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11020,
            "description": "Implement the event handler method to catch key types event The event is triggered every\n    time a key has been typed.\n\n        var p = new zebkit.ui.Panel();\n        p.keyTyped = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "event",
            "name": "keyTyped",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11031,
            "description": "Implement the event handler method to catch key released event\nThe event is triggered every time a key has been released.\n\n        var p = new zebkit.ui.Panel();\n        p.keyReleased = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "event",
            "name": "keyReleased",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11042,
            "description": "Implement the event handler method to catch the component sized event\nThe event is triggered every time the component has been re-sized.\n\n        var p = new zebkit.ui.Panel();\n        p.compSized = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a component event. Source of the event\nis a component that has been sized, \"prevWidth\" and \"prevHeight\" fields\nkeep a previous size the component had.",
                    "type": "zebkit.ui.CompEvent"
                }
            ],
            "itemtype": "event",
            "name": "compSized",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11055,
            "description": "Implement the event handler method to catch component moved event\nThe event is triggered every time the component location has been\nupdated.\n\n        var p = new zebkit.ui.Panel();\n        p.compMoved = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "c",
                    "description": "a component that has been moved",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "px",
                    "description": "a previous x coordinate the moved component had",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a previous y coordinate the moved component had",
                    "type": "Integer"
                },
                {
                    "name": "e",
                    "description": "a component event. Source of the event\nis a component that has been moved. \"prevX\" and \"prevY\" fields hold\na previous location the component had.",
                    "type": "zebkit.ui.CompEvent"
                }
            ],
            "itemtype": "event",
            "name": "compMoved",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11072,
            "description": "Implement the event handler method to catch component enabled event\nThe event is triggered every time a component enabled state has been\nupdated.\n\n        var p = new zebkit.ui.Panel();\n        p.compEnabled = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a component event.",
                    "type": "zebkit.ui.CompEvent"
                }
            ],
            "itemtype": "event",
            "name": "compEnabled",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11084,
            "description": "Implement the event handler method to catch component shown event\nThe event is triggered every time a component visibility state has\nbeen updated.\n\n        var p = new zebkit.ui.Panel();\n        p.compShown = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a component event.",
                    "type": "zebkit.ui.CompEvent"
                }
            ],
            "itemtype": "event",
            "name": "compShown",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11096,
            "description": "Implement the event handler method to catch component added event\nThe event is triggered every time the component has been inserted into\nanother one.\n\n        var p = new zebkit.ui.Panel();\n        p.compAdded = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a component event. The source of the passed event\nis set to a container component, \"kid\" field is set to a component that has been\nadded to the container, \"constraints\" holds a constraints the child component has been\nadded.",
                    "type": "zebkit.ui.CompEvent"
                }
            ],
            "itemtype": "event",
            "name": "compAdded",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11111,
            "description": "Implement the event handler method to catch component removed event\nThe event is triggered every time the component has been removed from\nits parent UI component.\n\n        var p = new zebkit.ui.Panel();\n        p.compRemoved = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a component event. The source of the passed event\nis set to the container component. \"kid\" field is set to a child component that has\nbeen removed from the container and \"index\" field is set to the index the kid component\nwas added before it had been removed from the container.",
                    "type": "zebkit.ui.CompEvent"
                }
            ],
            "itemtype": "event",
            "name": "compRemoved",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11126,
            "description": "Implement the event handler method to catch component focus gained event\nThe event is triggered every time a component has gained focus.\n\n        var p = new zebkit.ui.Panel();\n        p.focusGained = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "an input event",
                    "type": "zebkit.ui.FocusEvent"
                }
            ],
            "itemtype": "event",
            "name": "focusGained",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11137,
            "description": "Implement the event handler method to catch component focus lost event\nThe event is triggered every time a component has lost focus\n\n        var p = new zebkit.ui.Panel();\n        p.focusLost = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "e",
                    "description": "an input event",
                    "type": "zebkit.ui.FocusEvent"
                }
            ],
            "itemtype": "event",
            "name": "focusLost",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11148,
            "description": "It is also possible to listen all the listed above event for children component. To handle\nthe event register listener method following the pattern below:\n\n        var p = new zebkit.ui.Panel();\n        p.child<EventName> = function(e) { ... }; // add event handler",
            "params": [
                {
                    "name": "id",
                    "description": "a component event ID. The id can have one of the following value:",
                    "type": "Integer"
                },
                {
                    "name": "src",
                    "description": "a component that triggers the event",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "e",
                    "description": "an UI event fired by a child component.",
                    "type": "zebkit.ui.KeyEvent | zebkit.ui.PointerEvent | zebkit.ui.CompEvent| zebkit.ui.FocusEvent"
                }
            ],
            "itemtype": "event",
            "name": "child<EventName>",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11163,
            "description": "The method is called for focusable UI components (components that can hold input focus) to ask\na string to be saved in native clipboard",
            "return": {
                "description": "a string to be copied in native clipboard",
                "type": "String"
            },
            "itemtype": "event",
            "name": "clipCopy",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11172,
            "description": "The method is called to pass string from clipboard to a focusable (a component that can hold\ninput focus) UI component",
            "params": [
                {
                    "name": "s",
                    "description": "a string from native clipboard",
                    "type": "String"
                }
            ],
            "itemtype": "event",
            "name": "clipPaste",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11184,
            "description": "Request the whole UI component or part of the UI component to be repainted",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y coordinate of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "repaint",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11327,
            "description": "Paint the component and all its child components using the given 2D HTML Canvas context",
            "params": [
                {
                    "name": "g",
                    "description": "a canvas 2D context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "itemtype": "method",
            "name": "paintComponent",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11436,
            "description": "UI component border view",
            "itemtype": "attribute",
            "name": "border",
            "default": "null",
            "readonly": "",
            "type": "{zebkit.ui.View}",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11444,
            "description": "UI component background view",
            "itemtype": "attribute",
            "name": "bg",
            "default": "null",
            "readonly": "",
            "type": "{zebkit.ui.View}",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11452,
            "description": "Define and set the property to true if the component has to catch focus",
            "itemtype": "attribute",
            "name": "canHaveFocus",
            "type": "{Boolean}",
            "default": "undefined",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11461,
            "description": "UI component enabled state",
            "itemtype": "attribute",
            "name": "isEnabled",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11470,
            "description": "Find a zebkit.ui.zCanvas where the given UI component is hosted",
            "return": {
                "description": "a zebkit canvas",
                "type": "zebkit.ui.zCanvas"
            },
            "itemtype": "method",
            "name": "getCanvas",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11486,
            "description": "Shortcut method to register the specific to the concrete component\nevents listener. For instance \"zebkit.ui.Button\" component fires event\nwhen it is pressed:\n\n           var b = new zebkit.ui.Button(\"Test\");\n           b.on(function() {\n               // button has been pressed\n           });",
            "params": [
                {
                    "name": "a",
                    "description": "listener function or an object that\ndeclares events handler methods",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "a registered listener",
                "type": "Function|Object"
            },
            "itemtype": "method",
            "name": "bind",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11503,
            "description": "Shortcut method to remove the register component specific events listener",
            "params": [
                {
                    "name": "a",
                    "description": "listener function to be removed",
                    "type": "Function|Object"
                }
            ],
            "itemtype": "method",
            "name": "unbind",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11510,
            "description": "Load content of the panel UI components from the specified JSON file.",
            "params": [
                {
                    "name": "JSON",
                    "description": "URL, JSON string or JS object tthat describes UI\nto be loaded into the panel",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "a runner to track JSON loading",
                "type": "zebkit.DoIt"
            },
            "itemtype": "method",
            "name": "load",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11521,
            "description": "Get a children UI component that embeds the given point. The method\ncalculates the component visible area first and than looks for a\nchildren component only in this calculated visible area. If no one\nchildren component has been found than component return itself as\na holder of the given point if one of the following condition is true:\n\n  - The component doesn't implement custom \"contains(x, y)\" method\n  - The component implements \"contains(x, y)\" method and for the given point the method return true",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a children UI component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getComponentAt",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11556,
            "description": "Shortcut method to invalidating the component and initiating the component repainting",
            "itemtype": "method",
            "name": "vrp",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11594,
            "description": "The method is implemented to be aware about a children component insertion.",
            "params": [
                {
                    "name": "index",
                    "description": "an index at that a new children component\nhas been added",
                    "type": "Integer"
                },
                {
                    "name": "constr",
                    "description": "a layout constraints of an inserted component",
                    "type": "Object"
                },
                {
                    "name": "l",
                    "description": "a children component that has been inserted",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "kidAdded",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11616,
            "description": "Set the component layout constraints.",
            "params": [
                {
                    "name": "ctr",
                    "description": "a constraints whose value depends on layout manager that has been set",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setConstraints",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11632,
            "description": "The method is implemented to be aware about a children component removal.",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a removed component",
                    "type": "Integer"
                },
                {
                    "name": "l",
                    "description": "a removed children component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "kidRemoved",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11648,
            "description": "The method is implemented to be aware the component location updating",
            "params": [
                {
                    "name": "px",
                    "description": "a previous x coordinate of the component",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a previous y coordinate of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "relocated",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11690,
            "description": "The method is implemented to be aware the component size updating",
            "params": [
                {
                    "name": "pw",
                    "description": "a previous width of the component",
                    "type": "Integer"
                },
                {
                    "name": "ph",
                    "description": "a previous height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "resized",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11709,
            "description": "Checks if the component has a focus",
            "return": {
                "description": "true if the component has focus",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "hasFocus",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11718,
            "description": "Force the given component to catch focus if the component is focusable.",
            "itemtype": "method",
            "name": "requestFocus",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11726,
            "description": "Force the given component to catch focus in the given timeout.",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds. The default value is 50\nmilliseconds",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "requestFocusIn",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11743,
            "description": "Set the UI component visibility",
            "params": [
                {
                    "name": "b",
                    "description": "a visibility state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setVisible",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11767,
            "description": "Set the UI component enabled state. Using this property\nan UI component can be excluded from getting input events",
            "params": [
                {
                    "name": "b",
                    "description": "a enabled state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setEnabled",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11790,
            "description": "Set the UI component top, right, left, bottom paddings to the same given value",
            "params": [
                {
                    "name": "v",
                    "description": "the value that will be set as top, right, left, bottom UI\ncomponent paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPadding",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11798,
            "description": "Set UI component top, left, bottom, right paddings. The paddings are\ngaps between component border and painted area.",
            "params": [
                {
                    "name": "top",
                    "description": "a top padding",
                    "type": "Integer"
                },
                {
                    "name": "left",
                    "description": "a left padding",
                    "type": "Integer"
                },
                {
                    "name": "bottom",
                    "description": "a bottom padding",
                    "type": "Integer"
                },
                {
                    "name": "right",
                    "description": "a right padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPadding",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11825,
            "description": "Set top padding",
            "params": [
                {
                    "name": "top",
                    "description": "a top padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setTopPadding",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11839,
            "description": "Set left padding",
            "params": [
                {
                    "name": "left",
                    "description": "a left padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLeftPadding",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11853,
            "description": "Set bottom padding",
            "params": [
                {
                    "name": "bottom",
                    "description": "a bottom padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setBottomPadding",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11867,
            "description": "Set right padding",
            "params": [
                {
                    "name": "right",
                    "description": "a right padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRightPadding",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11881,
            "description": "Set the border view",
            "params": [
                {
                    "name": "v",
                    "description": "a border view or border \"paint(g,x,y,w,h,c)\"\nrendering function or one of predefined border name: \"plain\", \"sunken\", \"raised\", \"etched\"",
                    "type": "zebkit.ui.View|Function|String"
                }
            ],
            "itemtype": "method",
            "name": "setBorder",
            "example": [
                "\n\n     var pan = new zebkit.ui.Panel();\n\n     // set round border\n     pan.setBorder(zebkit.ui.RoundBorder(\"red\"));\n\n     ...\n     // set one of predefined border\n     pan.setBorder(\"plain\");"
            ],
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11924,
            "description": "Set the background. Background can be a color string or a zebkit.ui.View class\ninstance, or a function(g,x,y,w,h,c) that paints the background:\n\n    // set background color\n    comp.setBackground(\"red\");\n\n    // set a picture as a component background\n    comp.setBackground(new zebkit.ui.Picture(...));\n\n    // set a custom rendered background\n    comp.setBackground(function(g,x,y,w,h,target) {\n        // paint a component background here\n        g.setColor(\"blue\");\n        g.fillRect(x,y,w,h);\n        g.drawLine(...);\n        ...\n    });",
            "params": [
                {
                    "name": "v",
                    "description": "a background view, color or\nbackground \"paint(g,x,y,w,h,c)\" rendering function.",
                    "type": "String|zebkit.ui.View|Function"
                }
            ],
            "itemtype": "method",
            "name": "setBackground",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 11960,
            "description": "Add the given children component or number of components to the given panel.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "children component of number of\ncomponents to be added. The parameter can be:\n\n  - Component\n  - Array of components\n  - Dictionary object where every element is a component to be added and the key of\n    the component is stored in the dictionary is considered as the component constraints",
                    "type": "zebkit.ui.Panel|Array|Object"
                }
            ],
            "itemtype": "method",
            "name": "setKids",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 12006,
            "description": "Called whenever the UI component gets or looses focus",
            "itemtype": "method",
            "name": "focused",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 12031,
            "description": "Remove all children components",
            "itemtype": "method",
            "name": "removeAll",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 12055,
            "description": "Bring the UI component to front",
            "itemtype": "method",
            "name": "toFront",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 12070,
            "description": "Send the UI component to back",
            "itemtype": "method",
            "name": "toBack",
            "chainable": 1,
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 12085,
            "description": "Set the UI component size to its preferred size",
            "return": {
                "description": "a preferred size applied to the component.\nThe structure of the returned object is the following:\n\n               { width:{Integer}, height:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toPreferredSize",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 12100,
            "description": "Build zebkit.ui.View that represents the UI component",
            "return": {
                "description": "a view of the component",
                "type": "zebkit.ui.View"
            },
            "params": [
                {
                    "name": "target",
                    "description": "a target component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "toView",
            "class": "zebkit.ui.Panel"
        },
        {
            "file": "build/zebkit.js",
            "line": 12186,
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 12190,
            "description": "Default normal font",
            "itemtype": "attribute",
            "name": "font",
            "type": "{zebkit.ui.Font}",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 12198,
            "description": "Default small font",
            "itemtype": "attribute",
            "name": "smallFont",
            "type": "{zebkit.ui.Font}",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 12206,
            "description": "Default bold font",
            "itemtype": "attribute",
            "name": "boldFont",
            "type": "{zebkit.ui.Font}",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 12214,
            "description": "Build a view instance by the given object.",
            "params": [
                {
                    "name": "v",
                    "description": "an object that can be used to build a view. The following variants\nof object types are possible\n\n  - **null** null is returned\n  - **String** if the string is color or border view id than \"zebkit.util.rgb\" or border view\n    is returned. Otherwise an instance of zebkit.ui.StringRender is returned.\n  -  **String** if the string starts from \"#\" or \"rgb\" it is considered as encoded color.  \"zebkit.util.rgb\"\n    instance will be returned as the view\n  - **Array** an instance of \"zebkit.ui.CompositeView\" is returned\n  - **Function** in this case the passed method is considered as ans implementation of \"paint(g, x, y, w, h, d)\"\n    method of \"zebkit.ui.View\" class. Ans instance of \"zebki.ui.View\" with the method implemented is returned.\n  - **Object** an instance of \"zebkit.ui.ViewSet\" is returned",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a view",
                "type": "zebkit.ui.View"
            },
            "itemtype": "method",
            "name": "$view",
            "example": [
                "\n\n     // string render\n     var view = zebkit.ui.$view(\"String render\");\n\n     // color render\n     var view = zebkit.ui.$view(\"red\");\n\n     // composite view\n     var view = zebkit.ui.$view([\n         zebkit.ui.rgb.yellow,\n         \"Text Render\"\n     ]);\n\n     // custom view\n     var view = zebkit.ui.$view(function(g,x,y,w,h,d) {\n         g.drawLine(x, y, x + w, y + w);\n         ...\n      });"
            ],
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 12340,
            "description": "Get left gap. The method informs UI component that uses the view as\na border view how much space left side of the border occupies",
            "return": {
                "description": "a left gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLeft",
            "class": "zebkit.ui.View"
        },
        {
            "file": "build/zebkit.js",
            "line": 12347,
            "description": "Get right gap. The method informs UI component that uses the view as\na border view how much space right side of the border occupies",
            "return": {
                "description": "a right gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getRight",
            "class": "zebkit.ui.View"
        },
        {
            "file": "build/zebkit.js",
            "line": 12354,
            "description": "Get top gap. The method informs UI component that uses the view as\na border view how much space top side of the border occupies",
            "return": {
                "description": "a top gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getTop",
            "class": "zebkit.ui.View"
        },
        {
            "file": "build/zebkit.js",
            "line": 12361,
            "description": "Get bottom gap. The method informs UI component that uses the view as\na border view how much space bottom side of the border occupies",
            "return": {
                "description": "a bottom gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getBottom",
            "class": "zebkit.ui.View"
        },
        {
            "file": "build/zebkit.js",
            "line": 12371,
            "description": "Return preferred size the view desires to have",
            "itemtype": "method",
            "name": "getPreferredSize",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "zebkit.ui.View"
        },
        {
            "file": "build/zebkit.js",
            "line": 12381,
            "description": "The method is called to render the decorative element on the given surface of the specified\nUI component",
            "params": [
                {
                    "name": "g",
                    "description": "graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "required width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "required height",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "an UI component on which the view\nelement has to be drawn",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "paint",
            "class": "zebkit.ui.View"
        },
        {
            "file": "build/zebkit.js",
            "line": 12415,
            "description": "Target object to be visualized",
            "itemtype": "attribute",
            "name": "target",
            "default": "null",
            "readonly": "",
            "type": "{Object}",
            "class": "zebkit.ui.Render"
        },
        {
            "file": "build/zebkit.js",
            "line": 12424,
            "description": "Set the given target object. The method triggers \"targetWasChanged(oldTarget, newTarget)\"\nexecution if the method is declared. Implement the method if you need to track a target\nobject updating.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "o",
                    "description": "a target object to be visualized",
                    "type": "Object"
                }
            ],
            "class": "zebkit.ui.Render"
        },
        {
            "file": "build/zebkit.js",
            "line": 12460,
            "description": "Brightest border line color",
            "itemtype": "attribute",
            "name": "brightest",
            "readonly": "",
            "type": "{String}",
            "default": "\"white\"",
            "class": "zebkit.ui.Sunken"
        },
        {
            "file": "build/zebkit.js",
            "line": 12468,
            "description": "Middle border line color",
            "itemtype": "attribute",
            "name": "middle",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebkit.ui.Sunken"
        },
        {
            "file": "build/zebkit.js",
            "line": 12476,
            "description": "Darkest border line color",
            "itemtype": "attribute",
            "name": "darkest",
            "readonly": "",
            "type": "{String}",
            "default": "\"black\"",
            "class": "zebkit.ui.Sunken"
        },
        {
            "file": "build/zebkit.js",
            "line": 12517,
            "description": "Brightest border line color",
            "itemtype": "attribute",
            "name": "brightest",
            "readonly": "",
            "type": "{String}",
            "default": "\"white\"",
            "class": "zebkit.ui.Etched"
        },
        {
            "file": "build/zebkit.js",
            "line": 12525,
            "description": "Middle border line color",
            "itemtype": "attribute",
            "name": "middle",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebkit.ui.Etched"
        },
        {
            "file": "build/zebkit.js",
            "line": 12562,
            "description": "Brightest border line color",
            "itemtype": "attribute",
            "name": "brightest",
            "readonly": "",
            "type": "{String}",
            "default": "\"white\"",
            "class": "zebkit.ui.Raised"
        },
        {
            "file": "build/zebkit.js",
            "line": 12570,
            "description": "Middle border line color",
            "itemtype": "attribute",
            "name": "middle",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebkit.ui.Raised"
        },
        {
            "file": "build/zebkit.js",
            "line": 12611,
            "itemtype": "attribute",
            "name": "color",
            "readonly": "",
            "type": "{String}",
            "default": "\"black\"",
            "class": "zebkit.ui.Dotted"
        },
        {
            "file": "build/zebkit.js",
            "line": 12689,
            "description": "Border color",
            "itemtype": "attribute",
            "name": "color",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebkit.ui.Border"
        },
        {
            "file": "build/zebkit.js",
            "line": 12697,
            "description": "Border line width",
            "itemtype": "attribute",
            "name": "width",
            "readonly": "",
            "type": "{Integer}",
            "default": "1",
            "class": "zebkit.ui.Border"
        },
        {
            "file": "build/zebkit.js",
            "line": 12705,
            "description": "Border radius",
            "itemtype": "attribute",
            "name": "radius",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.ui.Border"
        },
        {
            "file": "build/zebkit.js",
            "line": 12776,
            "description": "Defines border outline for the given 2D Canvas context",
            "params": [
                {
                    "name": "g",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "required width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "required height",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "target UI component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "outline",
            "return": {
                "description": "true if the outline has to be applied as an\nUI component shape",
                "type": "Boolean"
            },
            "class": "zebkit.ui.Border"
        },
        {
            "file": "build/zebkit.js",
            "line": 12849,
            "description": "Border width",
            "itemtype": "attribute",
            "name": "width",
            "readonly": "",
            "type": "{Integer}",
            "default": "1",
            "class": "zebkit.ui.RoundBorder"
        },
        {
            "file": "build/zebkit.js",
            "line": 12858,
            "description": "Border color",
            "itemtype": "attribute",
            "name": "color",
            "readonly": "",
            "type": "{String}",
            "default": "null",
            "class": "zebkit.ui.RoundBorder"
        },
        {
            "file": "build/zebkit.js",
            "line": 12914,
            "description": "Get preferred size of the render. The method doesn't calculates\npreferred size it simply calls the target component \"getPreferredSize\"\nmethod.",
            "itemtype": "method",
            "name": "getPreferredSize",
            "return": {
                "description": "a preferred size\n\n     {width:<Integer>, height: <Integer>}",
                "type": "Object"
            },
            "class": "zebkit.ui.CompRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 12985,
            "description": "Gradient orientation: vertical or horizontal",
            "itemtype": "attribute",
            "name": "orient",
            "readonly": "",
            "default": "\"vertical\"",
            "type": "{String}",
            "class": "zebkit.ui.Gradient"
        },
        {
            "file": "build/zebkit.js",
            "line": 12993,
            "description": "Gradient start and stop colors",
            "itemtype": "attribute",
            "name": "colors",
            "readonly": "",
            "type": "{Array}",
            "class": "zebkit.ui.Gradient"
        },
        {
            "file": "build/zebkit.js",
            "line": 13085,
            "description": "A x coordinate of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "x",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.ui.Picture"
        },
        {
            "file": "build/zebkit.js",
            "line": 13093,
            "description": "A y coordinate of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "y",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.ui.Picture"
        },
        {
            "file": "build/zebkit.js",
            "line": 13101,
            "description": "A width  of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "width",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.ui.Picture"
        },
        {
            "file": "build/zebkit.js",
            "line": 13109,
            "description": "A height  of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "height",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebkit.ui.Picture"
        },
        {
            "file": "build/zebkit.js",
            "line": 13160,
            "description": "Buffered pattern",
            "type": "{Pattern}",
            "access": "protected",
            "tagname": "",
            "itemtype": "attribute",
            "name": "pattern",
            "readonly": "",
            "class": "zebkit.ui.Pattern"
        },
        {
            "file": "build/zebkit.js",
            "line": 13206,
            "description": "Left padding",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "itemtype": "attribute",
            "name": "left",
            "type": "{Integer}",
            "class": "zebkit.ui.CompositeView"
        },
        {
            "file": "build/zebkit.js",
            "line": 13214,
            "description": "Right padding",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "attribute",
            "name": "right",
            "type": "{Integer}",
            "class": "zebkit.ui.CompositeView"
        },
        {
            "file": "build/zebkit.js",
            "line": 13222,
            "description": "Top padding",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "attribute",
            "name": "top",
            "type": "{Integer}",
            "class": "zebkit.ui.CompositeView"
        },
        {
            "file": "build/zebkit.js",
            "line": 13230,
            "description": "Bottom padding",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "itemtype": "attribute",
            "name": "bottom",
            "type": "{Integer}",
            "class": "zebkit.ui.CompositeView"
        },
        {
            "file": "build/zebkit.js",
            "line": 13359,
            "description": "Views set",
            "itemtype": "attribute",
            "name": "views",
            "type": "Object",
            "default": "{}",
            "readonly": "",
            "class": "zebkit.ui.ViewSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 13380,
            "description": "Active in the set view",
            "itemtype": "attribute",
            "name": "activeView",
            "type": "View",
            "default": "null",
            "readonly": "",
            "class": "zebkit.ui.ViewSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 13399,
            "description": "Activate the given view from the given set.",
            "params": [
                {
                    "name": "id",
                    "description": "a key of a view from the set to be activated. Pass\nnull to make current view to undefined state",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if new view has been activated, false otherwise",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "activate",
            "class": "zebkit.ui.ViewSet"
        },
        {
            "file": "build/zebkit.js",
            "line": 13462,
            "description": "Side the line has to be rendered",
            "itemtype": "attribute",
            "name": "side",
            "type": "{String}",
            "default": "\"top\"",
            "readonly": "",
            "class": "zebkit.ui.Line"
        },
        {
            "file": "build/zebkit.js",
            "line": 13471,
            "description": "Line color",
            "itemtype": "attribute",
            "name": "color",
            "type": "{String}",
            "default": "\"black\"",
            "readonly": "",
            "class": "zebkit.ui.Line"
        },
        {
            "file": "build/zebkit.js",
            "line": 13480,
            "description": "Line width",
            "itemtype": "attribute",
            "name": "lineWidth",
            "type": "{Integer}",
            "default": "1",
            "readonly": "",
            "class": "zebkit.ui.Line"
        },
        {
            "file": "build/zebkit.js",
            "line": 13608,
            "description": "UI component that holds the text render",
            "itemtype": "attribute",
            "name": "owner",
            "default": "null",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.BaseTextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13618,
            "description": "Line indention",
            "itemtype": "attribute",
            "name": "lineIndent",
            "type": "{Integer}",
            "default": "1",
            "class": "zebkit.ui.BaseTextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13631,
            "description": "Set the rendered text font.",
            "params": [
                {
                    "name": "f",
                    "description": "a font as CSS string or\nzebkit.ui.Font class instance",
                    "type": "String|zebkit.ui.Font"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setFont",
            "class": "zebkit.ui.BaseTextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13657,
            "description": "Resize font",
            "params": [
                {
                    "name": "size",
                    "description": "a new size of the font",
                    "type": "String|Integer"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "resizeFont",
            "class": "zebkit.ui.BaseTextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13675,
            "description": "Set rendered text color",
            "params": [
                {
                    "name": "c",
                    "description": "a text color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "class": "zebkit.ui.BaseTextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13688,
            "description": "Called whenever an owner UI component has been changed",
            "params": [
                {
                    "name": "v",
                    "description": "a new owner UI component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "ownerChanged",
            "class": "zebkit.ui.BaseTextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13728,
            "description": "Font to be used to render the target string",
            "itemtype": "attribute",
            "name": "font",
            "readonly": "",
            "type": "{zebkit.ui.Font}",
            "class": "zebkit.ui.StringRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13736,
            "description": "Color to be used to render the target string",
            "readonly": "",
            "itemtype": "attribute",
            "name": "color",
            "type": "{String}",
            "class": "zebkit.ui.StringRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13804,
            "description": "Return a string that is rendered by this class",
            "return": {
                "description": "a string",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.StringRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13813,
            "description": "Set the string to be rendered",
            "params": [
                {
                    "name": "s",
                    "description": "a string",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebkit.ui.StringRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13854,
            "description": "Text color",
            "itemtype": "attribute",
            "name": "color",
            "type": "{String}",
            "default": "zebkit.ui.TextRender.color",
            "readonly": "",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13863,
            "description": "Text font",
            "itemtype": "attribute",
            "name": "font",
            "type": "{String|zebkit.ui.Font}",
            "default": "zebkit.ui.TextRender.font",
            "readonly": "",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13881,
            "description": "Get number of lines of target text",
            "return": {
                "description": "a number of line in the target text",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLines",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13898,
            "description": "Paint the specified text line",
            "params": [
                {
                    "name": "g",
                    "description": "graphical 2D context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "line",
                    "description": "a line number",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "an UI component on that the line has to be rendered",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "paintLine",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13911,
            "description": "Get text line by the given line number",
            "params": [
                {
                    "name": "r",
                    "description": "a line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a text line",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getLine",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13921,
            "description": "Return a string that is rendered by this class",
            "return": {
                "description": "a string",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13930,
            "description": "Set the text model content",
            "params": [
                {
                    "name": "s",
                    "description": "a text as string object",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13939,
            "description": "Get the given text line width in pixels",
            "params": [
                {
                    "name": "line",
                    "description": "a text line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a text line width in pixels",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "lineWidth",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13950,
            "description": "Called every time the target text metrics has to be recalculated",
            "itemtype": "method",
            "name": "recalc",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 13976,
            "description": "Text model update listener handler",
            "params": [
                {
                    "name": "src",
                    "description": "text model object",
                    "type": "zebkit.data.TextModel"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "off",
                    "description": "an offset starting from that\nthe text has been updated",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a size (in character) of text part that\nhas been updated",
                    "type": "Integer"
                },
                {
                    "name": "ful",
                    "description": "a first affected by the given update line",
                    "type": "Integer"
                },
                {
                    "name": "updatedLines",
                    "description": "a number of text lines that have\nbeen affected by text updating",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "textUpdated",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 14015,
            "description": "Invalidate metrics for the specified range of lines.",
            "params": [
                {
                    "name": "start",
                    "description": "first line to be invalidated",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "number of lines to be invalidated",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "invalidate",
            "access": "private",
            "tagname": "",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 14144,
            "description": "Paint the specified text selection of the given line. The area\nwhere selection has to be rendered is denoted with the given\nrectangular area.",
            "params": [
                {
                    "name": "g",
                    "description": "a canvas graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "a x coordinate of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "line",
                    "description": "[description]",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "a target UI component where the text\nhas to be rendered",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "paintSelection",
            "class": "zebkit.ui.TextRender"
        },
        {
            "file": "build/zebkit.js",
            "line": 14339,
            "description": "Echo character that will replace characters of hidden text",
            "itemtype": "attribute",
            "name": "echo",
            "type": "{String}",
            "readonly": "",
            "default": "\"*\"",
            "class": "zebkit.ui.PasswordText"
        },
        {
            "file": "build/zebkit.js",
            "line": 14348,
            "description": "Indicates if the last entered character doesn't have to be replaced with echo character",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "showLast",
            "default": "true",
            "readonly": "",
            "class": "zebkit.ui.PasswordText"
        },
        {
            "file": "build/zebkit.js",
            "line": 14357,
            "description": "Set the specified echo character. The echo character is used to hide secret text.",
            "params": [
                {
                    "name": "ch",
                    "description": "an echo character",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setEchoChar",
            "chainable": 1,
            "class": "zebkit.ui.PasswordText"
        },
        {
            "file": "build/zebkit.js",
            "line": 15048,
            "description": "Related to the event component. For focus gained event it should be a component\nthat lost focus. For focus lost event it should be a component that is going to\nget a focus.",
            "itemtype": "attribute",
            "name": "related",
            "readonly": "",
            "default": "null",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.FocusEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 15072,
            "description": "Reference to the current focus owner component.",
            "itemtype": "attribute",
            "name": "focusOwner",
            "readonly": "",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15088,
            "description": "Component enabled event handler",
            "params": [
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "compEnabled",
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15100,
            "description": "Component shown event handler",
            "params": [
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "compShown",
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15112,
            "description": "Component removed event handler",
            "params": [
                {
                    "name": "p",
                    "description": "a parent",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "i",
                    "description": "a removed component index",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a removed component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "compRemoved",
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15126,
            "description": "Test if the given component is a focus owner",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component to be tested",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "hasFocus",
            "return": {
                "description": "true if the given component holds focus",
                "type": "Boolean"
            },
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15136,
            "description": "Key pressed event handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15155,
            "description": "Test if the given component can catch focus",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component to be tested",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "isFocusable",
            "return": {
                "description": "true if the given component can catch a focus",
                "type": "Boolean"
            },
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15244,
            "description": "Force to pass a focus to the given UI component",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component to pass a focus",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "requestFocus",
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15279,
            "description": "Pointer pressed event handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerPressed",
            "class": "zebkit.ui.FocusManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15309,
            "description": "Shortcut name",
            "itemtype": "attribute",
            "name": "shortcut",
            "readonly": "",
            "type": "{String}",
            "class": "zebkit.ui.ShortcutEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 15317,
            "description": "Shortcut keys combination",
            "itemtype": "attribute",
            "name": "keys",
            "readonly": "",
            "type": "{String}",
            "class": "zebkit.ui.ShortcutEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 15386,
            "description": "Key pressed event handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebkit.ui.ShortcutManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15433,
            "description": "Set shortcuts. Expected shortcuts format is:\n\n     { \"<ID>\"  : \"Control + KeyZ\", ... }\n\nor\n\n      { \"<ID>\"  :  [\"Control + KeyZ\", \"Control + KeyV\" ], ... }",
            "params": [
                {
                    "name": "shortcuts",
                    "description": "",
                    "type": "Shortcuts"
                }
            ],
            "itemtype": "method",
            "name": "setShortcuts",
            "class": "zebkit.ui.ShortcutManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 15505,
            "description": "\"default\"",
            "itemtype": "property",
            "name": "DEFAULT",
            "final": "",
            "type": "{String}",
            "class": "zebkit.ui.Cursor"
        },
        {
            "file": "build/zebkit.js",
            "line": 15557,
            "description": "Shortcut to create a UI component by the given description. Depending on the description type\nthe following components are created:\n\n   - **String** zebkit.ui.Label\n   - **Array** zebkit.ui.Combobox\n   - **2D Array** zebkit.ui.grid.Grid",
            "itemtype": "method",
            "name": "$component",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "desc",
                    "description": "a description",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a created UI component",
                "type": "zebkit.ui.Panel"
            },
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 15668,
            "description": "Reference to a view that the component visualize",
            "itemtype": "attribute",
            "name": "view",
            "type": "{zebkit.ui.View}",
            "default": "null",
            "readonly": "",
            "class": "zebkit.ui.ViewPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 15687,
            "description": "Set the target view to be wrapped with the UI component",
            "params": [
                {
                    "name": "v",
                    "description": "a view or a rendering\nview \"paint(g,x,y,w,h,c)\" function",
                    "type": "zebkit.ui.View|Function"
                }
            ],
            "itemtype": "method",
            "name": "setView",
            "chainable": 1,
            "class": "zebkit.ui.ViewPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 15707,
            "description": "Override the parent method to calculate preferred size basing on a target view.",
            "params": [
                {
                    "name": "t",
                    "description": "a target container",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "return a target view preferred size if it is defined.\nThe returned structure is the following:\n\n    { width: {Integer}, height:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "calcPreferredSize",
            "class": "zebkit.ui.ViewPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 15744,
            "description": "Set image to be rendered in the UI component",
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "img",
                    "description": "a path or direct reference to an\nimage or zebkit.ui.Picture render.\nIf the passed parameter is string it considered as path to an image.\nIn this case the image will be loaded using the passed path",
                    "type": "String|Image|zebkit.ui.Picture"
                }
            ],
            "chainable": 1,
            "class": "zebkit.ui.ImagePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 15811,
            "description": "Line colors",
            "itemtype": "attribute",
            "name": "colors",
            "type": "{Array}",
            "readonly": "",
            "default": "[ \"gray\" ]",
            "class": "zebkit.ui.Line"
        },
        {
            "file": "build/zebkit.js",
            "line": 15828,
            "description": "Line width",
            "itemtype": "attribute",
            "name": "lineWidth",
            "type": "{Integer}",
            "default": "1",
            "class": "zebkit.ui.Line"
        },
        {
            "file": "build/zebkit.js",
            "line": 15836,
            "description": "Set line color",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "class": "zebkit.ui.Line"
        },
        {
            "file": "build/zebkit.js",
            "line": 15847,
            "description": "Set set of colors to be used to paint the line. Number of colors defines the number of\nlines to be painted.",
            "params": [
                {
                    "name": "colors",
                    "description": "colors",
                    "type": "String",
                    "multiple": true
                }
            ],
            "itemtype": "method",
            "name": "setLineColors",
            "chainable": 1,
            "class": "zebkit.ui.Line"
        },
        {
            "file": "build/zebkit.js",
            "line": 15932,
            "description": "Get the label text",
            "return": {
                "description": "a zebkit label text",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 15941,
            "description": "Set the text field text model",
            "params": [
                {
                    "name": "m",
                    "description": "a text model to be set",
                    "type": "zebkit.data.TextModel|String"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "chainable": 1,
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 15953,
            "description": "Get a text model",
            "return": {
                "description": "a text model",
                "type": "zebkit.data.TextModel"
            },
            "itemtype": "method",
            "name": "getModel",
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 15962,
            "description": "Get the label text color",
            "return": {
                "description": "a zebkit label color",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getColor",
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 15971,
            "description": "Get the label text font",
            "return": {
                "description": "a zebkit label font",
                "type": "zebkit.ui.Font"
            },
            "itemtype": "method",
            "name": "getFont",
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 15980,
            "description": "Set the label text value",
            "params": [
                {
                    "name": "s",
                    "description": "a new label text",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 15998,
            "description": "Set the label text color",
            "params": [
                {
                    "name": "c",
                    "description": "a text color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 16013,
            "description": "Set the label text font",
            "params": [
                {
                    "name": "f",
                    "description": "a text font",
                    "type": "zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "chainable": 1,
            "class": "zebkit.ui.Label"
        },
        {
            "file": "build/zebkit.js",
            "line": 16082,
            "description": "Set the specified caption",
            "params": [
                {
                    "name": "c",
                    "description": "an image label caption text",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setCaption",
            "chainable": 1,
            "class": "zebkit.ui.ImageLabel"
        },
        {
            "file": "build/zebkit.js",
            "line": 16095,
            "description": "Set the specified label image",
            "params": [
                {
                    "name": "p",
                    "description": "a path to an image of image object",
                    "type": "String|Image"
                }
            ],
            "itemtype": "method",
            "name": "setImage",
            "chainable": 1,
            "class": "zebkit.ui.ImageLabel"
        },
        {
            "file": "build/zebkit.js",
            "line": 16108,
            "description": "Set the caption font",
            "params": [
                {
                    "name": "a",
                    "description": "font",
                    "type": "zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "chainable": 1,
            "class": "zebkit.ui.ImageLabel"
        },
        {
            "file": "build/zebkit.js",
            "line": 16122,
            "description": "Set the caption color",
            "params": [
                {
                    "name": "a",
                    "description": "color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "class": "zebkit.ui.ImageLabel"
        },
        {
            "file": "build/zebkit.js",
            "line": 16136,
            "description": "Get caption component",
            "return": {
                "description": "a caption component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getCaption",
            "class": "zebkit.ui.ImageLabel"
        },
        {
            "file": "build/zebkit.js",
            "line": 16145,
            "description": "Set the image alignment.",
            "params": [
                {
                    "name": "an",
                    "description": "alignment. Following values are possible:\n\n   - \"left\"\n   - \"right\"\n   - \"top\"\n   - \"bottom\"",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setImgAlignment",
            "chainable": 1,
            "class": "zebkit.ui.ImageLabel"
        },
        {
            "file": "build/zebkit.js",
            "line": 16199,
            "description": "Set image preferred size.",
            "params": [
                {
                    "name": "w",
                    "description": "a width and height if the second argument has not been specified",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "setImgPreferredSize",
            "chainable": 1,
            "class": "zebkit.ui.ImageLabel"
        },
        {
            "file": "build/zebkit.js",
            "line": 16221,
            "description": "Fired when a progress bar value has been updated\n\n           progress.on(function(src, oldValue) {\n               ...\n           });",
            "itemtype": "event",
            "name": "fired",
            "params": [
                {
                    "name": "src",
                    "description": "a progress bar that triggers\n the event",
                    "type": "zebkit.ui.Progress"
                },
                {
                    "name": "oldValue",
                    "description": "a progress bar previous value",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16241,
            "description": "Progress bar value",
            "itemtype": "attribute",
            "name": "value",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16249,
            "description": "Progress bar bundle width",
            "itemtype": "attribute",
            "name": "bundleWidth",
            "type": "{Integer}",
            "readonly": "",
            "default": "6",
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16257,
            "description": "Progress bar bundle height",
            "itemtype": "attribute",
            "name": "bundleHeight",
            "type": "{Integer}",
            "readonly": "",
            "default": "6",
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16266,
            "description": "Gap between bundle elements",
            "default": "2",
            "itemtype": "attribute",
            "name": "gap",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16275,
            "description": "Progress bar maximal value",
            "itemtype": "attribute",
            "name": "maxValue",
            "type": "{Integer}",
            "readonly": "",
            "default": "20",
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16287,
            "description": "Progress bar orientation",
            "default": "\"horizontal\"",
            "itemtype": "attribute",
            "name": "orient",
            "type": "{String}",
            "readonly": "",
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16358,
            "description": "Set the progress bar orientation",
            "params": [
                {
                    "name": "o",
                    "description": "an orientation: \"vertical\" or \"horizontal\"",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setOrientation",
            "chainable": 1,
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16372,
            "description": "Set maximal integer value the progress bar value can rich",
            "params": [
                {
                    "name": "m",
                    "description": "a maximal value the progress bar value can rich",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setMaxValue",
            "chainable": 1,
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16387,
            "description": "Set the current progress bar value",
            "params": [
                {
                    "name": "p",
                    "description": "a progress bar",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16404,
            "description": "Set the given gap between progress bar bundle elements",
            "params": [
                {
                    "name": "g",
                    "description": "a gap",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGap",
            "chainable": 1,
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16418,
            "description": "Set the progress bar bundle element view",
            "params": [
                {
                    "name": "v",
                    "description": "a progress bar bundle view",
                    "type": "zebkit.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setBundleView",
            "chainable": 1,
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16432,
            "description": "Set the progress bar bundle element size",
            "params": [
                {
                    "name": "w",
                    "description": "a bundle element width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a bundle element height",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setBundleSize",
            "chainable": 1,
            "class": "zebkit.ui.Progress"
        },
        {
            "file": "build/zebkit.js",
            "line": 16488,
            "description": "Current component state",
            "itemtype": "attribute",
            "name": "state",
            "readonly": "",
            "default": "null",
            "type": "{Object}",
            "class": "zebkit.ui.StatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16497,
            "description": "Set the component state",
            "params": [
                {
                    "name": "s",
                    "description": "a state",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setState",
            "chainable": 1,
            "class": "zebkit.ui.StatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16512,
            "description": "Define the method if the state value has to be\nsomehow converted to a view id. By default the state value\nitself is used as a view id.",
            "params": [
                {
                    "name": "s",
                    "description": "a state to be converted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a view ID",
                "type": "String"
            },
            "itemtype": "method",
            "name": "toViewId",
            "class": "zebkit.ui.StatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16521,
            "description": "Called every time the component state has been updated",
            "params": [
                {
                    "name": "o",
                    "description": "a previous component state",
                    "type": "Integer"
                },
                {
                    "name": "n",
                    "description": "a new component state",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "stateUpdated",
            "class": "zebkit.ui.StatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16557,
            "description": "Refresh state",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "syncState",
            "class": "zebkit.ui.StatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16742,
            "description": "Define key pressed events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebkit.ui.EvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16751,
            "description": "Define key released events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyReleased",
            "class": "zebkit.ui.EvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16760,
            "description": "Define pointer entered events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerEntered",
            "class": "zebkit.ui.EvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16769,
            "description": "Define pointer exited events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerExited",
            "class": "zebkit.ui.EvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16781,
            "description": "Define pointer pressed events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerPressed",
            "class": "zebkit.ui.EvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16790,
            "description": "Define pointer released events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerReleased",
            "class": "zebkit.ui.EvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16799,
            "description": "Define pointer dragged events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragged",
            "class": "zebkit.ui.EvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16831,
            "description": "Indicates if the component can have focus",
            "itemtype": "attribute",
            "name": "canHaveFocus",
            "readonly": "",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebkit.ui.CompositeEvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16840,
            "description": "Indicates this composite component can make its children components\nevent transparent.",
            "itemtype": "attribute",
            "name": "catchInput",
            "readonly": "",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebkit.ui.CompositeEvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16850,
            "description": "Component that has to be used as focus indicator anchor",
            "itemtype": "attribute",
            "name": "focusComponent",
            "type": "{zebkit.ui.Panel}",
            "default": "null",
            "readonly": "",
            "class": "zebkit.ui.CompositeEvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16859,
            "description": "Reference to an anchor focus marker component",
            "itemtype": "attribute",
            "name": "focusMarkerView",
            "readonly": "",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.CompositeEvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16880,
            "description": "Set the view that has to be rendered as focus marker when the component gains focus.",
            "params": [
                {
                    "name": "c",
                    "description": "a view.\nThe view can be a color or border string code or view\nor an implementation of zebkit.ui.View \"paint(g,x,y,w,h,t)\" method.",
                    "type": "String|zebkit.ui.View|Function"
                }
            ],
            "itemtype": "method",
            "name": "setFocusMarkerView",
            "chainable": 1,
            "class": "zebkit.ui.CompositeEvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16896,
            "description": "Says if the component can hold focus or not",
            "params": [
                {
                    "name": "b",
                    "description": "true if the component can gain focus",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setCanHaveFocus",
            "class": "zebkit.ui.CompositeEvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16912,
            "description": "Set the specified children component to be used as focus marker view anchor component.\nAnchor component is a component over that the focus marker view is painted.",
            "params": [
                {
                    "name": "c",
                    "description": "an anchor component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "setFocusAnchorComponent",
            "chainable": 1,
            "class": "zebkit.ui.CompositeEvStatePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 16953,
            "description": "Indicate if the button should\nfire event by pressed event",
            "itemtype": "attribute",
            "name": "isFireByPress",
            "type": "{Boolean}",
            "default": "false",
            "readonly": "",
            "class": "zebkit.ui.ButtonRepeatMix"
        },
        {
            "file": "build/zebkit.js",
            "line": 16963,
            "description": "Fire button event repeating period. -1 means\nthe button event repeating is disabled.",
            "itemtype": "attribute",
            "name": "firePeriod",
            "type": "{Integer}",
            "default": "-1",
            "readonly": "",
            "class": "zebkit.ui.ButtonRepeatMix"
        },
        {
            "file": "build/zebkit.js",
            "line": 16973,
            "description": "Indicates a time the repeat state events have to start in",
            "itemtype": "attribute",
            "name": "startIn",
            "type": "{Integer}",
            "readonly": "",
            "default": "400",
            "class": "zebkit.ui.ButtonRepeatMix"
        },
        {
            "file": "build/zebkit.js",
            "line": 16984,
            "description": "Set the mode the button has to fire events. Button can fire\nevent after it has been unpressed or immediately when it has\nbeen pressed. Also button can start firing events periodically\nwhen it has been pressed and held in the pressed state.",
            "params": [
                {
                    "name": "b",
                    "description": "true if the button has to fire event by\npressed event",
                    "type": "Boolean"
                },
                {
                    "name": "firePeriod",
                    "description": "the period of time the button\nhas to repeat firing events if it has been pressed and\nheld in pressed state. -1 means event doesn't have\nrepeated",
                    "type": "Integer"
                },
                {
                    "name": "startIn",
                    "description": "the timeout when repeat events\nhas to be initiated",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "setFireParams",
            "class": "zebkit.ui.ButtonRepeatMix"
        },
        {
            "file": "build/zebkit.js",
            "line": 17060,
            "description": "Fired when a button has been pressed\n\n            var b = new zebkit.ui.ArrowButton(\"left\");\n            b.on(function (src) {\n                ...\n            });\n\nButton can be adjusted in respect how it generates the pressed event. Event can be\ntriggered by pressed or clicked even. Also event can be generated periodically if\nthe button is kept in pressed state.",
            "itemtype": "event",
            "name": "arrowPressed",
            "params": [
                {
                    "name": "src",
                    "description": "a button that has been pressed",
                    "type": "zebkit.ui.ArrowButton"
                }
            ],
            "class": "zebkit.ui.ArrowButton"
        },
        {
            "file": "build/zebkit.js",
            "line": 17107,
            "description": "Arrow icon view direction",
            "itemtype": "attribute",
            "name": "direction",
            "type": "{String}",
            "default": "\"left\"",
            "readonly": "",
            "class": "zebkit.ui.ArrowButton"
        },
        {
            "file": "build/zebkit.js",
            "line": 17187,
            "description": "Fired when a button has been pressed\n\n           var b = new zebkit.ui.Button(\"Test\");\n           b.on(function (src) {\n               ...\n           });\n\nButton can be adjusted in respect how it generates the pressed event. Event can be\ntriggered by pressed or clicked even. Also event can be generated periodically if\nthe button is kept in pressed state.",
            "itemtype": "event",
            "name": "buttonPressed",
            "params": [
                {
                    "name": "src",
                    "description": "a button that has been pressed",
                    "type": "zebkit.ui.Button"
                }
            ],
            "class": "zebkit.ui.Button"
        },
        {
            "file": "build/zebkit.js",
            "line": 17236,
            "description": "Indicates the component can have focus",
            "itemtype": "attribute",
            "name": "canHaveFocus",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebkit.ui.Button"
        },
        {
            "file": "build/zebkit.js",
            "line": 17257,
            "description": "Fired when a state has been updated\n\n           var ch = new zebkit.ui.Checkbox(\"Test\");\n           ch.manager.on(function (src, ui) {\n               ...\n           });",
            "itemtype": "event",
            "name": "stateUpdated",
            "params": [
                {
                    "name": "src",
                    "description": "a switch manager that controls and tracks the event",
                    "type": "zebkit.ui.SwitchManager"
                },
                {
                    "name": "ui",
                    "description": "an UI component that triggers the event",
                    "type": "zebkit.ui.Checkbox"
                }
            ],
            "class": "zebkit.ui.SwitchManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 17277,
            "description": "Get current state of the given UI component",
            "params": [
                {
                    "name": "o",
                    "description": "an ui component",
                    "type": "zebkit.ui.Checkbox"
                }
            ],
            "return": {
                "description": "a boolean state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.SwitchManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 17287,
            "description": "Set the state for the given UI component",
            "params": [
                {
                    "name": "o",
                    "description": "an ui component",
                    "type": "zebkit.ui.Checkbox"
                },
                {
                    "name": "b",
                    "description": "a boolean state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "zebkit.ui.SwitchManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 17302,
            "description": "Toggle the current state",
            "params": [
                {
                    "name": "o",
                    "description": "an ui component",
                    "type": "zebkit.ui.Checkbox"
                }
            ],
            "itemtype": "method",
            "name": "toggle",
            "chainable": 1,
            "class": "zebkit.ui.SwitchManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 17313,
            "description": "Called every time a state has been updated.",
            "params": [
                {
                    "name": "o",
                    "description": "an ui component for which the state has been updated",
                    "type": "zebkit.ui.Checkbox"
                },
                {
                    "name": "b",
                    "description": "a new boolean state of the UI component",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "stateUpdated",
            "class": "zebkit.ui.SwitchManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 17324,
            "description": "Call when the manager has been installed for the given UI component",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "an UI component the switch manager is designated",
                    "type": "zebkit.ui.Checkbox"
                }
            ],
            "itemtype": "method",
            "name": "install",
            "class": "zebkit.ui.SwitchManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 17334,
            "description": "Call when the manager has been uninstalled for the given UI component",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "an UI component the switch manager is not anymore used",
                    "type": "zebkit.ui.Checkbox"
                }
            ],
            "itemtype": "method",
            "name": "uninstall",
            "class": "zebkit.ui.SwitchManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 17406,
            "description": "Set the check box state",
            "params": [
                {
                    "name": "b",
                    "description": "a state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "zebkit.ui.Switchable"
        },
        {
            "file": "build/zebkit.js",
            "line": 17417,
            "description": "Toggle the component current state",
            "itemtype": "method",
            "name": "toggle",
            "chainable": 1,
            "class": "zebkit.ui.Switchable"
        },
        {
            "file": "build/zebkit.js",
            "line": 17427,
            "description": "Get the check box state",
            "return": {
                "description": "a check box state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.Switchable"
        },
        {
            "file": "build/zebkit.js",
            "line": 17436,
            "description": "Set the specified switch manager",
            "params": [
                {
                    "name": "m",
                    "description": "a switch manager",
                    "type": "zebkit.ui.SwicthManager"
                }
            ],
            "itemtype": "method",
            "name": "setSwicthManager",
            "chainable": 1,
            "class": "zebkit.ui.Switchable"
        },
        {
            "file": "build/zebkit.js",
            "line": 17443,
            "description": "A switch manager",
            "itemtype": "attribute",
            "name": "manager",
            "readonly": "",
            "type": "{zebkit.ui.SwitchManager}",
            "class": "zebkit.ui.Switchable"
        },
        {
            "file": "build/zebkit.js",
            "line": 17539,
            "description": "Reference to box component",
            "itemtype": "attribute",
            "name": "box",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.Checkbox"
        },
        {
            "file": "build/zebkit.js",
            "line": 17565,
            "class": "zebkit.ui.Checkbox"
        },
        {
            "file": "build/zebkit.js",
            "line": 17572,
            "description": "Callback method that is called whenever a state of switch\nmanager has been updated.",
            "params": [
                {
                    "name": "b",
                    "description": "a new state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "switched",
            "class": "zebkit.ui.Checkbox"
        },
        {
            "file": "build/zebkit.js",
            "line": 17582,
            "description": "Map the specified state into its symbolic name.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "state",
                    "description": "a state",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a symbolic name of the state",
                "type": "String"
            },
            "itemtype": "method",
            "name": "toViewId",
            "class": "zebkit.ui.Checkbox"
        },
        {
            "file": "build/zebkit.js",
            "line": 17696,
            "description": "Mouse cursor type.",
            "itemtype": "attribute",
            "name": "cursorType",
            "default": "zebkit.ui.Cursor.HAND;",
            "type": "{String}",
            "readonly": "",
            "class": "zebkit.ui.Link"
        },
        {
            "file": "build/zebkit.js",
            "line": 17705,
            "description": "Set link font",
            "params": [
                {
                    "name": "f",
                    "description": "a font",
                    "type": "zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "chainable": 1,
            "class": "zebkit.ui.Link"
        },
        {
            "file": "build/zebkit.js",
            "line": 17722,
            "description": "Set the link text color for the specified link state",
            "params": [
                {
                    "name": "state",
                    "description": "a link state",
                    "type": "String"
                },
                {
                    "name": "c",
                    "description": "a link text color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "class": "zebkit.ui.Link"
        },
        {
            "file": "build/zebkit.js",
            "line": 17792,
            "description": "Fired when a toolbar element has been pressed\n\n           var t = new zebkit.ui.Toolbar();\n\n           // add three pressable icons\n           t.addImage(\"icon1.jpg\");\n           t.addImage(\"icon2.jpg\");\n           t.addLine();\n           t.addImage(\"ico3.jpg\");\n\n           // catch a toolbar icon has been pressed\n           t.on(function (src) {\n               ...\n           });",
            "itemtype": "event",
            "name": "pressed",
            "is_constructor": 1,
            "params": [
                {
                    "name": "src",
                    "description": "a toolbar element that has been pressed",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "class": "zebkit.ui.Toolbar"
        },
        {
            "file": "build/zebkit.js",
            "line": 17848,
            "description": "Test if the given component is a decorative element\nin the toolbar",
            "params": [
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "return true if the component is\ndecorative element of the toolbar",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isDecorative",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Toolbar"
        },
        {
            "file": "build/zebkit.js",
            "line": 17861,
            "description": "Add a radio box as the toolbar element that belongs to the\ngiven group and has the specified content component",
            "params": [
                {
                    "name": "g",
                    "description": "a radio group the radio box belongs",
                    "type": "zebkit.ui.Group"
                },
                {
                    "name": "c",
                    "description": "a content",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "a component that has been added",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "addRadio",
            "class": "zebkit.ui.Toolbar"
        },
        {
            "file": "build/zebkit.js",
            "line": 17875,
            "description": "Add a check box as the toolbar element with the specified content\ncomponent",
            "params": [
                {
                    "name": "c",
                    "description": "a content",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "a component that has been added",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "addSwitcher",
            "class": "zebkit.ui.Toolbar"
        },
        {
            "file": "build/zebkit.js",
            "line": 17888,
            "description": "Add an image as the toolbar element",
            "params": [
                {
                    "name": "img",
                    "description": "an image or a path to the image",
                    "type": "String|Image"
                }
            ],
            "return": {
                "description": "a component that has been added",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "addImage",
            "class": "zebkit.ui.Toolbar"
        },
        {
            "file": "build/zebkit.js",
            "line": 17899,
            "description": "Add line to the toolbar component. Line is a decorative ]\nelement that logically splits toolbar elements. Line as any\nother decorative element doesn't fire event",
            "return": {
                "description": "a component that has been added",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "addLine",
            "class": "zebkit.ui.Toolbar"
        },
        {
            "file": "build/zebkit.js",
            "line": 17913,
            "description": "Add the given component as decorative element of the toolbar.\nDecorative elements don't fire event and cannot be pressed",
            "params": [
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "a component that has been added",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "addDecorative",
            "class": "zebkit.ui.Toolbar"
        },
        {
            "file": "build/zebkit.js",
            "line": 17977,
            "description": "Border panel label component",
            "itemtype": "attribute",
            "name": "label",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 17996,
            "description": "Border panel label content component",
            "itemtype": "attribute",
            "name": "content",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18004,
            "description": "Vertical gap. Define top and bottom paddings between\nborder panel border and the border panel content",
            "itemtype": "attribute",
            "name": "vGap",
            "type": "{Integer}",
            "readonly": "",
            "default": "0",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18013,
            "description": "Horizontal gap. Define left and right paddings between\nborder panel border and the border panel content",
            "itemtype": "attribute",
            "name": "hGap",
            "type": "{Integer}",
            "readonly": "",
            "default": "0",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18023,
            "description": "Border panel label indent",
            "type": "{Integer}",
            "itemtype": "attribute",
            "name": "indent",
            "readonly": "",
            "default": "4",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18032,
            "description": "Border panel title area arrangement. Border title can be placed\neither at the top or bottom area of border panel component.",
            "type": "{String}",
            "itemtype": "attribute",
            "name": "orient",
            "readonly": "",
            "default": "\"top\"",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18042,
            "description": "Border panel title horizontal alignment.",
            "type": "{String}",
            "itemtype": "attribute",
            "name": "alignment",
            "readonly": "",
            "default": "\"left\"",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18051,
            "description": "Get the border panel title info. The information\ndescribes a rectangular area the title occupies, the\ntitle location and alignment",
            "return": {
                "description": "a title info\n\n {\n     x: {Integer}, y: {Integer},\n     width: {Integer}, height: {Integer},\n     orient: {Integer}\n }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getTitleInfo",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18113,
            "description": "Set vertical and horizontal paddings between the border panel border and the content\nof the border panel",
            "params": [
                {
                    "name": "vg",
                    "description": "a top and bottom paddings",
                    "type": "Integer"
                },
                {
                    "name": "hg",
                    "description": "a left and right paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGaps",
            "chainable": 1,
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18130,
            "description": "Set border panel title orientation. The title area can be\nplaced either at the top or at the bottom of border panel\ncomponent.",
            "params": [
                {
                    "name": "o",
                    "description": "a border title orientation. Can be \"top\" or \"bottom\"",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setOrientation",
            "chainable": 1,
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18146,
            "description": "Set border panel title horizontal alignment.",
            "params": [
                {
                    "name": "a",
                    "description": "a horizontal alignment. Use \"left\", \"right\", \"center\" as\nthe parameter value.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setAlignment",
            "chainable": 1,
            "class": "zebkit.ui.BorderPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18287,
            "description": "A minimal size of the left (or top) sizable panel",
            "itemtype": "attribute",
            "name": "leftMinSize",
            "type": "{Integer}",
            "readonly": "",
            "default": "50",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18295,
            "description": "A minimal size of right (or bottom) sizable panel",
            "itemtype": "attribute",
            "name": "rightMinSize",
            "type": "{Integer}",
            "readonly": "",
            "default": "50",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18303,
            "description": "Indicates if the splitter bar can be moved",
            "itemtype": "attribute",
            "name": "isMoveable",
            "type": "{Boolean}",
            "readonly": "",
            "default": "true",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18311,
            "description": "A gap between gripper element and first and second UI components",
            "itemtype": "attribute",
            "name": "gap",
            "type": "{Integer}",
            "readonly": "",
            "default": "1",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18319,
            "description": "A reference to gripper UI component",
            "itemtype": "attribute",
            "name": "gripper",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18326,
            "description": "A reference to left (top) sizable UI component",
            "itemtype": "attribute",
            "name": "leftComp",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18333,
            "description": "A reference to right (bottom) sizable UI component",
            "itemtype": "attribute",
            "name": "rightComp",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18357,
            "description": "Set split panel orientation.",
            "params": [
                {
                    "name": "o",
                    "description": "an orientation (\"horizontal\" or \"vertical\")",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setOrientation",
            "chainable": 1,
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18371,
            "description": "Set gripper element location",
            "params": [
                {
                    "name": "l",
                    "description": "a location of the gripper element",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGripperLoc",
            "chainable": 1,
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18463,
            "description": "Set gap between gripper element and sizable panels",
            "params": [
                {
                    "name": "g",
                    "description": "a gap",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGap",
            "chainable": 1,
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18477,
            "description": "Set the minimal size of the left (or top) sizeable panel",
            "params": [
                {
                    "name": "m",
                    "description": "a minimal possible size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLeftMinSize",
            "chainable": 1,
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18491,
            "description": "Set the minimal size of the right (or bottom) sizeable panel",
            "params": [
                {
                    "name": "m",
                    "description": "a minimal possible size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRightMinSize",
            "chainable": 1,
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18505,
            "description": "Set the given gripper movable state",
            "params": [
                {
                    "name": "b",
                    "description": "the gripper movable state.",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setGripperMovable",
            "class": "zebkit.ui.SplitPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18580,
            "description": "Fired when extender is collapsed or extended\n\n            var ex = new zebkit.ui.CollapsiblePan(\"Title\", pan);\n            ex.on(function (src, isCollapsed) {\n                ...\n            });",
            "itemtype": "event",
            "name": "fired",
            "params": [
                {
                    "name": "src",
                    "description": "an extender UI component that generates the event",
                    "type": "zebkit.ui.CollapsiblePan"
                },
                {
                    "name": "isCollapsed",
                    "description": "a state of the extender UI component",
                    "type": "Boolean"
                }
            ],
            "class": "zebkit.ui.CollapsiblePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18596,
            "description": "Title panel",
            "type": "{zebkit.ui.Panel}",
            "itemtype": "attribute",
            "name": "titlePan",
            "readonly": "",
            "class": "zebkit.ui.CollapsiblePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18608,
            "description": "Content panel",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "contentPan",
            "class": "zebkit.ui.CollapsiblePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 18798,
            "description": "Set the specified border to be applied for status bar children components",
            "params": [
                {
                    "name": "v",
                    "description": "a border",
                    "type": "zebkit.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setBorderView",
            "chainable": 1,
            "class": "zebkit.ui.StatusBar"
        },
        {
            "file": "build/zebkit.js",
            "line": 18845,
            "description": "Fired when a target component has been scrolled\n\n           scrollManager.on(function(px, py) {\n               ...\n           });",
            "itemtype": "event",
            "name": "scrolled",
            "params": [
                {
                    "name": "px",
                    "description": "a previous x location target component scroll location",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a previous y location target component scroll location",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18857,
            "description": "Fired when a scroll state has been updated\n\n           scrollManager.scrollStateUpdated = function(x, y, px, py) {\n               ...\n           };",
            "itemtype": "event",
            "name": "scrollStateUpdated",
            "params": [
                {
                    "name": "x",
                    "description": "a new x location target component scroll location",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a new y location target component scroll location",
                    "type": "Integer"
                },
                {
                    "name": "px",
                    "description": "a previous x location target component scroll location",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a previous y location target component scroll location",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18874,
            "description": "Target UI component for that the scroll manager has been instantiated",
            "itemtype": "attribute",
            "name": "target",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18890,
            "description": "Get current target component x scroll location",
            "return": {
                "description": "a x scroll location",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getSX",
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18899,
            "description": "Get current target component y scroll location",
            "return": {
                "description": "a y scroll location",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getSY",
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18908,
            "description": "Set a target component scroll x location to the\nspecified value",
            "params": [
                {
                    "name": "v",
                    "description": "a x scroll location",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrollXTo",
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18918,
            "description": "Set a target component scroll y location to the\nspecified value",
            "params": [
                {
                    "name": "v",
                    "description": "a y scroll location",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrollYTo",
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18928,
            "description": "Scroll the target component into the specified location",
            "params": [
                {
                    "name": "x",
                    "description": "a x location",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y location",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrollTo",
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18948,
            "description": "Make visible the given rectangular area of the\nscrolled target component",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate of top left corner\nof the rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate of top left corner\nof the rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of the rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the rectangular area",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "makeVisible",
            "chainable": 1,
            "class": "zebkit.ui.ScrollManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 18987,
            "description": "Increment button",
            "itemtype": "attribute",
            "name": "incBt",
            "type": "{zebkit.ui.Button}",
            "readonly": "",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 18994,
            "description": "Decrement button",
            "itemtype": "attribute",
            "name": "decBt",
            "type": "{zebkit.ui.Button}",
            "readonly": "",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19001,
            "description": "Scroll bar bundle component",
            "itemtype": "attribute",
            "name": "bundle",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19044,
            "description": "Maximal possible value",
            "itemtype": "attribute",
            "name": "max",
            "type": "{Integer}",
            "readonly": "",
            "default": "100",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19053,
            "description": "Page increment value",
            "itemtype": "attribute",
            "name": "pageIncrement",
            "type": "{Integer}",
            "readonly": "",
            "default": "20",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19062,
            "description": "Unit increment value",
            "itemtype": "attribute",
            "name": "unitIncrement",
            "type": "{Integer}",
            "readonly": "",
            "default": "5",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19074,
            "description": "Evaluate if the given point is in scroll bar bundle element",
            "params": [
                {
                    "name": "x",
                    "description": "a x location",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y location",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the point is located inside the\nscroll bar bundle element",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isInBundle",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19110,
            "description": "Define composite component catch input method",
            "params": [
                {
                    "name": "child",
                    "description": "a children component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "true if the given children component has to be input events transparent",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "catchInput",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19140,
            "description": "Define pointer dragged events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragged",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19153,
            "description": "Define pointer drag started  events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragStarted",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19165,
            "description": "Define pointer drag ended events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragEnded",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19174,
            "description": "Define pointer clicked events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerClicked",
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19243,
            "description": "Set the specified maximum value of the scroll bar component",
            "params": [
                {
                    "name": "m",
                    "description": "a maximum value",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setMaximum",
            "chainable": 1,
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19260,
            "description": "Set the scroll bar value.",
            "params": [
                {
                    "name": "v",
                    "description": "a scroll bar value.",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "zebkit.ui.Scroll"
        },
        {
            "file": "build/zebkit.js",
            "line": 19358,
            "description": "Vertical scroll bar component",
            "itemtype": "attribute",
            "name": "vBar",
            "type": "{zebkit.ui.Scroll}",
            "readonly": "",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19365,
            "description": "Horizontal scroll bar component",
            "itemtype": "attribute",
            "name": "hBar",
            "type": "{zebkit.ui.Scroll}",
            "readonly": "",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19372,
            "description": "Scrollable target component",
            "itemtype": "attribute",
            "name": "scrollObj",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19449,
            "description": "Indicate if the scroll bars should be hidden\nwhen they are not active",
            "itemtype": "attribute",
            "name": "autoHide",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19460,
            "description": "Set the given auto hide state.",
            "params": [
                {
                    "name": "b",
                    "description": "an auto hide state.",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setAutoHide",
            "chainable": 1,
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19499,
            "description": "Scroll horizontally and vertically to the given positions",
            "params": [
                {
                    "name": "sx",
                    "description": "a horizontal position",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "a vertical position",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrollTo",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19509,
            "description": "Scroll horizontally",
            "params": [
                {
                    "name": "sx",
                    "description": "a position",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrollXTo",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19518,
            "description": "Scroll vertically",
            "params": [
                {
                    "name": "sy",
                    "description": "a position",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrollYTo",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19547,
            "description": "Scroll manager listener method that is called every time\na target component has been scrolled",
            "params": [
                {
                    "name": "psx",
                    "description": "previous scroll x location",
                    "type": "Integer"
                },
                {
                    "name": "psy",
                    "description": "previous scroll y location",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrolled",
            "class": "zebkit.ui.ScrollPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19789,
            "description": "Define pointer drag started events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragStarted",
            "class": "zebkit.ui.MobileScrollMan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19810,
            "description": "Define pointer dragged events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragged",
            "class": "zebkit.ui.MobileScrollMan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19843,
            "description": "Define pointer drag ended events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragEnded",
            "class": "zebkit.ui.MobileScrollMan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19866,
            "description": "Define pointer pressed events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerPressed",
            "class": "zebkit.ui.MobileScrollMan"
        },
        {
            "file": "build/zebkit.js",
            "line": 19954,
            "description": "Get a value",
            "return": {
                "description": "a value",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.Slider"
        },
        {
            "file": "build/zebkit.js",
            "line": 20456,
            "description": "Fired when a new tab page has been selected\n\n         tabs.on(function(src, selectedIndex) {\n            ...\n         });",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "src",
                    "description": "a tabs component that triggers the event",
                    "type": "zebkit.ui.Tabs"
                },
                {
                    "name": "selectedIndex",
                    "description": "a tab page index that has been selected",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20469,
            "description": "Selected tab page index",
            "itemtype": "attribute",
            "name": "selectedIndex",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20608,
            "description": "Set the given tab caption for the specified tab or both - selected and not selected - states.",
            "params": [
                {
                    "name": "b",
                    "description": "the tab state. true means selected state.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "s",
                    "description": "the tab caption",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setCaption",
            "chainable": 1,
            "class": "zebkit.ui.Tabs.TabView"
        },
        {
            "file": "build/zebkit.js",
            "line": 20626,
            "description": "Get the tab caption for the specified tab state",
            "params": [
                {
                    "name": "b",
                    "description": "the tab state. true means selected state.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the tab caption",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getCaption",
            "class": "zebkit.ui.Tabs.TabView"
        },
        {
            "file": "build/zebkit.js",
            "line": 20636,
            "description": "Set the given tab caption text color for the specified tab or both\nselected and not selected states.",
            "params": [
                {
                    "name": "b",
                    "description": "the tab state. true means selected state.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "c",
                    "description": "the tab caption",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "class": "zebkit.ui.Tabs.TabView"
        },
        {
            "file": "build/zebkit.js",
            "line": 20658,
            "description": "Set the given tab caption text font for the specified or both\nselected not slected states.",
            "params": [
                {
                    "name": "b",
                    "description": "the tab state. true means selected state.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "f",
                    "description": "the tab text font",
                    "type": "zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "chainable": 1,
            "class": "zebkit.ui.Tabs.TabView"
        },
        {
            "file": "build/zebkit.js",
            "line": 20681,
            "description": "Set the tab icon.",
            "params": [
                {
                    "name": "c",
                    "description": "an icon path or image object",
                    "type": "String|Image"
                }
            ],
            "itemtype": "method",
            "name": "setIcon",
            "chainable": 1,
            "class": "zebkit.ui.Tabs.TabView"
        },
        {
            "file": "build/zebkit.js",
            "line": 20693,
            "description": "The method is invoked every time the tab selection state has been updated",
            "params": [
                {
                    "name": "tabs",
                    "description": "the tabs component the tab belongs",
                    "type": "zebkit.ui.Tabs"
                },
                {
                    "name": "i",
                    "description": "an index of the tab",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a new state of the tab",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "selected",
            "class": "zebkit.ui.Tabs.TabView"
        },
        {
            "file": "build/zebkit.js",
            "line": 20711,
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20715,
            "description": "Tab orientation",
            "itemtype": "attribute",
            "name": "orient",
            "type": "{String}",
            "readonly": "",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20723,
            "description": "Sides gap",
            "itemtype": "attribute",
            "name": "sideSpace",
            "type": "{Integer}",
            "readonly": "",
            "default": "1",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20732,
            "description": "Declare can have focus attribute to make the component focusable",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "canHaveFocus",
            "readonly": "",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20740,
            "description": "Define pointer moved event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerMoved",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20756,
            "description": "Define pointer drag ended event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragEnded",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20772,
            "description": "Define pointer exited event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerExited",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20787,
            "description": "Navigate to a next tab page following the given direction starting\nfrom the given page",
            "params": [
                {
                    "name": "page",
                    "description": "a starting page index",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "a navigation direction. 1 means forward and -1 means backward\nnavigation.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a new tab page index",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "next",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20831,
            "description": "Test if the given tab page is in enabled state",
            "params": [
                {
                    "name": "index",
                    "description": "a tab page index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a tab page state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isTabEnabled",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20871,
            "description": "Draw currently activate tab page marker.",
            "params": [
                {
                    "name": "g",
                    "description": "a graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "r",
                    "description": "a tab page title rectangular area",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "drawMarker",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20890,
            "description": "Paint the given tab page title",
            "params": [
                {
                    "name": "g",
                    "description": "a graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "pageIndex",
                    "description": "a tab page index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "paintTab",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 20920,
            "description": "Get the given tab page title rectangular bounds",
            "params": [
                {
                    "name": "i",
                    "description": "a tab page index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a tab page rectangular bounds\n\n   {x:{Integer}, y:{Integer}, width:{Integer}, height:{Integer}}",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getTabBounds",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21045,
            "description": "Define recalc method to compute the component metrical characteristics",
            "itemtype": "method",
            "name": "recalc",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21119,
            "description": "Get tab index located at the given location",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an index of the tab that is\ndetected at the given location. -1 if no any\ntab can be found",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getTabAt",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21156,
            "description": "Define key pressed event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21179,
            "description": "Define pointer clicked  event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerClicked",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21191,
            "description": "Switch to the given tab page",
            "params": [
                {
                    "name": "index",
                    "description": "a tab page index to be navigated",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "chainable": 1,
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21217,
            "description": "Get the given tab. Using the tab you can control tab caption,\nicon.",
            "params": [
                {
                    "name": "pageIndex",
                    "description": "a tab page index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "zebkit.ui.Tabs.TabView"
            },
            "itemtype": "method",
            "name": "getTab",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21228,
            "description": "Set tab side spaces.",
            "params": [
                {
                    "name": "sideSpace",
                    "description": "[description]",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setSideSpace",
            "chainable": 1,
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21251,
            "description": "Set the tab page element alignments",
            "params": [
                {
                    "name": "o",
                    "description": "an alignment. The valid value is one of the following:\n\"left\", \"right\", \"top\", \"bottom\"",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setAlignment",
            "chainable": 1,
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21266,
            "description": "Set enabled state for the given tab page",
            "params": [
                {
                    "name": "i",
                    "description": "a tab page index",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a tab page enabled state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "enableTab",
            "chainable": 1,
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21285,
            "description": "Set number of views to render different Tab component elements",
            "params": [
                {
                    "name": "a",
                    "description": "set of views as dictionary where key is a view\nname and the value is a view instance, string(for color), or render\nfunction. The following view elements can be passed:\n\n\n    {\n       \"out\"       : <view to render not selected tab page>,\n       \"over\"      : <view to render a tab page when pointer is over>\n       \"selected\"  : <a view to render selected tab page>\n       \"marker\"    : <a marker view to be rendered around tab page title>\n    }",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViews",
            "class": "zebkit.ui.Tabs"
        },
        {
            "file": "build/zebkit.js",
            "line": 21380,
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 21446,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21458,
            "description": "Selection color",
            "itemtype": "attribute",
            "name": "selection",
            "type": "{String}",
            "readonly": "",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21466,
            "description": "Specify the text field cursor blinking period in milliseconds.\n-1 means no blinkable cursor",
            "type": "{Number}",
            "default": "-1",
            "readonly": "",
            "itemtype": "attribute",
            "name": "blinkigPeriod",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21478,
            "description": "Cursor type",
            "itemtype": "attribute",
            "name": "cursorType",
            "type": "{String}",
            "default": "zebkit.ui.Cursor.TEXT;",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21486,
            "description": "Text alignment",
            "itemtype": "attribute",
            "name": "textAlign",
            "type": "{String}",
            "default": "\"left\"",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21494,
            "description": "Cursor view",
            "itemtype": "attribute",
            "name": "curView",
            "type": "{zebkit.ui.View}",
            "readonly": "",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21501,
            "description": "Indicate if the text field is editable",
            "itemtype": "attribute",
            "name": "isEditable",
            "type": "{Boolean}",
            "default": "true",
            "readonly": "",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21510,
            "description": "Set the specified blinking period of the text field cursor",
            "params": [
                {
                    "name": "period",
                    "description": "a text field cursor blinking period (in milliseconds),\nuse -1 to disable cursor blinking. If the argument is not passed the default (500ms)\nblinking period will be applied.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "setBlinking",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21530,
            "description": "Set the text algnment.",
            "itemtype": "method",
            "name": "setTextAlignment",
            "params": [
                {
                    "name": "a",
                    "description": "a text alignment. Use \"left\" or \"right\" as the parameter value",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21587,
            "description": "Compute a text column and row by the given location.",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a text row and column as an object { row:, col }.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getTextRowColAt",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21688,
            "description": "Remove selected text",
            "itemtype": "method",
            "name": "removeSelected",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21700,
            "description": "Start selection.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "startSelection",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21724,
            "description": "Select all text.",
            "itemtype": "method",
            "name": "selectAll",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21734,
            "description": "Shortcut event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a shortcut event",
                    "type": "java.ui.ShortcutEvent"
                }
            ],
            "itemtype": "method",
            "name": "shortcutFired",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21843,
            "description": "Test if the given key pressed event has to be processed",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "return": {
                "description": "true if the given key pressed event doesn't\nhave be processed",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isFiltered",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21858,
            "description": "Remove the specified part of edited text",
            "params": [
                {
                    "name": "pos",
                    "description": "a start position of a removed text",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a size of removed text",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21883,
            "description": "Insert the specified text into the edited text at the given position",
            "params": [
                {
                    "name": "pos",
                    "description": "a start position of a removed text",
                    "type": "Integer"
                },
                {
                    "name": "s",
                    "description": "a text to be inserted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if repaint has been requested",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "write",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21931,
            "description": "Draw the text field cursor",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "g",
                    "description": "a 2D context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "itemtype": "method",
            "name": "drawCursor",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 21972,
            "description": "Select the specified part of the edited text",
            "params": [
                {
                    "name": "startOffset",
                    "description": "a start position of a selected text",
                    "type": "Integer"
                },
                {
                    "name": "endOffset",
                    "description": "an end position of a selected text",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22006,
            "description": "Test if the text field has a selected text",
            "return": {
                "description": "true if the text field has a selected text",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "hasSelection",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22075,
            "description": "Set the specified hint text to be drawn with the given font and color.\nThe hint is not-editable text that is shown in empty text field to help\na user to understand which input the text field expects.",
            "params": [
                {
                    "name": "hint",
                    "description": "a hint text, view or view render method",
                    "type": "String|zebkit.ui.View|Function"
                }
            ],
            "itemtype": "method",
            "name": "setHint",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22089,
            "description": "Performs undo operation",
            "itemtype": "method",
            "name": "undo",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22119,
            "description": "Performs redo operation",
            "itemtype": "method",
            "name": "redo",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22135,
            "description": "Get a starting position (row and column) of a selected text",
            "return": {
                "description": "a position of a selected text. First element\nof is a row and second column of selected text. null if\nthere is no any selected text",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getStartSelection",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22148,
            "description": "Get an ending position (row and column) of a selected text",
            "return": {
                "description": "a position of a selected text. First element\nof is a row and second column of selected text. null if\nthere is no any selected text",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getEndSelection",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22161,
            "description": "Get a selected text",
            "return": {
                "description": "a selected text",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getSelectedText",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22225,
            "description": "Force text field cursor repainting.",
            "itemtype": "method",
            "name": "repaintCursor",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22238,
            "description": "Clear a text selection.",
            "itemtype": "method",
            "name": "clearSelection",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22274,
            "description": "Cut selected text",
            "return": {
                "description": "a text that has been selected and cut",
                "type": "String"
            },
            "itemtype": "method",
            "name": "cut",
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22285,
            "description": "Set the specified cursor position controller",
            "params": [
                {
                    "name": "p",
                    "description": "a position controller",
                    "type": "zebkit.util.Position"
                }
            ],
            "itemtype": "method",
            "name": "setPosition",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22306,
            "description": "Set the cursor view. The view defines rendering of the text field\ncursor.",
            "params": [
                {
                    "name": "v",
                    "description": "a cursor view",
                    "type": "zebkit.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setCursorView",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22323,
            "description": "Adjust the size of the text field component to be enough to place the given\nnumber of rows and columns.",
            "params": [
                {
                    "name": "r",
                    "description": "a row of the text the height of the text field has to be adjusted",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a column of the text the width of the text field has to be adjusted",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPSByRowsCols",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22341,
            "description": "Control the text field editable state",
            "params": [
                {
                    "name": "b",
                    "description": "true to make the text field editable",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setEditable",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22380,
            "description": "Set selection view",
            "params": [
                {
                    "name": "c",
                    "description": "a selection color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setSelectionView",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22453,
            "description": "Set the text content of the text field component",
            "params": [
                {
                    "name": "s",
                    "description": "a text the text field component has to be filled",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "zebkit.ui.TextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22531,
            "description": "Set flag that indicates if the last password character has to be visible.",
            "params": [
                {
                    "name": "b",
                    "description": "a boolean flag that says if last password character has\nto be visible.",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setShowLast",
            "chainable": 1,
            "class": "zebkit.ui.PassTextField"
        },
        {
            "file": "build/zebkit.js",
            "line": 22548,
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 22567,
            "description": "Fire when a list item has been selected:\n\n    list.on(\"selected\", function(src, prev) {\n        ...\n    });",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "src",
                    "description": "a list that triggers the event",
                    "type": "zebkit.ui.BaseList"
                },
                {
                    "name": "prev",
                    "description": "a previous selected index, return null if the selected item has been re-selected",
                    "type": "Integer|Object"
                }
            ],
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22595,
            "description": "Currently selected list item index",
            "type": "{Integer}",
            "itemtype": "attribute",
            "name": "selectedIndex",
            "default": "-1",
            "readonly": "",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22606,
            "description": "Indicate the current mode the list items selection has to work",
            "readonly": "",
            "default": "false",
            "itemtype": "attribute",
            "name": "isComboMode",
            "type": "{Boolean}",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22615,
            "description": "Scroll manager",
            "itemtype": "attribute",
            "name": "scrollManager",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "type": "{zebkit.ui.ScrollManager}",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22629,
            "description": "List model",
            "readonly": "",
            "itemtype": "attribute",
            "name": "model",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22645,
            "description": "List model the component visualizes",
            "itemtype": "attribute",
            "name": "model",
            "type": "{zebkit.data.ListModel}",
            "readonly": "",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22652,
            "description": "Select the specified list item.",
            "params": [
                {
                    "name": "v",
                    "description": "a list item to be selected. Use null as\nthe parameter value to clean an item selection",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an index of a selected item",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "setValue",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22673,
            "description": "Get the list component selected item",
            "return": {
                "description": "a selected item",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22682,
            "description": "Test if the given item is selectable.",
            "params": [
                {
                    "name": "i",
                    "description": "an item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the given item is selectable",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isItemSelectable",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22692,
            "description": "Get selected list item",
            "return": {
                "description": "an item",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getSelected",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22719,
            "description": "Test if the given list item is selected",
            "params": [
                {
                    "name": "i",
                    "description": "an item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the item with the given index is selected",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isSelected",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22729,
            "description": "Called when a pointer (pointer or finger on touch screen) is moved\nto a new location",
            "params": [
                {
                    "name": "x",
                    "description": "a pointer x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a pointer y coordinate",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "$pointerMoved",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22752,
            "description": "Return the given list item location.",
            "params": [
                {
                    "name": "i",
                    "description": "a list item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a location of the list item. The result is object that\nhas the following structure:\n                   { x:{Integer}, y:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getItemLocation",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22771,
            "description": "Return the given list item size.",
            "params": [
                {
                    "name": "i",
                    "description": "a list item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a size of the list item. The result is object that\nhas the following structure:\n                   { width:{Integer}, height:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getItemSize",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22799,
            "description": "Detect an item by the specified location",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a list item that is located at the given position.\n-1 if no any list item can be found.",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getItemIdxAt",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22811,
            "description": "Calculate maximal width and maximal height the items in the list have",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "a max items size",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "calcMaxItemSize",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22832,
            "description": "Force repainting of the given list items",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "p",
                    "description": "an index of the first list item to be repainted",
                    "type": "Integer"
                },
                {
                    "name": "n",
                    "description": "an index of the second list item to be repainted",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "repaintByOffsets",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22857,
            "description": "Draw the given list view element identified by the given id\non the given list item.",
            "params": [
                {
                    "name": "g",
                    "description": "a graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "id",
                    "description": "a view id",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "a list item index",
                    "type": "Integer"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "drawViewAt",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22878,
            "description": "Draw the given list view element identified by the given id\nat the specified location.",
            "params": [
                {
                    "name": "g",
                    "description": "a graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "id",
                    "description": "a view id",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "a x coordinate the view has to be drawn",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate the view has to be drawn",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a view width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a view height",
                    "type": "Integer"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "drawView",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22907,
            "description": "Select the given list item",
            "params": [
                {
                    "name": "index",
                    "description": "an item index to be selected",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 22934,
            "description": "Fire selected event",
            "params": [
                {
                    "name": "prev",
                    "description": "a previous selected item index. null if the\nsame item has been re-selected",
                    "type": "Integer|null"
                }
            ],
            "itemtype": "method",
            "name": "fireSelected",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23011,
            "description": "Select the given list item. The method is called when an item\nselection is triggered by a user interaction: key board, or pointer",
            "params": [
                {
                    "name": "o",
                    "description": "an item index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "$select",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23022,
            "description": "Define key typed events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyTyped",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23061,
            "description": "Find a next selectable list item starting from the given offset\nwith the specified direction",
            "params": [
                {
                    "name": "off",
                    "description": "a start item index to perform search",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "a direction increment. Cam be -1 or 1",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a next selectable item index",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "findSelectable",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23102,
            "description": "Set the list model to be rendered with the list component",
            "params": [
                {
                    "name": "m",
                    "description": "a list model",
                    "type": "zebkit.data.ListModel"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "chainable": 1,
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23129,
            "description": "Set the given position controller. List component uses position to\ntrack virtual cursor.",
            "params": [
                {
                    "name": "c",
                    "description": "a position",
                    "type": "zebkit.util.Position"
                }
            ],
            "itemtype": "method",
            "name": "setPosition",
            "chainable": 1,
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23150,
            "description": "Set the list items view provider. Defining a view provider allows developers\nto customize list item rendering.",
            "params": [
                {
                    "name": "v",
                    "description": "a view provider class instance or a function that\nsays which view has to be used for the given list model data. The function\nhas to satisfy the following method signature: \"function(list, modelItem, index)\"",
                    "type": "Object|Function"
                }
            ],
            "itemtype": "method",
            "name": "setViewProvider",
            "chainable": 1,
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23187,
            "description": "The method returns the page size that has to be scroll up or down",
            "params": [
                {
                    "name": "d",
                    "description": "a scrolling direction. -1 means scroll up, 1 means scroll down",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a number of list items to be scrolled",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "pageSize",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23210,
            "description": "Sets the views for the list visual elements. The following elements are\nsupported:\n\n  - \"select\" -  a selection view element\n  - \"top.marker\" - a position marker view element that is rendered  on top of list item\n  - \"marker\" - a position marker view element",
            "params": [
                {
                    "name": "views",
                    "description": "view elements",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViews",
            "class": "zebkit.ui.BaseList"
        },
        {
            "file": "build/zebkit.js",
            "line": 23281,
            "description": "Index of the first visible list item",
            "readonly": "",
            "itemtype": "attribute",
            "name": "firstVisible",
            "type": "{Integer}",
            "access": "private",
            "tagname": "",
            "class": "zebkit.ui.List"
        },
        {
            "file": "build/zebkit.js",
            "line": 23290,
            "description": "Y coordinate of the first visible list item",
            "readonly": "",
            "itemtype": "attribute",
            "name": "firstVisibleY",
            "type": "{Integer}",
            "access": "private",
            "tagname": "",
            "class": "zebkit.ui.List"
        },
        {
            "file": "build/zebkit.js",
            "line": 23299,
            "description": "Internal flag to track list items visibility status. It is set\nto false to trigger list items metrics and visibility recalculation",
            "itemtype": "attribute",
            "name": "visValid",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "zebkit.ui.List"
        },
        {
            "file": "build/zebkit.js",
            "line": 23323,
            "description": "Reference to text render that is used to paint a list items",
            "type": "{zebkit.ui.StringRender}",
            "itemtype": "attribute",
            "name": "text",
            "readonly": "",
            "class": "zebkit.ui.List.ViewProvider"
        },
        {
            "file": "build/zebkit.js",
            "line": 23347,
            "description": "Get a view for the given model data element of the\nspecified list component",
            "params": [
                {
                    "name": "target",
                    "description": "a list component",
                    "type": "zebkit.ui.List"
                },
                {
                    "name": "value",
                    "description": "a data model value",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "an item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a view to be used to render\nthe given list component item",
                "type": "zebkit.ui.View"
            },
            "itemtype": "method",
            "name": "getView",
            "class": "zebkit.ui.List.ViewProvider"
        },
        {
            "file": "build/zebkit.js",
            "line": 23372,
            "class": "zebkit.ui.List"
        },
        {
            "file": "build/zebkit.js",
            "line": 23380,
            "description": "Extra list item side gaps",
            "type": "{Integer}",
            "itemtype": "attribute",
            "name": "gap",
            "default": "2",
            "readonly": "",
            "class": "zebkit.ui.List"
        },
        {
            "file": "build/zebkit.js",
            "line": 23389,
            "description": "Set the left, right, top and bottom a list item paddings",
            "params": [
                {
                    "name": "g",
                    "description": "a left, right, top and bottom a list item paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setItemGap",
            "chainable": 1,
            "class": "zebkit.ui.List"
        },
        {
            "file": "build/zebkit.js",
            "line": 23796,
            "description": "Fired when a new value in a combo box component has been selected\n\n        combo.on(\"selected\", function(combo, value) {\n            ...\n        });",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "combo",
                    "description": "a combo box component where a new value\nhas been selected",
                    "type": "zebkit.ui.Combo"
                },
                {
                    "name": "value",
                    "description": "a previously selected index",
                    "type": "Object"
                }
            ],
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 23809,
            "description": "Implement the event handler method to detect when a combo pad window\nis shown or hidden\n\n        var p = new zebkit.ui.Combo();\n        p.padShown = function(src, b) { ... }; // add event handler",
            "itemtype": "event",
            "name": "padShown",
            "params": [
                {
                    "name": "src",
                    "description": "a combo box component that triggers the event",
                    "type": "zebkit.ui.Combo"
                },
                {
                    "name": "b",
                    "description": "a flag that indicates if the combo pad window has been\nshown (true) or hidden (false)",
                    "type": "Boolean"
                }
            ],
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 23836,
            "description": "Reference to combo box list component",
            "itemtype": "attribute",
            "name": "list",
            "readonly": "",
            "type": "{zebkit.ui.BaseList}",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 23847,
            "description": "Maximal size the combo box height can have",
            "itemtype": "attribute",
            "name": "maxPadHeight",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 23878,
            "description": "Called whenever the given combo box value has been updated with the specified\nvalue. Implement the method to synchronize content panel with updated combo\nbox value",
            "itemtype": "method",
            "name": "comboValueUpdated",
            "params": [
                {
                    "name": "combo",
                    "description": "a combo box component that has been updated",
                    "type": "zebkit.ui.Combo"
                },
                {
                    "name": "value",
                    "description": "a value with which the combo box has been updated",
                    "type": "Object"
                }
            ],
            "class": "zebkit.ui.Combo.ContentPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 23888,
            "description": "Indicates if the content panel is editable. Set the property to true\nto indicate the content panel implementation is editable. Editable\nmeans the combo box content can be editable by a user",
            "itemtype": "attribute",
            "name": "isEditable",
            "type": "{Boolean}",
            "readonly": "",
            "default": "undefined",
            "class": "zebkit.ui.Combo.ContentPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 23898,
            "description": "Get a combo box the content panel belongs",
            "itemtype": "method",
            "name": "getCombo",
            "return": {
                "description": "a combo the content panel belongs",
                "type": "zebkit.ui.Combo"
            },
            "class": "zebkit.ui.Combo.ContentPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 23925,
            "description": "A reference to combo that uses the list pad component",
            "itemtype": "attribute",
            "name": "owner",
            "type": "{zebkit.ui.Combo}",
            "readonly": "",
            "class": "zebkit.ui.Combo.ComboPadPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 24007,
            "description": "Fired when a content value has been updated.\n\n           content.on(function(contentPan, newValue) {\n               ...\n           });",
            "params": [
                {
                    "name": "contentPan",
                    "description": "a content panel that\nupdated its value",
                    "type": "zebkit.ui.Combo.ContentPan"
                },
                {
                    "name": "newValue",
                    "description": "a new value the content panel has been set\nwith",
                    "type": "Object"
                }
            ],
            "itemtype": "event",
            "name": "contentUpdated",
            "class": "zebkit.ui.Combo.EditableContentPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 24035,
            "description": "Called when the combo box content has been updated",
            "params": [
                {
                    "name": "combo",
                    "description": "a combo where the new value has been set",
                    "type": "zebkit.ui.Combo"
                },
                {
                    "name": "v",
                    "description": "a new combo box value",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "comboValueUpdated",
            "class": "zebkit.ui.Combo.EditableContentPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 24066,
            "description": "A reference to a text field component the content panel uses as a\nvalue editor",
            "itemtype": "attribute",
            "name": "textField",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "type": "{zebkit.ui.TextField}",
            "class": "zebkit.ui.Combo.EditableContentPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 24091,
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24097,
            "description": "Reference to combo box button component",
            "itemtype": "attribute",
            "name": "button",
            "readonly": "",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24104,
            "description": "Reference to combo box content component",
            "itemtype": "attribute",
            "name": "content",
            "readonly": "",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24111,
            "description": "Reference to combo box pad component",
            "itemtype": "attribute",
            "name": "winpad",
            "readonly": "",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24118,
            "description": "Reference to selection view",
            "itemtype": "attribute",
            "name": "selectionView",
            "readonly": "",
            "type": "{zebkit.ui.View}",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24172,
            "description": "Select the given value from the list as the combo box value",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a list element to be selected\nas the combo box value",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "chainable": 1,
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24190,
            "description": "Set combo box value selected value.",
            "params": [
                {
                    "name": "v",
                    "description": "a value",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24199,
            "description": "Get the current combo box selected value",
            "return": {
                "description": "a value",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24208,
            "description": "Define pointer pressed events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerPressed",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24224,
            "description": "Test if the combo window pad is shown",
            "return": {
                "description": "true if the combo window pad is shown",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isPadShown",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24233,
            "description": "Hide combo drop down list",
            "itemtype": "method",
            "name": "hidePad",
            "chainable": 1,
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24247,
            "description": "Show combo drop down list",
            "itemtype": "method",
            "name": "showPad",
            "chainable": 1,
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24300,
            "description": "Bind the given list component to the combo box component.",
            "params": [
                {
                    "name": "l",
                    "description": "a list component",
                    "type": "zebkit.ui.BaseList"
                }
            ],
            "itemtype": "method",
            "name": "setList",
            "chainable": 1,
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24333,
            "description": "Define key pressed events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24351,
            "description": "Define key typed  events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyTyped",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24360,
            "description": "Set the given combo box selection view",
            "params": [
                {
                    "name": "c",
                    "description": "a view",
                    "type": "zebkit.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setSelectionView",
            "chainable": 1,
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24374,
            "description": "Set the maximal height of the combo box pad element.",
            "params": [
                {
                    "name": "h",
                    "description": "a maximal combo box pad size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setMaxPadHeight",
            "chainable": 1,
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24401,
            "description": "Combo box button listener method. The method triggers showing\ncombo box pad window when the combo button has been pressed",
            "params": [
                {
                    "name": "src",
                    "description": "a button that has been pressed",
                    "type": "zebkit.ui.Button"
                }
            ],
            "itemtype": "method",
            "name": "fired",
            "class": "zebkit.ui.Combo"
        },
        {
            "file": "build/zebkit.js",
            "line": 24492,
            "description": "Index of selected menu item",
            "type": "{Integer}",
            "itemtype": "attribute",
            "name": "index",
            "readonly": "",
            "class": "zebkit.ui.MenuEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 24500,
            "description": "Selected menu item component",
            "type": "{zebkit.ui.Panel}",
            "itemtype": "attribute",
            "name": "item",
            "readonly": "",
            "class": "zebkit.ui.MenuEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 24508,
            "description": "Fill menu event with specified parameters",
            "params": [
                {
                    "name": "src",
                    "description": "a source of the menu event",
                    "type": "zebkit.ui.Menu"
                },
                {
                    "name": "index",
                    "description": "an index of selected menu item",
                    "type": "Integer"
                },
                {
                    "name": "item",
                    "description": "a selected menu item",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "access": "protected",
            "tagname": "",
            "chainable": 1,
            "itemtype": "method",
            "name": "$fillWith",
            "class": "zebkit.ui.MenuEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 24528,
            "description": "Show the given popup menu.",
            "params": [
                {
                    "name": "context",
                    "description": "an UI component of zebkit hierarchy",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "menu",
                    "description": "a menu to be shown",
                    "type": "zebkit.ui.Menu"
                }
            ],
            "itemtype": "method",
            "name": "showPopupMenu",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 24630,
            "description": "Gap between checked, content and sub menu arrow components",
            "itemtype": "attribute",
            "name": "gap",
            "type": "{Integer}",
            "readonly": "",
            "default": "8",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24639,
            "description": "Switch manager that is set to make the item checkable",
            "type": "{zebkit.ui.SwitchManager | zebkit.ui.Group}",
            "itemtype": "attribute",
            "name": "manager",
            "readonly": "",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24647,
            "description": "Callback method that is called every time the menu item has\nbeen selected.",
            "itemtype": "method",
            "name": "itemSelected",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24663,
            "description": "Set the menu item icon.",
            "params": [
                {
                    "name": "img",
                    "description": "a path to an image or image object",
                    "type": "String|Image"
                }
            ],
            "itemtype": "method",
            "name": "setIcon",
            "chainable": 1,
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24674,
            "description": "Set the menu item caption.",
            "params": [
                {
                    "name": "caption",
                    "description": "a caption",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setCaption",
            "chainable": 1,
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24685,
            "description": "Callback method that is called every time a checked state\nof the menu item has been updated",
            "params": [
                {
                    "name": "b",
                    "description": "a new checked state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "switched",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24696,
            "description": "Get check state component",
            "return": {
                "description": "a check state component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getCheck",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24706,
            "description": "Get content component",
            "return": {
                "description": "a content component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getContent",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24716,
            "description": "Get menu item child component to render sub item arrow element",
            "return": {
                "description": "a sub item arrow component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getSub",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24726,
            "description": "Hide sub menu arrow component",
            "itemtype": "method",
            "name": "hideSub",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24790,
            "description": "Set the menu item checked state",
            "params": [
                {
                    "name": "b",
                    "description": "a checked state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setCheckState",
            "chainable": 1,
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24804,
            "description": "Get menu item checked state",
            "return": {
                "description": "a menu item checked state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "getCheckState",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24813,
            "description": "Set the menu item checked state manager.",
            "params": [
                {
                    "name": "man",
                    "description": "a switch manager",
                    "type": "zebkit.ui.SwitchManager|zebkit.ui.Group"
                }
            ],
            "itemtype": "method",
            "name": "setCheckManager",
            "chainable": 1,
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24831,
            "description": "Override setParent method to catch the moment when the\nitem is inserted to a menu",
            "params": [
                {
                    "name": "p",
                    "description": "a parent",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "setParent",
            "class": "zebkit.ui.MenuItem"
        },
        {
            "file": "build/zebkit.js",
            "line": 24914,
            "description": "Test if the given menu item is a decorative (not selectable) menu item.\nMenu item is considered as decorative if it has been added with addDecorative(...)\nmethod or has \"$isDecorative\" property set to \"true\"",
            "params": [
                {
                    "name": "i",
                    "description": "a menu item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the given menu item is decorative",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isDecorative",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 24926,
            "description": "Define component events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a component event",
                    "type": "zebkit.ui.CompEvent"
                }
            ],
            "itemtype": "method",
            "name": "childCompEnabled",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 24944,
            "description": "Get a menu item by the given index",
            "params": [
                {
                    "name": "i",
                    "description": "a menu item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a menu item component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getMenuItem",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 24962,
            "description": "Test if the menu has a selectable item",
            "return": {
                "description": "true if the menu has at least one selectable item",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "hasSelectableItems",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 24974,
            "description": "Define pointer exited events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerExited",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 24983,
            "description": "Get a sub menu for the given menu item",
            "params": [
                {
                    "name": "index",
                    "description": "a menu item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a sub menu or null if no sub menu\nis defined for the given menu item",
                "type": "zebkit.ui.Menu"
            },
            "itemtype": "method",
            "name": "getMenuAt",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 24999,
            "description": "Set the given menu as a sub-menu for the specified menu item",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a menu item for that a sub menu\nhas to be attached",
                    "type": "Integer"
                },
                {
                    "name": "m",
                    "description": "a sub menu to be attached",
                    "type": "zebkit.ui.Menu"
                }
            ],
            "itemtype": "method",
            "name": "setMenuAt",
            "chainable": 1,
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25041,
            "description": "Get the specified sub-menu index",
            "params": [
                {
                    "name": "menu",
                    "description": "a sub menu",
                    "type": "zebkit.ui.Menu"
                }
            ],
            "return": {
                "description": "a sub menu index. -1 if the menu is\nnot a sub menu of the given menu",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "indexMenuOf",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25057,
            "description": "Called when the menu or a sub-menu has been canceled (key ESCAPE has been pressed).",
            "params": [
                {
                    "name": "m",
                    "description": "a menu (or sub menu) that has been canceled",
                    "type": "zebkit.ui.Menu"
                }
            ],
            "itemtype": "method",
            "name": "$canceled",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25069,
            "description": "Get the top menu in the given shown popup menu hierarchy",
            "return": {
                "description": "a top menu",
                "type": "zebkit.ui.Menu"
            },
            "itemtype": "method",
            "name": "$topMenu",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25100,
            "description": "Hide the menu and all visible sub-menus",
            "itemtype": "method",
            "name": "$hideMenu",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25117,
            "description": "Get a sub menu that is shown at the given moment.",
            "return": {
                "description": "a child sub menu. null if no child sub-menu\nhas been shown",
                "type": "zebkit.ui.Menu"
            },
            "itemtype": "method",
            "name": "$childMenu",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25136,
            "description": "Show the given sub menu",
            "params": [
                {
                    "name": "sub",
                    "description": "a sub menu to be shown",
                    "type": "zebkit.ui.Menu"
                }
            ],
            "itemtype": "method",
            "name": "$showSubMenu",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25155,
            "description": "Override key pressed events handler to handle key events according to\ncontext menu component requirements",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25192,
            "description": "Add the specified component as a decorative item of the menu",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "addDecorative",
            "class": "zebkit.ui.Menu"
        },
        {
            "file": "build/zebkit.js",
            "line": 25454,
            "description": "Define children components input events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "an input event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "childKeyPressed",
            "class": "zebkit.ui.PopupLayerMix"
        },
        {
            "file": "build/zebkit.js",
            "line": 25576,
            "description": "Indicates if the window has been shown",
            "itemtype": "attribute",
            "name": "isShown",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.WinEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 25584,
            "description": "Indicates if the window has been activated",
            "itemtype": "attribute",
            "name": "isActive",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.WinEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 25592,
            "description": "Layer the source window belongs to",
            "type": "{zebkit.ui.Panel}",
            "itemtype": "attribute",
            "name": "layer",
            "readonly": "",
            "class": "zebkit.ui.WinEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 25600,
            "description": "Fill the event with parameters",
            "params": [
                {
                    "name": "src",
                    "description": "a source window",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "layer",
                    "description": "a layer the window belongs to",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "isActive",
                    "description": "boolean flag that indicates the window status",
                    "type": "Boolean"
                },
                {
                    "name": "isShown",
                    "description": "boolean flag that indicates the window visibility",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "$fillWidth",
            "class": "zebkit.ui.WinEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 25622,
            "description": "Show the given UI component as a modal window",
            "params": [
                {
                    "name": "context",
                    "description": "an UI component of zebkit hierarchy",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "win",
                    "description": "a component to be shown as the modal window",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "showModalWindow",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 25633,
            "description": "Show the given UI component as a window",
            "params": [
                {
                    "name": "context",
                    "description": "an UI component of zebkit hierarchy",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "type",
                    "description": "a type of the window: \"modal\", \"mdi\", \"info\". The default\nvalue is \"info\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "win",
                    "description": "a component to be shown as the window",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "showWindow",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 25650,
            "description": "Activate the given window or a window the specified component belongs",
            "params": [
                {
                    "name": "win",
                    "description": "an UI component to be activated",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "activateWindow",
            "class": "zebkit.ui"
        },
        {
            "file": "build/zebkit.js",
            "line": 25712,
            "description": "Currently activated as a window children component",
            "itemtype": "attribute",
            "name": "activeWin",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.WinLayer"
        },
        {
            "file": "build/zebkit.js",
            "line": 25798,
            "description": "Define children components input events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a focus event",
                    "type": "zebkit.ui.FocusEvent"
                }
            ],
            "itemtype": "method",
            "name": "childFocusGained",
            "class": "zebkit.ui.WinLayer"
        },
        {
            "file": "build/zebkit.js",
            "line": 25815,
            "description": "Activate the given win layer children component window.",
            "params": [
                {
                    "name": "c",
                    "description": "a component to be activated as window",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "activate",
            "class": "zebkit.ui.WinLayer"
        },
        {
            "file": "build/zebkit.js",
            "line": 25867,
            "description": "Add the given window with the given type and the listener to the layer.",
            "params": [
                {
                    "name": "type",
                    "description": "a type of the window: \"modal\",\n\"mdi\" or \"info\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "win",
                    "description": "an UI component to be shown as window",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "addWin",
            "class": "zebkit.ui.WinLayer"
        },
        {
            "file": "build/zebkit.js",
            "line": 25976,
            "description": "Root window panel. The root panel has to be used to\nadd any UI components",
            "itemtype": "attribute",
            "name": "root",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 25985,
            "description": "Window caption panel. The panel contains window\nicons, button and title label",
            "itemtype": "attribute",
            "name": "caption",
            "type": "{zebkit.ui.Panel}",
            "readonly": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 25994,
            "description": "Window title component",
            "type": "{zebkit.ui.Panel}",
            "itemtype": "attribute",
            "name": "title",
            "readonly": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26003,
            "description": "Icons panel. The panel can contain number of icons.",
            "type": "{zebkit.ui.Panel}",
            "itemtype": "attribute",
            "name": "icons",
            "readonly": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26012,
            "description": "Window buttons panel. The panel can contain number of window buttons",
            "type": "{zebkit.ui.Panel}",
            "itemtype": "attribute",
            "name": "buttons",
            "readonly": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26024,
            "description": "Window status panel.",
            "itemtype": "attribute",
            "name": "status",
            "readonly": "",
            "type": "{zebkit.ui.Panel}",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26066,
            "description": "Minimal possible size of the window",
            "default": "40",
            "itemtype": "attribute",
            "name": "minSize",
            "type": "{Integer}",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26074,
            "description": "Indicate if the window can be resized by dragging its by corner",
            "itemtype": "attribute",
            "name": "isSizeable",
            "type": "{Boolean}",
            "default": "true",
            "readonly": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26083,
            "description": "Test if the window is shown as a window and activated",
            "return": {
                "description": "true is the window is shown as internal window and\nis active.",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isActive",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26144,
            "description": "Test if the pointer cursor is inside the window corner component",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "px",
                    "description": "a x coordinate of the pointer cursor",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a y coordinate of the pointer cursor",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the pointer cursor is inside window\ncorner component",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "insideCorner",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26194,
            "description": "Test if the window has been maximized to occupy the whole\nwindow layer space.",
            "return": {
                "description": "true if the window has been maximized",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isMaximized",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26204,
            "description": "Create a caption component",
            "return": {
                "description": "a zebkit caption component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "createCaptionPan",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26214,
            "description": "Create a content component",
            "return": {
                "description": "a content component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "createContentPan",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26224,
            "description": "Create a caption title label",
            "return": {
                "description": "a caption title label",
                "type": "zebkit.ui.Label"
            },
            "itemtype": "method",
            "name": "createTitle",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26242,
            "description": "Make the window sizable or not sizeable",
            "params": [
                {
                    "name": "b",
                    "description": "a sizeable state of the window",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setSizeable",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26258,
            "description": "Maximize the window",
            "itemtype": "method",
            "name": "maximize",
            "chainable": 1,
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26282,
            "description": "Restore the window size",
            "itemtype": "method",
            "name": "restore",
            "chainable": 1,
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26296,
            "description": "Close the window",
            "itemtype": "method",
            "name": "close",
            "chainable": 1,
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26306,
            "description": "Set the window buttons set.",
            "params": [
                {
                    "name": "buttons",
                    "description": "dictionary of buttons icons for window buttons.\nThe dictionary key defines a method of the window component to be called\nwhen the given button has been pressed. So the method has to be defined\nin the window component.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setButtons",
            "class": "zebkit.ui.Window"
        },
        {
            "file": "build/zebkit.js",
            "line": 26529,
            "description": "Fired when a menu item has been selected\n\n            zebkit.ui.events.on(\"menuItemSelected\", function(menu, index, item) {\n                ...\n            });",
            "itemtype": "event",
            "name": "menuItemSelected",
            "params": [
                {
                    "name": "menu",
                    "description": "a menu component that triggers the event",
                    "type": "zebkit.ui.Menu"
                },
                {
                    "name": "index",
                    "description": "a menu item index that has been selected",
                    "type": "Integer"
                },
                {
                    "name": "item",
                    "description": "a menu item component that has been selected",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26547,
            "description": "Indicates if a shown tooltip has to disappear by pointer pressed event",
            "itemtype": "attribute",
            "name": "hideTooltipByPress",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26555,
            "description": "Define interval (in milliseconds) between entering a component and showing\na tooltip for the entered component",
            "itemtype": "attribute",
            "name": "showTooltipIn",
            "type": "{Integer}",
            "default": "400",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26566,
            "description": "Define pointer clicked event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerClicked",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26595,
            "description": "Define pointer entered event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerEntered",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26617,
            "description": "Define pointer exited event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerExited",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26629,
            "description": "Define pointer moved event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerMoved",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26651,
            "description": "Task body method",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "t",
                    "description": "a task context",
                    "type": "Task"
                }
            ],
            "itemtype": "method",
            "name": "run",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26749,
            "description": "Hide tooltip if it has been shown",
            "itemtype": "method",
            "name": "hideTooltip",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26760,
            "description": "Define pointer pressed event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerPressed",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26775,
            "description": "Define pointer released event handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerReleased",
            "class": "zebkit.TooltippupManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 26850,
            "description": "The whole width of tree node that includes a rendered item preferred\nwidth, all icons and gaps widths",
            "itemtype": "attribute",
            "name": "width",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.tree.$IM"
        },
        {
            "file": "build/zebkit.js",
            "line": 26858,
            "description": "The whole height of tree node that includes a rendered item preferred\nheight, all icons and gaps heights",
            "itemtype": "attribute",
            "name": "height",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.tree.$IM"
        },
        {
            "file": "build/zebkit.js",
            "line": 26866,
            "description": "Width of an area of rendered tree model item. It excludes icons, toggle\nand gaps widths",
            "itemtype": "attribute",
            "name": "viewWidth",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.tree.$IM"
        },
        {
            "file": "build/zebkit.js",
            "line": 26874,
            "description": "Height of an area of rendered tree model item. It excludes icons, toggle\nand gaps heights",
            "itemtype": "attribute",
            "name": "viewHeight",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.tree.$IM"
        },
        {
            "file": "build/zebkit.js",
            "line": 26882,
            "description": "Indicates whether a node is in expanded or collapsed state",
            "itemtype": "attribute",
            "name": "isOpen",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.tree.$IM"
        },
        {
            "file": "build/zebkit.js",
            "line": 26901,
            "description": "Internal component that are designed as default editor component",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "attribute",
            "name": "tf",
            "type": "{zebkit.ui.TextField}",
            "class": "zebkit.ui.tree.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 26916,
            "description": "Get an UI component to edit the given tree model element",
            "params": [
                {
                    "name": "src",
                    "description": "a tree component",
                    "type": "zebkit.ui.tree.Tree"
                },
                {
                    "name": "item",
                    "description": "an data model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "an editor UI component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getEditor",
            "class": "zebkit.ui.tree.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 26929,
            "description": "Fetch a model item from the given UI editor component",
            "params": [
                {
                    "name": "src",
                    "description": "a tree UI component",
                    "type": "zebkit.ui.tree.Tree"
                },
                {
                    "name": "editor",
                    "description": "an editor that has been used to edit the tree model element",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "an new tree model element value fetched from the given UI editor component",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "fetchEditedValue",
            "class": "zebkit.ui.tree.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 26940,
            "description": "The method is called to ask if the given input event should trigger an tree component item",
            "params": [
                {
                    "name": "src",
                    "description": "a tree UI component",
                    "type": "zebkit.ui.tree.Tree"
                },
                {
                    "name": "e",
                    "description": "an input event: pointer or key event",
                    "type": "zebkit.ui.PointerEvent|zebkit.ui.KeyEvent"
                }
            ],
            "return": {
                "description": "true if the event should trigger edition of a tree component item",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "@shouldStartEdit",
            "class": "zebkit.ui.tree.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 26963,
            "description": "Default tree item render",
            "itemtype": "attribute",
            "name": "render",
            "readonly": "",
            "type": "{zebkit.ui.StringRender}",
            "class": "zebkit.ui.tree.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 26983,
            "description": "Get a view for the given model item of the UI tree component",
            "params": [
                {
                    "name": "tree",
                    "description": "a tree component",
                    "type": "zebkit.ui.tree.Tree"
                },
                {
                    "name": "item",
                    "description": "a tree model element",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "a view to visualize the given tree data model element",
                "type": "zebkit.ui.View"
            },
            "itemtype": "method",
            "name": "getView",
            "class": "zebkit.ui.tree.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 26998,
            "description": "Set the default view provider text render font",
            "params": [
                {
                    "name": "f",
                    "description": "a font",
                    "type": "zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "chainable": 1,
            "class": "zebkit.ui.tree.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 27009,
            "description": "Set the default view provider text render color",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "class": "zebkit.ui.tree.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 27058,
            "description": "Fired when a tree item has been toggled\n\n           tree.on(\"toggled\", function(src, item) {\n              ...\n           });",
            "itemtype": "event",
            "name": "toggled",
            "params": [
                {
                    "name": "src",
                    "description": "a tree component that triggers the event",
                    "type": "zebkit.ui.tree.BaseTree"
                },
                {
                    "name": "item",
                    "description": "an tree item that has been toggled",
                    "type": "zebkit.data.Item"
                }
            ],
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27070,
            "description": "Fired when a tree item has been selected\n\n         tree.on(\"selected\", function(src, prevItem) {\n            ...\n         });",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "src",
                    "description": "a tree component that triggers the event",
                    "type": "zebkit.ui.tree.BaseTree"
                },
                {
                    "name": "prevItem",
                    "description": "a previously selected tree item",
                    "type": "zebkit.data.Item"
                }
            ],
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27083,
            "description": "Fired when a tree item editing has been started\n\n         tree.on(\"editingStarted\", function(src, item, editor) {\n            ...\n         });",
            "itemtype": "event",
            "name": "editingStarted",
            "params": [
                {
                    "name": "src",
                    "description": "an tree component that triggers the event",
                    "type": "zebkit.ui.tree.BaseTree"
                },
                {
                    "name": "item",
                    "description": "a tree item to be edited",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "editor",
                    "description": "an editor to be used to edit the given item",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27096,
            "description": "Fired when a tree item editing has been stopped\n\n         tree.on(\"editingStopped\", function(src, item, oldValue, editor, isApplied) {\n            ...\n         });",
            "itemtype": "event",
            "name": "editingStopped",
            "params": [
                {
                    "name": "src",
                    "description": "a tree component that triggers the event",
                    "type": "zebkit.ui.tree.BaseTree"
                },
                {
                    "name": "item",
                    "description": "a tree item that has been edited",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "oldValue",
                    "description": "an old value of the edited tree item",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "an editor to be used to edit the given item",
                    "type": "zebkit.ui.Panel"
                },
                {
                    "name": "isApplied",
                    "description": "flag that indicates if the edited value has been\napplied to the given tree item",
                    "type": "Boolean"
                }
            ],
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27143,
            "description": "Tree component line color",
            "itemtype": "attribute",
            "name": "lnColor",
            "type": "{String}",
            "readonly": "",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27151,
            "description": "Selected tree model item",
            "itemtype": "attribute",
            "name": "selected",
            "type": "{zebkit.data.Item}",
            "default": "null",
            "readonly": "",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27160,
            "description": "Horizontal gap between a node elements: toggle, icons and tree item view",
            "itemtype": "attribute",
            "name": "gapx",
            "readonly": "",
            "default": "2",
            "type": "{Integer}",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27168,
            "description": "Vertical gap between a node elements: toggle, icons and tree item view",
            "itemtype": "attribute",
            "name": "gapy",
            "readonly": "",
            "default": "2",
            "type": "{Integer}",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27179,
            "description": "Test if the given tree component item is opened",
            "params": [
                {
                    "name": "i",
                    "description": "a tree model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "true if the given tree component item is opened",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isOpen",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27190,
            "description": "Get calculated for the given tree model item metrics",
            "params": [
                {
                    "name": "i",
                    "description": "a tree item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "an tree model item metrics. Th",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getItemMetrics",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27269,
            "description": "Get tree model item  metrical bounds (location and size).",
            "params": [
                {
                    "name": "root",
                    "description": "an tree model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "a structure that keeps an item view location\nand size:\n\n                   {\n                       x: {Integer},\n                       y: {Integer},\n                       width: {Integer},\n                       height: {Integer}\n                   }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getItemBounds",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27297,
            "description": "Get toggle element bounds for the given tree model item.",
            "params": [
                {
                    "name": "root",
                    "description": "an tree model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "a structure that keeps an item toggle location\nand size:\n\n    {\n        x: {Integer},\n        y: {Integer},\n        width: {Integer},\n        height: {Integer}\n    }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getToggleBounds",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27321,
            "description": "Get current toggle element view. The view depends on the state of tree item.",
            "params": [
                {
                    "name": "i",
                    "description": "a tree model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "a toggle element view",
                "type": "zebkit.ui.View"
            },
            "itemtype": "method",
            "name": "getToogleView",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27335,
            "description": "An abstract method that a concrete tree component implementations have to\noverride. The method has to return a preferred size the given tree model\nitem wants to have.",
            "params": [
                {
                    "name": "root",
                    "description": "an tree model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "a structure that keeps an item preferred size:\n\n    {\n         width: {Integer},\n         height: {Integer}\n    }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getItemPreferredSize",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27354,
            "description": "An abstract method that a concrete tree component implementations should\noverride. The method has to render the given tree node of the specified\ntree model item at the given location",
            "params": [
                {
                    "name": "g",
                    "description": "a graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "root",
                    "description": "a tree model item to be rendered",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "node",
                    "description": "a tree node metrics",
                    "type": "zebkit.ui.tree.$IM"
                },
                {
                    "name": "x",
                    "description": "a x location where the tree node has to be rendered",
                    "type": "Ineteger"
                },
                {
                    "name": "y",
                    "description": "a y location where the tree node has to be rendered",
                    "type": "Ineteger"
                }
            ],
            "itemtype": "method",
            "name": "paintItem",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27416,
            "description": "Get a tree node metrics by the given tree model item.",
            "params": [
                {
                    "name": "item",
                    "description": "a tree model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "a tree node metrics",
                "type": "zebkit.ui.tree.$IM"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getIM",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27432,
            "description": "Get a tree item that is located at the given location.",
            "params": [
                {
                    "name": "root",
                    "description": "a starting tree node",
                    "type": "zebkit.data.Item",
                    "optional": true
                },
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a tree model item",
                "type": "zebkit.data.Item"
            },
            "itemtype": "method",
            "name": "getItemAt",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27499,
            "description": "Get icon element bounds for the given tree model item.",
            "params": [
                {
                    "name": "root",
                    "description": "an tree model item",
                    "type": "zebkit.data.Item"
                }
            ],
            "return": {
                "description": "a structure that keeps an item icon location\nand size:\n\n    {\n        x: {Integer},\n        y: {Integer},\n        width: {Integer},\n        height: {Integer}\n    }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getToggleBounds",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27715,
            "description": "Paint children items of the given root tree item.",
            "params": [
                {
                    "name": "g",
                    "description": "a graphical context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "root",
                    "description": "a root tree item",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "index",
                    "description": "an index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "paintChild",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27802,
            "description": "Select the given item.",
            "params": [
                {
                    "name": "an",
                    "description": "item to be selected. Use null value to clear any selection",
                    "type": "zebkit.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27834,
            "description": "Make the given tree item visible. Tree component rendered content can takes more space than\nthe UI component size is. In this case the content can be scrolled to make visible required\ntree item.",
            "params": [
                {
                    "name": "item",
                    "description": "an item to be visible",
                    "type": "zebkit.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "makeVisible",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27847,
            "description": "Toggle off or on recursively all items of the given item",
            "params": [
                {
                    "name": "root",
                    "description": "a starting item to toggle",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "b",
                    "description": "true if all items have to be in opened\nstate and false otherwise",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "toggleAll",
            "chainable": 1,
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27866,
            "description": "Toggle the given tree item",
            "params": [
                {
                    "name": "item",
                    "description": "an item to be toggled",
                    "type": "zebkit.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "toggle",
            "chainable": 1,
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27933,
            "description": "Say if items of the tree component should be selectable",
            "params": [
                {
                    "name": "b",
                    "description": "true is tree component items can be selected",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setSelectable",
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27947,
            "description": "Set tree component connector lines color",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setLineColor",
            "chainable": 1,
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27959,
            "description": "Set the given horizontal gaps between tree node graphical elements:\ntoggle, icon, item view",
            "params": [
                {
                    "name": "gx",
                    "description": "horizontal gap",
                    "type": "Integer"
                },
                {
                    "name": "gy",
                    "description": "vertical gap",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGaps",
            "chainable": 1,
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 27976,
            "description": "Set the number of views to customize rendering of different visual elements of the tree\nUI component. The following decorative elements can be customized:\n\n  - **\"close\"** - closed tree item icon view\n  - **\"open\"**  - opened tree item icon view\n  - **\"leaf\"**  - leaf tree item icon view\n  - **\"on\"**    - toggle on view\n  - **\"off\"**   - toggle off view\n  - **\"iselect\"**   - a view to express an item selection when tree component doesn't hold focus\n  - **\"aselect\"**   - a view to express an item selection when tree component holds focus\n\nFor instance:\n\n           // build tree UI component\n           var tree = new zebkit.ui.tree.Tree({\n               value: \"Root\",\n               kids: [\n                   \"Item 1\",\n                   \"Item 2\"\n               ]\n           });\n\n           // set \" [x] \" text render for toggle on and\n           // \" [o] \" text render for toggle off tree elements\n           tree.setViews({\n               \"on\": new zebkit.ui.TextRender(\" [x] \"),\n               \"off\": new zebkit.ui.TextRender(\" [o] \")\n           });",
            "params": [
                {
                    "name": "v",
                    "description": "dictionary of tree component decorative elements views",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViews",
            "chainable": 1,
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28031,
            "description": "Set the given tree model to be visualized with the UI component.",
            "params": [
                {
                    "name": "d",
                    "description": "a tree model",
                    "type": "zebkit.data.TreeModel|Object"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "chainable": 1,
            "class": "zebkit.ui.tree.BaseTree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28109,
            "description": "A tree model editor provider",
            "readonly": "",
            "itemtype": "attribute",
            "name": "editors",
            "default": "null",
            "type": "{zebkit.ui.tree.DefEditors}",
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28118,
            "description": "A tree model items view provider",
            "readonly": "",
            "itemtype": "attribute",
            "name": "provider",
            "default": "an instance of zebkit.ui.tree.DefsViews",
            "type": "{zebkit.ui.tree.DefsViews}",
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28176,
            "description": "Initiate the given item editing if the specified event matches condition",
            "params": [
                {
                    "name": "item",
                    "description": "an item to be edited",
                    "type": "zebkit.data.Item"
                },
                {
                    "name": "e",
                    "description": "an even that may trigger the item editing",
                    "type": "zebkit.util.Event"
                }
            ],
            "return": {
                "description": "return true if an item editing process has been started,\nfalse otherwise",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "se",
            "access": "private",
            "tagname": "",
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28248,
            "description": "Start editing the given if an editor for the item has been defined.",
            "params": [
                {
                    "name": "item",
                    "description": "an item whose content has to be edited",
                    "type": "zebkit.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "startEditing",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28275,
            "description": "Stop editing currently edited tree item and apply or discard the result of the\nediting to tree data model.",
            "params": [
                {
                    "name": "true",
                    "description": "if the editing result has to be applied to tree data model",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "stopEditing",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28319,
            "description": "Set the given editor provider. The editor provider is a class that is used to decide which UI\ncomponent has to be used as an item editor, how the editing should be triggered and how the\nedited value has to be fetched from an UI editor.",
            "params": [
                {
                    "name": "p",
                    "description": "an editor provider",
                    "type": "zebkit.ui.tree.DefEditors"
                }
            ],
            "itemtype": "method",
            "name": "setEditorProvider",
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28334,
            "description": "Set tree component items view provider. Provider says how tree model items\nhave to be visualized.",
            "params": [
                {
                    "name": "p",
                    "description": "a view provider",
                    "type": "zebkit.ui.tree.DefViews"
                }
            ],
            "itemtype": "method",
            "name": "setViewProvider",
            "chainable": 1,
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28352,
            "description": "Set the given tree model to be visualized with the UI component.",
            "params": [
                {
                    "name": "d",
                    "description": "a tree model",
                    "type": "zebkit.data.TreeModel|Object"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "chainable": 1,
            "class": "zebkit.ui.tree.Tree"
        },
        {
            "file": "build/zebkit.js",
            "line": 28699,
            "description": "Get the given column width of a grid component",
            "params": [
                {
                    "name": "col",
                    "description": "a column index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getColWidth",
            "return": {
                "description": "a column width",
                "type": "Integer"
            },
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28706,
            "description": "Get the given row height of a grid component",
            "params": [
                {
                    "name": "row",
                    "description": "a row index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getRowHeight",
            "return": {
                "description": "a row height",
                "type": "Integer"
            },
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28713,
            "description": "Get the given row preferred height of a grid component",
            "params": [
                {
                    "name": "row",
                    "description": "a row index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getPSRowHeight",
            "return": {
                "description": "a row preferred height",
                "type": "Integer"
            },
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28720,
            "description": "Get the given column preferred width of a grid component",
            "params": [
                {
                    "name": "col",
                    "description": "a column index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getPSColWidth",
            "return": {
                "description": "a column preferred width",
                "type": "Integer"
            },
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28727,
            "description": "Get a x origin of a grid component. Origin indicates how\nthe grid component content has been scrolled",
            "itemtype": "method",
            "name": "getXOrigin",
            "return": {
                "description": "a x origin",
                "type": "Integer"
            },
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28734,
            "description": "Get a y origin of a grid component. Origin indicates how\nthe grid component content has been scrolled",
            "itemtype": "method",
            "name": "getYOrigin",
            "return": {
                "description": "a y origin",
                "type": "Integer"
            },
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28741,
            "description": "Set the given column width of a grid component",
            "params": [
                {
                    "name": "col",
                    "description": "a column index",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a column width",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setColWidth",
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28748,
            "description": "Set the given row height of a grid component",
            "params": [
                {
                    "name": "row",
                    "description": "a row index",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a row height",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRowHeight",
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28755,
            "description": "Get number of columns in a grid component",
            "return": {
                "description": "a number of columns",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridCols",
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28761,
            "description": "Get number of rows in a grid component",
            "return": {
                "description": "a number of rows",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridRows",
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28767,
            "description": "Get a structure that describes a grid component\ncolumns and rows visibility",
            "return": {
                "description": "a grid cells visibility",
                "type": "zebkit.ui.grid.CellsVisibility"
            },
            "itemtype": "method",
            "name": "getCellsVisibility",
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28774,
            "description": "Grid line size",
            "itemtype": "attribute",
            "name": "lineSize",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28781,
            "description": "Indicate if a grid sizes its rows and cols basing on its preferred sizes",
            "itemtype": "attribute",
            "name": "isUsePsMetric",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebkit.ui.grid.Metrics"
        },
        {
            "file": "build/zebkit.js",
            "line": 28799,
            "description": "Default render that is used to paint grid content.",
            "type": "{zebkit.ui.StringRender}",
            "itemtype": "attribute",
            "name": "render",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.grid.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 28812,
            "description": "Set the default view provider text render font",
            "params": [
                {
                    "name": "f",
                    "description": "a font",
                    "type": "zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "zebkit.ui.grid.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 28822,
            "description": "Set the default view provider text render color",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "class": "zebkit.ui.grid.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 28832,
            "description": "Get a renderer to draw the specified grid model value.",
            "params": [
                {
                    "name": "target",
                    "description": "a target Grid component",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                },
                {
                    "name": "obj",
                    "description": "a model value for the given grid cell",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an instance of  view to be used to\npaint the given cell model value",
                "type": "zebkit.ui.View"
            },
            "itemtype": "method",
            "name": "getView",
            "class": "zebkit.ui.grid.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 28853,
            "description": "Get an horizontal alignment a content in the given grid cell\nhas to be adjusted. The method is optional.",
            "params": [
                {
                    "name": "target",
                    "description": "a target grid component",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a horizontal alignment (\"left\", \"center\", \"right\")",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getXAlignment",
            "class": "zebkit.ui.grid.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 28863,
            "description": "Get a vertical alignment a content in the given grid cell\nhas to be adjusted. The method is optional.",
            "params": [
                {
                    "name": "target",
                    "description": "a target grid component",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a vertical alignment (\"top\", \"center\", \"bottom\")",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getYAlignment",
            "class": "zebkit.ui.grid.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 28873,
            "description": "Get the given grid cell color",
            "params": [
                {
                    "name": "target",
                    "description": "a target grid component",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a cell color to be applied to the given grid cell",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getCellColor",
            "class": "zebkit.ui.grid.DefViews"
        },
        {
            "file": "build/zebkit.js",
            "line": 28976,
            "description": "Fetch an edited value from the given UI editor component.",
            "params": [
                {
                    "name": "grid",
                    "description": "a target grid component",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row that has been edited",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column that has been edited",
                    "type": "Integer"
                },
                {
                    "name": "data",
                    "description": "an original cell content",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "an editor that has been used to\nedit the given cell",
                    "type": "zebkit.ui.Panel"
                }
            ],
            "return": {
                "description": "a value that can be applied as a new content of\nthe edited cell content",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "fetchEditedValue",
            "class": "zebkit.ui.grid.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 28996,
            "description": "Get an editor UI component to be used for the given cell of the specified grid",
            "params": [
                {
                    "name": "grid",
                    "description": "a grid whose cell is going to be edited",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                },
                {
                    "name": "v",
                    "description": "a grid cell model data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an editor UI component to be used to edit the given cell",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getEditor",
            "class": "zebkit.ui.grid.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 29031,
            "description": "Test if the specified input event has to trigger the given grid cell editing",
            "params": [
                {
                    "name": "grid",
                    "description": "a grid",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                },
                {
                    "name": "e",
                    "description": "an event to be evaluated",
                    "type": "zebkit.util.Event"
                }
            ],
            "return": {
                "description": "true if the given input event triggers the given cell editing",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "shouldStart",
            "class": "zebkit.ui.grid.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 29044,
            "description": "Test if the specified input event has to canceling the given grid cell editing",
            "params": [
                {
                    "name": "grid",
                    "description": "a grid",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                },
                {
                    "name": "e",
                    "description": "an event to be evaluated",
                    "type": "zebkit.util.Event"
                }
            ],
            "return": {
                "description": "true if the given input event triggers the given cell editing\ncancellation",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "shouldCancel",
            "class": "zebkit.ui.grid.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 29058,
            "description": "Test if the specified input event has to trigger finishing the given grid cell editing",
            "params": [
                {
                    "name": "grid",
                    "description": "[description]",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                },
                {
                    "name": "e",
                    "description": "an event to be evaluated",
                    "type": "zebkit.util.Event"
                }
            ],
            "return": {
                "description": "true if the given input event triggers finishing the given cell editing",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "shouldFinish",
            "class": "zebkit.ui.grid.DefEditors"
        },
        {
            "file": "build/zebkit.js",
            "line": 29082,
            "description": "Fire when a grid row selection state has been changed\n\n           caption.on(\"captionResized\", function(caption, rowcol, phw) {\n               ...\n           });",
            "itemtype": "event",
            "name": "captionResized",
            "params": [
                {
                    "name": "caption",
                    "description": "a caption",
                    "type": "zebkit.ui.grid.BaseCaption"
                },
                {
                    "name": "rowcol",
                    "description": "a row or column that has been resized",
                    "type": "Integer"
                },
                {
                    "name": "pwh",
                    "description": "a previous row or column size",
                    "type": "Integer"
                }
            ],
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29117,
            "description": "Minimal possible grid cell size",
            "type": "{Number}",
            "default": "10",
            "itemtype": "attribute",
            "name": "minSize",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29125,
            "description": "Size of the active area where cells size can be changed by pointer dragging event",
            "itemtype": "attribute",
            "name": "activeAreaSize",
            "type": "{Number}",
            "default": "5",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29133,
            "description": "Caption line color",
            "itemtype": "attribute",
            "name": "lineColor",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29141,
            "description": "Indicate if the grid cell size has to be adjusted according\nto the cell preferred size by pointer double click event.",
            "itemtype": "attribute",
            "name": "isAutoFit",
            "default": "true",
            "type": "{Boolean}",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29149,
            "description": "Indicate if the grid cells are resize-able.\nto the cell preferred size by pointer double click event.",
            "itemtype": "attribute",
            "name": "isResizable",
            "default": "true",
            "type": "{Boolean}",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29167,
            "description": "Define pointer dragged events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragged",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29187,
            "description": "Define pointer drag started events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragStarted",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29206,
            "description": "Define pointer drag ended events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragEnded",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29221,
            "description": "Define pointer moved events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerMoved",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29232,
            "description": "Define pointer clicked events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerClicked",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29253,
            "description": "Get the given row or column caption preferred size",
            "params": [
                {
                    "name": "rowcol",
                    "description": "a row or column of a caption",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a size of row or column caption",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getCaptionPS",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29287,
            "description": "Compute a column (for horizontal caption component) or row (for\nvertically aligned caption component) at the given location",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "an y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "f",
                    "description": "an optional match function. The method can be passed\nif you need to detect a particular area of row or column. The method gets\na grid metrics as the first argument, a x or y location to be detected,\na row or column y or x coordinate, a row or column height or width and\nrow or column index. The method has to return true if the given location\nis in.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a row or column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "calcRowColAt",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29357,
            "description": "Implement the method to be aware when number of rows or columns in\na grid model has been updated",
            "params": [
                {
                    "name": "target",
                    "description": "a target grid",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "prevRows",
                    "description": "a previous number of rows",
                    "type": "Integer"
                },
                {
                    "name": "prevCols",
                    "description": "a previous number of columns",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "matrixResized",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29366,
            "description": "Implement the method to be aware when a grid model data has been\nre-ordered.",
            "params": [
                {
                    "name": "target",
                    "description": "a target grid",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "sortInfo",
                    "description": "an order information",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "matrixSorted",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29408,
            "description": "Set the default view provider text render font",
            "params": [
                {
                    "name": "f",
                    "description": "a font",
                    "type": "zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29418,
            "description": "Set the default view provider text render color",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "class": "zebkit.ui.grid.BaseCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29582,
            "description": "Put the given title for the given caption cell.",
            "params": [
                {
                    "name": "rowcol",
                    "description": "a grid caption cell index",
                    "type": "Integer"
                },
                {
                    "name": "title",
                    "description": "a title of the given grid caption cell.\nCan be a string or zebkit.ui.View or zebkit.ui.Panel class instance",
                    "type": "String|zebkit.ui.View|zebkit.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "putTitle",
            "chainable": 1,
            "class": "zebkit.ui.grid.GridCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29795,
            "description": "Image panel to keep grtid caption title",
            "itemtype": "attribute",
            "name": "iconPan",
            "type": "{zebkit.ui.ImagePan}",
            "readonly": "",
            "class": "zebkit.ui.grid.CompGridCaption.TitlePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 29803,
            "description": "Title link",
            "itemtype": "attribute",
            "name": "link",
            "type": "{zebkit.ui.Link}",
            "readonly": "",
            "class": "zebkit.ui.grid.CompGridCaption.TitlePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 29825,
            "description": "Indicates if the title panel has to initiate a column sorting",
            "default": "false",
            "itemtype": "attribute",
            "name": "isSortable",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebkit.ui.grid.CompGridCaption.TitlePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 29856,
            "description": "Set the caption icon",
            "params": [
                {
                    "name": "path",
                    "description": "a path to an image or image object",
                    "type": "String|Image"
                }
            ],
            "itemtype": "method",
            "name": "setIcon",
            "chainable": 1,
            "class": "zebkit.ui.grid.CompGridCaption.TitlePan"
        },
        {
            "file": "build/zebkit.js",
            "line": 29901,
            "class": "zebkit.ui.grid.CompGridCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29913,
            "description": "Put the given title component for the given caption cell.",
            "params": [
                {
                    "name": "rowcol",
                    "description": "a grid caption cell index",
                    "type": "Integer"
                },
                {
                    "name": "title",
                    "description": "a title of the given grid caption cell.\nCan be a string or zebkit.ui.View or zebkit.ui.Panel class instance",
                    "type": "String|zebkit.ui.Panel|zebkit.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "putTitle",
            "chainable": 1,
            "class": "zebkit.ui.grid.CompGridCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 29946,
            "description": "Set the given column sortable state",
            "params": [
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "true if the column has to be sortable",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setSortable",
            "chainable": 1,
            "class": "zebkit.ui.grid.CompGridCaption"
        },
        {
            "file": "build/zebkit.js",
            "line": 30106,
            "description": "Fire when a grid row selection state has been changed\n\n           grid.on(function(grid, row, count, status) {\n               ...\n           });",
            "itemtype": "event",
            "name": "rowSelected",
            "params": [
                {
                    "name": "grid",
                    "description": "a grid that triggers the event",
                    "type": "zebkit.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a first row whose selection state has been updated. The row is\n-1 if all selected rows have been unselected",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of rows whose selection state has been updated",
                    "type": "Integer"
                },
                {
                    "name": "status",
                    "description": "a status. true means rows have been selected",
                    "type": "Boolean"
                }
            ],
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30122,
            "description": "Default cell background color",
            "type": "{String}",
            "itemtype": "attribute",
            "name": "defCellColor",
            "default": "pkg.DefViews.cellBackground",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30164,
            "description": "Reference to top caption component",
            "itemtype": "attribute",
            "name": "topCaption",
            "type": "{zebkit.ui.grid.GridCaption|zebkit.ui.grid.CompGridCaption}",
            "default": "null",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30172,
            "description": "Reference to left caption component",
            "itemtype": "attribute",
            "name": "leftCaption",
            "type": "{zebkit.ui.grid.GridCaption|zebkit.ui.grid.CompGridCaption}",
            "default": "null",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30182,
            "description": "Currently editing row. -1 if no row is editing",
            "itemtype": "attribute",
            "name": "editingRow",
            "type": "{Integer}",
            "default": "-1",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30190,
            "description": "Currently editing column. -1 if no column is editing",
            "itemtype": "attribute",
            "name": "editingCol",
            "type": "{Integer}",
            "default": "-1",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30199,
            "description": "Grid navigation mode",
            "itemtype": "attribute",
            "name": "navigationMode",
            "default": "\"row\"",
            "type": "{String}",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30207,
            "description": "Grid line size",
            "itemtype": "attribute",
            "name": "lineSize",
            "default": "1",
            "type": "{Integer}",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30214,
            "description": "Grid cell top padding",
            "itemtype": "attribute",
            "name": "cellInsetsTop",
            "default": "1",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30222,
            "description": "Grid cell left padding",
            "itemtype": "attribute",
            "name": "cellInsetsLeft",
            "default": "2",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30230,
            "description": "Grid cell bottom padding",
            "itemtype": "attribute",
            "name": "cellInsetsBottom",
            "default": "1",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30238,
            "description": "Grid cell right padding",
            "itemtype": "attribute",
            "name": "cellInsetsRight",
            "default": "2",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30248,
            "description": "Default cell content horizontal alignment",
            "type": "{String}",
            "itemtype": "attribute",
            "name": "defXAlignment",
            "default": "\"left\"",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30256,
            "description": "Default cell content vertical alignment",
            "type": "{String}",
            "itemtype": "attribute",
            "name": "defYAlignment",
            "default": "\"center\"",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30264,
            "description": "Indicate if vertical lines have to be rendered",
            "itemtype": "attribute",
            "name": "drawVerLines",
            "type": "{Boolean}",
            "readonly": "",
            "default": "true",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30272,
            "description": "Indicate if horizontal lines have to be rendered",
            "itemtype": "attribute",
            "name": "drawHorLines",
            "type": "{Boolean}",
            "readonly": "",
            "default": "true",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30281,
            "description": "Indicates if left and right grid net vertical lines\nhave to be rendered or not.",
            "itemtype": "attribute",
            "name": "drawSideLines",
            "type": "{Boolean}",
            "readonly": "",
            "default": "true",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30291,
            "description": "Line color",
            "itemtype": "attribute",
            "name": "lineColor",
            "type": "{String}",
            "default": "gray",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30300,
            "description": "Indicate if size of grid cells have to be calculated\nautomatically basing on its preferred heights and widths",
            "itemtype": "attribute",
            "name": "isUsePsMetric",
            "type": "{Boolean}",
            "default": "false",
            "readonly": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30310,
            "description": "Defines if the pos narker has to be renederd over rendered data",
            "itemtype": "attribute",
            "name": "paintPosMarkerOver",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30504,
            "description": "Get a preferred width the given column wants to have",
            "params": [
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a preferred width of the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColPSWidth",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30514,
            "description": "Get a preferred height the given row wants to have",
            "params": [
                {
                    "name": "col",
                    "description": "a row",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a preferred height of the given row",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getRowPSHeight",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30542,
            "description": "Get number of rows in the given grid",
            "return": {
                "description": "a number of rows",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridRows",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30551,
            "description": "Get number of columns in the given grid",
            "return": {
                "description": "a number of columns",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridColumns",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30560,
            "description": "Get the  given grid row height",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a height of the given row",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getRowHeight",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30571,
            "description": "Get the given grid column width",
            "params": [
                {
                    "name": "col",
                    "description": "a grid column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a width of the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColWidth",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30587,
            "description": "Get the given column top-left corner x coordinate",
            "params": [
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a top-left corner x coordinate of the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColX",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30613,
            "description": "Get the given row top-left corner y coordinate",
            "params": [
                {
                    "name": "row",
                    "description": "a row",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a top-left corner y coordinate\nof the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColX",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30677,
            "description": "Get top grid caption height. Return zero if no top caption element has been defined",
            "return": {
                "description": "a top caption height",
                "type": "Integer"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getTopCaptionHeight",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30687,
            "description": "Get left grid caption width. Return zero if no left caption element has been defined",
            "return": {
                "description": "a left caption width",
                "type": "Integer"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getLeftCaptionWidth",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30762,
            "description": "Stop editing a grid cell.",
            "params": [
                {
                    "name": "applyData",
                    "description": "true if the edited data has to be applied as a new\ngrid cell content",
                    "type": "Boolean"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "stopEditing",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30800,
            "description": "Set if horizontal and vertical lines have to be painted",
            "params": [
                {
                    "name": "hor",
                    "description": "true if horizontal lines have to be painted",
                    "type": "Boolean"
                },
                {
                    "name": "ver",
                    "description": "true if vertical lines have to be painted",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setDrawLines",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30816,
            "description": "Set navigation mode. It is possible to use \"row\" or \"cell\" navigation mode.\nIn first case navigation happens over row, in the second\ncase navigation happens over cell.",
            "params": [
                {
                    "name": "mode",
                    "description": "a navigation mode (\"row\" pr \"cell\")",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setNavigationMode",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30906,
            "description": "Checks if the given grid cell is selected",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid col",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the given row is selected",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isSelected",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30917,
            "description": "Repaint range of grid rows",
            "params": [
                {
                    "name": "r1",
                    "description": "the first row to be repainted",
                    "type": "Integer"
                },
                {
                    "name": "r2",
                    "description": "the last row to be repainted",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "repaintRows",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 30945,
            "description": "Detect a cell by the given location",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate relatively the grid component",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate relatively the grid component",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an object that contains detected grid cell row as\n\"row\" field and a grid column as \"col\" field. null is returned if\nno cell can be detected.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "cellByLocation",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31047,
            "description": "Clear grid row or rows selection",
            "itemtype": "method",
            "name": "clearSelect",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31062,
            "description": "Mark as selected or unselected the given grid cell",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid row,",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a selection status. true if the parameter\nhas not been specified",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "select",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31131,
            "description": "Paint vertical and horizontal grid component lines",
            "params": [
                {
                    "name": "g",
                    "description": "a HTML5 canvas 2D context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "itemtype": "method",
            "name": "paintNet",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31189,
            "description": "Paint grid data",
            "params": [
                {
                    "name": "g",
                    "description": "a HTML5 canvas 2d context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "itemtype": "method",
            "name": "paintData",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31451,
            "description": "Calculate number of rows to be scrolled up or down to scroll one page",
            "params": [
                {
                    "name": "d",
                    "description": "a direction. 1 for scroll down and -1 for scroll up",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a page size in rows to be scrolled up or down",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "pageSize",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31474,
            "description": "Set the given height for the specified grid row. The method has no effect\nif the grid component is forced to use preferred size metric.",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the grid row",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRowHeight",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31487,
            "description": "Set the given height for all or the specified range of rows",
            "params": [
                {
                    "name": "row",
                    "description": "start row",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "len",
                    "description": "number of rows whose height has to be set",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "a height",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRowsHeight",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31533,
            "description": "Set the given width for the specified grid column. The method has no effect\nif the grid component is forced to use preferred size metric.",
            "params": [
                {
                    "name": "column",
                    "description": "a grid column",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of the grid column",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setColWidth",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31546,
            "description": "Set the given width for all or the specified range of columns",
            "params": [
                {
                    "name": "col",
                    "description": "start column",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "len",
                    "description": "number of columns whose height has to be set",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "a width",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setColsHeight",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31630,
            "description": "Set the given editor provider. Editor provider is a way to customize\ncell editing.",
            "params": [
                {
                    "name": "p",
                    "description": "an editor provider",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setEditorProvider",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31645,
            "description": "Force to size grid columns and rows according to its preferred size",
            "params": [
                {
                    "name": "b",
                    "description": "use true to use preferred size",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setUsePsMetric",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31665,
            "description": "Virtual cursor position controller",
            "readonly": "",
            "itemtype": "attribute",
            "name": "position",
            "type": "{zebkit.util.Position}",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31682,
            "description": "Set the given cell view provider. Provider is a special\nclass that says how grid cells content has to be rendered,\naligned, colored",
            "params": [
                {
                    "name": "p",
                    "description": "a view provider",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViewProvider",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31698,
            "description": "Set the given matrix model to be visualized and controlled\nwith the grid component",
            "params": [
                {
                    "name": "d",
                    "description": "a model passed as an\ninstance of  matrix model or an array that contains\nmodel rows as embedded arrays.",
                    "type": "zebkit.data.Matrix|Array"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31731,
            "description": "Set the given top, left, right, bottom cell paddings",
            "params": [
                {
                    "name": "p",
                    "description": "a top, left, right and bottom cell paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setCellPadding",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31742,
            "description": "Set the given top, left, right, bottom cell paddings",
            "params": [
                {
                    "name": "t",
                    "description": "a top cell padding",
                    "type": "Integer"
                },
                {
                    "name": "l",
                    "description": "a left cell padding",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a bottom cell padding",
                    "type": "Integer"
                },
                {
                    "name": "r",
                    "description": "a rightcell padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setCellPaddings",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31765,
            "description": "Set the given color to render the grid vertical and horizontal lines",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setLineColor",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31781,
            "description": "Set the given grid lines size",
            "params": [
                {
                    "name": "s",
                    "description": "a size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLineSize",
            "chainable": 1,
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31795,
            "description": "Start editing the given grid cell. Editing is initiated only if an editor\nprovider has been set and the editor provider defines not-null UI component\nas an editor for the given cell.",
            "params": [
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "startEditing",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31840,
            "description": "Fetch a data from matrix model that has to be edited",
            "params": [
                {
                    "name": "row",
                    "description": "a row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a matrix model data to be edited",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getDataToEdit",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31852,
            "description": "Apply the given edited data to grid matrix model",
            "params": [
                {
                    "name": "row",
                    "description": "a row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                },
                {
                    "name": "an",
                    "description": "edited matrix model data to be applied",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setEditedData",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31927,
            "description": "Set number of views to render different grid component elements",
            "params": [
                {
                    "name": "a",
                    "description": "set of views as dictionary where key is a view\nname and the value is a view instance, string (for color, border),\nor render function. The following view elements can be passed:\n\n\n    {\n       \"onselection\" : <view to render selected row for the grid that holds focus>,\n       \"offselection\": <view to render selected row for the grid that doesn't hold focus>\n    }",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViews",
            "class": "zebkit.ui.grid.Grid"
        },
        {
            "file": "build/zebkit.js",
            "line": 31971,
            "description": "Target grid component",
            "type": "{zebkit.ui.Grid}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "grid",
            "class": "zebkit.ui.grid.GridStretchPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32311,
            "description": "Indicates if controlled component can be moved",
            "itemtype": "attribute",
            "name": "isMoveEnabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebkit.ui.design.ShaperPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32318,
            "description": "Indicates if controlled component can be sized",
            "itemtype": "attribute",
            "name": "isResizeEnabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebkit.ui.design.ShaperPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32325,
            "description": "Minimal possible height or controlled component",
            "itemtype": "attribute",
            "name": "minHeight",
            "type": "{Integer}",
            "default": "12",
            "class": "zebkit.ui.design.ShaperPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32332,
            "description": "Minimal possible width or controlled component",
            "itemtype": "attribute",
            "name": "minWidth",
            "type": "{Integer}",
            "default": "12",
            "class": "zebkit.ui.design.ShaperPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32349,
            "description": "Define key pressed events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebkit.ui.design.ShaperPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32381,
            "description": "Define pointer drag started events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragStarted",
            "class": "zebkit.ui.design.ShaperPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32404,
            "description": "Define pointer dragged events handler",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragged",
            "class": "zebkit.ui.design.ShaperPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 32557,
            "description": "Device ratio.",
            "itemtype": "attribute",
            "name": "$deviceRatio",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 32579,
            "description": "Calculates view port of a browser window",
            "return": {
                "description": "a browser window view port size.\n\n   ```json\n   {\n     width : {Integer},\n     height: {Integer}\n   }\n   ```",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "$viewPortSize",
            "access": "private",
            "tagname": "",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 32615,
            "description": "Tests if the given DOM element is in document",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "a DOM element",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "true if the given DOM element is in document",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "$contains",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 32629,
            "description": "Test if the given page coordinates is inside the given element",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "a DOM element",
                    "type": "Element"
                },
                {
                    "name": "pageX",
                    "description": "an x page coordinate",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "an y page coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the given point is inside the specified DOM element",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "$isInsideElement",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 32679,
            "description": "Creates HTML element that \"eats\" (doesn't propagate and prevents default) all input (touch, mouse, key)\nevents that it gets.",
            "return": {
                "description": "a created HTML element.",
                "type": "HTMLElement"
            },
            "itemtype": "method",
            "name": "$createBlockedElement",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 32710,
            "description": "Dictionary of useful methods an HTML Canvas 2D context can be extended. The following methods are\nincluded:\n\n  - **setFont(f)**   set font\n  - **setColor(c)**  set background and foreground colors\n  - **drawLine(x1, y1, x2, y2, [w])**  draw line of the given width\n  - **ovalPath(x,y,w,h)**  build oval path\n  - **polylinePath(xPoints, yPoints, nPoints)**  build path by the given points\n  - **drawDottedRect(x,y,w,h)**  draw dotted rectangle\n  - **drawDashLine(x,y,x2,y2)** draw dashed line",
            "itemtype": "attribute",
            "name": "$2DContextMethods",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 32840,
            "description": "Extend standard 2D HTML Canvas context instance with the given set of methods.\nIf new methods clash with already existent 2D context method the old one is overwritten\nwith new one and old method is saved using its name prefixed with \"$\" character",
            "params": [
                {
                    "name": "ctx",
                    "description": "a 2D HTML Canvas context instance",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "methods",
                    "description": "list of methods to be added to the context",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "$extendContext",
            "access": "private",
            "tagname": "",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 32866,
            "description": "Adjusts the given HTML Canvas element to the required size that takes in account device DPI.\nExtend the canvas 2D context with extra methods and variables that are used with zebkit UI\nengine.",
            "params": [
                {
                    "name": "c",
                    "description": "a HTML canvas element",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "w",
                    "description": "a required width of the given canvas",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a required height of the given canvas",
                    "type": "Integer"
                },
                {
                    "name": "forceResize",
                    "description": "flag to force canvas resizing even if the canvas has identical width and height.\nIt is required to re-create canvas 2D context to work properly.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "a 2D context of the canvas element",
                "type": "CanvasRenderingContext2D"
            },
            "itemtype": "method",
            "name": "$canvas",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.web"
        },
        {
            "file": "build/zebkit.js",
            "line": 34326,
            "description": "Fulfills the given abstract event with fields from the specified native WEB key event",
            "params": [
                {
                    "name": "e",
                    "description": "a native WEB event",
                    "type": "KeyboardEvent"
                }
            ],
            "itemtype": "method",
            "name": "$fillWith",
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.KeyEvent"
        },
        {
            "file": "build/zebkit.js",
            "line": 34668,
            "description": "Define pointer moved events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerMoved",
            "class": "zebkit.ui.CursorManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 34681,
            "description": "Define pointer entered events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerEntered",
            "class": "zebkit.ui.CursorManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 34702,
            "description": "Define pointer exited events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerExited",
            "class": "zebkit.ui.CursorManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 34718,
            "description": "Define pointer dragged events handler.",
            "params": [
                {
                    "name": "e",
                    "description": "a pointer event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "itemtype": "method",
            "name": "pointerDragged",
            "class": "zebkit.ui.CursorManager"
        },
        {
            "file": "build/zebkit.js",
            "line": 34768,
            "description": "Reference to HTML element the UI component wraps",
            "itemtype": "attribute",
            "name": "element",
            "readonly": "",
            "type": "{HTMLElement}",
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34882,
            "description": "Indicates that this component is a DOM element wrapper",
            "itemtype": "attribute",
            "name": "isDOMElement",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34901,
            "description": "Set the CSS font of the wrapped HTML element",
            "params": [
                {
                    "name": "f",
                    "description": "a font",
                    "type": "String|zebkit.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "chainable": 1,
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34913,
            "description": "Set the CSS color of the wrapped HTML element",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setColor",
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34924,
            "description": "Apply the given set of CSS styles to the wrapped HTML element",
            "params": [
                {
                    "name": "styles",
                    "description": "a dictionary of CSS styles",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setStyles",
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34938,
            "description": "Apply the given CSS style to the wrapped HTML element",
            "params": [
                {
                    "name": "a",
                    "description": "name of the CSS style",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "value the CSS style has to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setStyle",
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34964,
            "description": "Set the specified attribute to the wrapped HTML element",
            "params": [
                {
                    "name": "name",
                    "description": "a name of attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "a value of the attribute",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setAttribute",
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34976,
            "description": "Set the specified attributes set to the wrapped HTML element",
            "params": [
                {
                    "name": "attrs",
                    "description": "the dictionary of attributes where name of an attribute is a key\nof the dictionary and",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setAttributes",
            "chainable": 1,
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 34990,
            "description": "Implements \"paint\" method to be aware when the component is visible.\nIt is used to adjust wrapped HTML element visibility and size.",
            "params": [
                {
                    "name": "g",
                    "description": "a 2D canvas context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "itemtype": "method",
            "name": "paint",
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 35072,
            "description": "Set the inner content of the wrapped HTML element",
            "params": [
                {
                    "name": "an",
                    "description": "inner content",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setContent",
            "chainable": 1,
            "class": "zebkit.ui.HtmlElement"
        },
        {
            "file": "build/zebkit.js",
            "line": 35317,
            "description": "Evaluates if the given zebkit HTML UI component is invisible state.",
            "params": [
                {
                    "name": "c",
                    "description": "an UI HTML element wrapper",
                    "type": "zebkit.ui.HtmlElement"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$isInInvisibleState",
            "return": {
                "description": "true if the HTML element wrapped with zebkit UI is in invisible state",
                "type": "Boolean"
            },
            "class": "zebkit.ui.HtmlElementMan"
        },
        {
            "file": "build/zebkit.js",
            "line": 35659,
            "description": "Keeps rectangular \"dirty\" area of the canvas component",
            "access": "private",
            "tagname": "",
            "itemtype": "attribute",
            "name": "$da",
            "type": "{Object}\n      { x:Integer, y:Integer, width:Integer, height:Integer }",
            "class": "zebkit.ui.HtmlCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 35799,
            "description": "Canvas context",
            "itemtype": "attribute",
            "name": "$context",
            "type": "{CanvasRenderingContext2D}",
            "class": "zebkit.ui.HtmlCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 35928,
            "description": "Target window",
            "itemtype": "attribute",
            "name": "target",
            "type": "{zebkit.ui.Window}",
            "readonly": "",
            "class": "zebkit.ui.HtmlWinCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 35979,
            "description": "Get a text of the text input element",
            "return": {
                "description": "a text of the  text input element",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebkit.ui.html.HtmlTextInput"
        },
        {
            "file": "build/zebkit.js",
            "line": 35988,
            "description": "Set the text",
            "params": [
                {
                    "name": "t",
                    "description": "a text",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "zebkit.ui.html.HtmlTextInput"
        },
        {
            "file": "build/zebkit.js",
            "line": 36168,
            "description": "Implement the event handler method  to catch canvas initialized event. The event is triggered once the\ncanvas has been initiated and all properties listeners of the canvas are set upped. The event can be\nused to load saved data.\n\n        var p = new zebkit.ui.zCanvas(300, 300, [\n             function canvasInitialized() {\n                 // do something\n             }\n        ]);",
            "itemtype": "event",
            "name": "canvasInitialized",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36209,
            "description": "Dictionary to track layers by its ids.",
            "itemtype": "attribute",
            "name": "$layers",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36297,
            "description": "Indicates this the root canvas element",
            "itemtype": "attribute",
            "name": "$isRootCanvas",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "default": "true",
            "readonly": "",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36307,
            "description": "Indicate if the canvas has to be stretched to fill the whole view port area.",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "isSizeFull",
            "readonly": "",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36318,
            "description": "Transforms the pageX coordinate into relatively to the canvas origin\ncoordinate taking in account the canvas transformation",
            "params": [
                {
                    "name": "pageX",
                    "description": "a pageX coordinate",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "a pageY coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an x coordinate that is relative to the canvas origin",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "$toElementX",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36338,
            "description": "Transforms the pageY coordinate into relatively to the canvas origin\ncoordinate taking in account the canvas transformation",
            "params": [
                {
                    "name": "pageX",
                    "description": "a pageX coordinate",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "a pageY coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an y coordinate that is relative to the canvas origin",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "$toElementY",
            "access": "protected",
            "tagname": "",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36377,
            "description": "Catches key typed events, adjusts and distributes it to UI hierarchy",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$keyTyped",
            "return": {
                "description": "true if the event has been processed",
                "type": "Boolean"
            },
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36393,
            "description": "Catches key pressed events, adjusts and distributes it to UI hierarchy",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$keyPressed",
            "return": {
                "description": "true if the event has been processed",
                "type": "Boolean"
            },
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36417,
            "description": "Catches key released events, adjusts and distributes it to UI hierarchy",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.KeyEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$keyReleased",
            "return": {
                "description": "true if the event has been processed",
                "type": "Boolean"
            },
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36433,
            "description": "Catches pointer entered events, adjusts and distributes it to UI hierarchy",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerEntered",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36467,
            "description": "Catches pointer exited events, adjusts and distributes it to UI hierarchy",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerExited",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36483,
            "description": "Catches pointer moved events, adjusts and distributes it to UI hierarchy.",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerMoved",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36522,
            "description": "Catches pointer drag started events, adjusts and distributes it to UI hierarchy.",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerDragStarted",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36542,
            "description": "Catches pointer dragged events, adjusts and distributes it to UI hierarchy.",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerDragged",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36558,
            "description": "Catches pointer drag ended events, adjusts and distributes it to UI hierarchy.",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerDragEnded",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36590,
            "description": "Catches pointer clicked events, adjusts and distributes it to UI hierarchy.",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerClicked",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36632,
            "description": "Catches pointer released events, adjusts and distributes it to UI hierarchy.",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerReleased",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36678,
            "description": "Catches pointer pressed events, adjusts and distributes it to UI hierarchy.",
            "params": [
                {
                    "name": "e",
                    "description": "an event",
                    "type": "zebkit.ui.PointerEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "$pointerPressed",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36757,
            "description": "Get the canvas layer by the specified layer ID. Layer is a children component\nof the canvas UI component. Every layer has an ID assigned to it the method\nactually allows developers to get the canvas children component by its ID",
            "params": [
                {
                    "name": "id",
                    "description": "a layer ID",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a layer (children) component",
                "type": "zebkit.ui.Panel"
            },
            "itemtype": "method",
            "name": "getLayer",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36795,
            "description": "Force the canvas to occupy the all available view port area",
            "params": [
                {
                    "name": "b",
                    "description": "true to force the canvas be stretched over all available view port area",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "setSizeFull",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36802,
            "description": "Indicate if the canvas has to be stretched to\nfill the whole screen area.",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "isSizeFull",
            "readonly": "",
            "class": "zebkit.ui.zCanvas"
        },
        {
            "file": "build/zebkit.js",
            "line": 36998,
            "description": "Original video DOM element that is created\nto play video",
            "type": "{Video}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "video",
            "class": "zebkit.ui.web.VideoPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 37174,
            "description": "Set autoplay for video",
            "params": [
                {
                    "name": "b",
                    "description": "an autoplay flag",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "autoplay",
            "chainable": 1,
            "class": "zebkit.ui.web.VideoPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 37185,
            "description": "Pause video",
            "itemtype": "method",
            "name": "pause",
            "chainable": 1,
            "class": "zebkit.ui.web.VideoPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 37198,
            "description": "Mute sound",
            "params": [
                {
                    "name": "b",
                    "description": "true to mute the video sound",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "mute",
            "chainable": 1,
            "class": "zebkit.ui.web.VideoPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 37209,
            "description": "Start or continue playing video",
            "itemtype": "method",
            "name": "play",
            "chainable": 1,
            "class": "zebkit.ui.web.VideoPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 37227,
            "description": "Adjust video proportion to fill maximal space with correct ratio",
            "params": [
                {
                    "name": "b",
                    "description": "true if the video proportion has to be adjusted",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "adjustProportions",
            "chainable": 1,
            "class": "zebkit.ui.web.VideoPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 37256,
            "description": "Check if the video is paused",
            "itemtype": "method",
            "name": "isPaused",
            "return": {
                "description": "true if the video has been paused",
                "type": "Boolean"
            },
            "class": "zebkit.ui.web.VideoPan"
        },
        {
            "file": "build/zebkit.js",
            "line": 37265,
            "description": "Check if the video is ended",
            "itemtype": "method",
            "name": "isEnded",
            "return": {
                "description": "true if the video has been ended",
                "type": "Boolean"
            },
            "class": "zebkit.ui.web.VideoPan"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: access",
            "line": " build/ui.calendar.js:4"
        },
        {
            "message": "unknown tag: access",
            "line": " build/ui.vk.js:23"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:1083"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:3168"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:5681"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:6376"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:7856"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:15527"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:26798"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:28666"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:32166"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:32551"
        },
        {
            "message": "unknown tag: access",
            "line": " build/zebkit.js:35946"
        },
        {
            "message": "Missing item type\nProvide path search functionality",
            "line": " build/zebkit.js:3463"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:4197"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:4659"
        },
        {
            "message": "Missing item type\nIterate over tree hierarchy starting from its root element",
            "line": " build/zebkit.js:7355"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:12186"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:17565"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:20711"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:21380"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:21446"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:22548"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:23372"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:24091"
        },
        {
            "message": "Missing item type",
            "line": " build/zebkit.js:29901"
        }
    ]
}